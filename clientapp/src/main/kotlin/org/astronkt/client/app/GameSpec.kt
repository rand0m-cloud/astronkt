@file:Suppress("unused", "NestedLambdaShadowedImplicitParameter", "TrailingComma")

import org.astronkt.*

data class bool(val inner: UByte) {
	companion object: ToFieldValue<bool> {
		override fun fromFieldValue(value: FieldValue): bool {
			val inner = value.toUInt8()!!
			return bool(inner)
		}

		override val type: FieldValue.Type = FieldValue.Type.UInt8

		override fun bool.toFieldValue(): FieldValue = inner.toFieldValue()
	}
}

data class DoId(val inner: UInt) {
	companion object: ToFieldValue<DoId> {
		override fun fromFieldValue(value: FieldValue): DoId {
			val inner = value.toUInt32()!!
			return DoId(inner)
		}

		override val type: FieldValue.Type = FieldValue.Type.UInt32

		override fun DoId.toFieldValue(): FieldValue = inner.toFieldValue()
	}
}

data class DoIdList(val inner: List<DoId>) {
	companion object: ToFieldValue<DoIdList> {
		override fun fromFieldValue(value: FieldValue): DoIdList {
			val inner = with(DoId) { value.toList()!!.map { fromFieldValue(it) }}
			return DoIdList(inner)
		}

		override val type: FieldValue.Type = FieldValue.Type.Array(FieldValue.Type.UInt32)

		override fun DoIdList.toFieldValue(): FieldValue = with(DoId) { FieldValue.ArrayValue(FieldValue.Type.UInt32, inner.map { it.toFieldValue() }).toFieldValue()}
	}
}

data class AvatarPendingDel(val Avatar: UInt, val date: UInt, ) {
	companion object: ToFieldValue<AvatarPendingDel> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )

		override fun fromFieldValue(value: FieldValue): AvatarPendingDel {
			val tuple = value.toTuple()!!
			val Avatar = tuple[0].toUInt32()!!
			val date = tuple[1].toUInt32()!!
			return AvatarPendingDel(Avatar, date)
		}

		override fun AvatarPendingDel.toFieldValue(): FieldValue =
			FieldValue.TupleValue(Avatar.toFieldValue(), date.toFieldValue())
	}
}



data class BarrierData(val context: UShort, val name: String, val avIds: List<UInt>, ) {
	companion object: ToFieldValue<BarrierData> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), )

		override fun fromFieldValue(value: FieldValue): BarrierData {
			val tuple = value.toTuple()!!
			val context = tuple[0].toUInt16()!!
			val name = tuple[1].toStringValue()!!
			val avIds = tuple[2].toList()!!.map { it.toUInt32()!! }
			return BarrierData(context, name, avIds)
		}

		override fun BarrierData.toFieldValue(): FieldValue =
			FieldValue.TupleValue(context.toFieldValue(), name.toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt32, avIds.map { it.toFieldValue() }).toFieldValue())
	}
}



data class OSInfo(val name: String, val platform: Short, val major: Short, val minor: Short, ) {
	companion object: ToFieldValue<OSInfo> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )

		override fun fromFieldValue(value: FieldValue): OSInfo {
			val tuple = value.toTuple()!!
			val name = tuple[0].toStringValue()!!
			val platform = tuple[1].toInt16()!!
			val major = tuple[2].toInt16()!!
			val minor = tuple[3].toInt16()!!
			return OSInfo(name, platform, major, minor)
		}

		override fun OSInfo.toFieldValue(): FieldValue =
			FieldValue.TupleValue(name.toFieldValue(), platform.toFieldValue(), major.toFieldValue(), minor.toFieldValue())
	}
}

data class CPUSpeed(val maxSpeed: Double, val currentSpeed: Double, ) {
	companion object: ToFieldValue<CPUSpeed> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, )

		override fun fromFieldValue(value: FieldValue): CPUSpeed {
			val tuple = value.toTuple()!!
			val maxSpeed = tuple[0].toInt32()!!.transform {
				divide(1000.0f)
			}
			val currentSpeed = tuple[1].toInt32()!!.transform {
				divide(1000.0f)
			}
			return CPUSpeed(maxSpeed, currentSpeed)
		}

		override fun CPUSpeed.toFieldValue(): FieldValue =
			FieldValue.TupleValue(maxSpeed.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), currentSpeed.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue())
	}
}








data class Fixture(val x: Double, val y: Double, val z: Double, val h: Double, val p: Double, val r: Double, val state: String, ) {
	companion object: ToFieldValue<Fixture> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.String, )

		override fun fromFieldValue(value: FieldValue): Fixture {
			val tuple = value.toTuple()!!
			val x = tuple[0].toInt32()!!.transform {
				divide(10.0f)
			}
			val y = tuple[1].toInt32()!!.transform {
				divide(10.0f)
			}
			val z = tuple[2].toInt32()!!.transform {
				divide(10.0f)
			}
			val h = tuple[3].toInt16()!!.transform {
				divide(10.0f)
			}
			val p = tuple[4].toInt16()!!.transform {
				divide(10.0f)
			}
			val r = tuple[5].toInt16()!!.transform {
				divide(10.0f)
			}
			val state = tuple[6].toStringValue()!!
			return Fixture(x, y, z, h, p, r, state)
		}

		override fun Fixture.toFieldValue(): FieldValue =
			FieldValue.TupleValue(x.unTransform(FieldValue.Type.Int32) {
			divide(10.0f)
		}.toFieldValue(), y.unTransform(FieldValue.Type.Int32) {
			divide(10.0f)
		}.toFieldValue(), z.unTransform(FieldValue.Type.Int32) {
			divide(10.0f)
		}.toFieldValue(), h.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), p.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), r.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), state.toFieldValue())
	}
}


data class TalkModification(val offset: UShort, val size: UShort, ) {
	companion object: ToFieldValue<TalkModification> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, )

		override fun fromFieldValue(value: FieldValue): TalkModification {
			val tuple = value.toTuple()!!
			val offset = tuple[0].toUInt16()!!
			val size = tuple[1].toUInt16()!!
			return TalkModification(offset, size)
		}

		override fun TalkModification.toFieldValue(): FieldValue =
			FieldValue.TupleValue(offset.toFieldValue(), size.toFieldValue())
	}
}







data class FriendEntry(val friendId: UInt, val friendCode: UByte, ) {
	companion object: ToFieldValue<FriendEntry> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): FriendEntry {
			val tuple = value.toTuple()!!
			val friendId = tuple[0].toUInt32()!!
			val friendCode = tuple[1].toUInt8()!!
			return FriendEntry(friendId, friendCode)
		}

		override fun FriendEntry.toFieldValue(): FieldValue =
			FieldValue.TupleValue(friendId.toFieldValue(), friendCode.toFieldValue())
	}
}





data class FriendInfo(val avatarName: String, val avatarId: UInt, val playerName: String, val onlineYesNo: UByte, val openChatEnabledYesNo: UByte, val openChatFriendshipYesNo: UByte, val wlChatEnabledYesNo: UByte, val location: String, val sublocation: String, val timestamp: UInt, ) {
	companion object: ToFieldValue<FriendInfo> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt32, )

		override fun fromFieldValue(value: FieldValue): FriendInfo {
			val tuple = value.toTuple()!!
			val avatarName = tuple[0].toStringValue()!!
			val avatarId = tuple[1].toUInt32()!!
			val playerName = tuple[2].toStringValue()!!
			val onlineYesNo = tuple[3].toUInt8()!!
			val openChatEnabledYesNo = tuple[4].toUInt8()!!
			val openChatFriendshipYesNo = tuple[5].toUInt8()!!
			val wlChatEnabledYesNo = tuple[6].toUInt8()!!
			val location = tuple[7].toStringValue()!!
			val sublocation = tuple[8].toStringValue()!!
			val timestamp = tuple[9].toUInt32()!!
			return FriendInfo(avatarName, avatarId, playerName, onlineYesNo, openChatEnabledYesNo, openChatFriendshipYesNo, wlChatEnabledYesNo, location, sublocation, timestamp)
		}

		override fun FriendInfo.toFieldValue(): FieldValue =
			FieldValue.TupleValue(avatarName.toFieldValue(), avatarId.toFieldValue(), playerName.toFieldValue(), onlineYesNo.toFieldValue(), openChatEnabledYesNo.toFieldValue(), openChatFriendshipYesNo.toFieldValue(), wlChatEnabledYesNo.toFieldValue(), location.toFieldValue(), sublocation.toFieldValue(), timestamp.toFieldValue())
	}
}

data class AvatarFriendInfo(val avatarName: String, val playerName: String, val playerId: UInt, val onlineYesNo: UByte, val openChatEnabledYesNo: UByte, val openChatFriendshipYesNo: UByte, val wlChatEnabledYesNo: UByte, ) {
	companion object: ToFieldValue<AvatarFriendInfo> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): AvatarFriendInfo {
			val tuple = value.toTuple()!!
			val avatarName = tuple[0].toStringValue()!!
			val playerName = tuple[1].toStringValue()!!
			val playerId = tuple[2].toUInt32()!!
			val onlineYesNo = tuple[3].toUInt8()!!
			val openChatEnabledYesNo = tuple[4].toUInt8()!!
			val openChatFriendshipYesNo = tuple[5].toUInt8()!!
			val wlChatEnabledYesNo = tuple[6].toUInt8()!!
			return AvatarFriendInfo(avatarName, playerName, playerId, onlineYesNo, openChatEnabledYesNo, openChatFriendshipYesNo, wlChatEnabledYesNo)
		}

		override fun AvatarFriendInfo.toFieldValue(): FieldValue =
			FieldValue.TupleValue(avatarName.toFieldValue(), playerName.toFieldValue(), playerId.toFieldValue(), onlineYesNo.toFieldValue(), openChatEnabledYesNo.toFieldValue(), openChatFriendshipYesNo.toFieldValue(), wlChatEnabledYesNo.toFieldValue())
	}
}

data class MemberInfo(val avatarId: UInt, val avatarName: String, val avatarRank: UByte, val avatarOnline: UByte, val bandManagerId: UInt, val bandId: UInt, ) {
	companion object: ToFieldValue<MemberInfo> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )

		override fun fromFieldValue(value: FieldValue): MemberInfo {
			val tuple = value.toTuple()!!
			val avatarId = tuple[0].toUInt32()!!
			val avatarName = tuple[1].toStringValue()!!
			val avatarRank = tuple[2].toUInt8()!!
			val avatarOnline = tuple[3].toUInt8()!!
			val bandManagerId = tuple[4].toUInt32()!!
			val bandId = tuple[5].toUInt32()!!
			return MemberInfo(avatarId, avatarName, avatarRank, avatarOnline, bandManagerId, bandId)
		}

		override fun MemberInfo.toFieldValue(): FieldValue =
			FieldValue.TupleValue(avatarId.toFieldValue(), avatarName.toFieldValue(), avatarRank.toFieldValue(), avatarOnline.toFieldValue(), bandManagerId.toFieldValue(), bandId.toFieldValue())
	}
}

data class leaderBoardRecordResponces(val found: Char, val id: UInt, val text: String, val value: Int, ) {
	companion object: ToFieldValue<leaderBoardRecordResponces> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, )

		override fun fromFieldValue(value: FieldValue): leaderBoardRecordResponces {
			val tuple = value.toTuple()!!
			val found = tuple[0].toChar()!!
			val id = tuple[1].toUInt32()!!
			val text = tuple[2].toStringValue()!!
			val value = tuple[3].toInt32()!!
			return leaderBoardRecordResponces(found, id, text, value)
		}

		override fun leaderBoardRecordResponces.toFieldValue(): FieldValue =
			FieldValue.TupleValue(found.toFieldValue(), id.toFieldValue(), text.toFieldValue(), value.toFieldValue())
	}
}

data class leaderBoardRecord(val id: UInt, val text: String, val value: Int, ) {
	companion object: ToFieldValue<leaderBoardRecord> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, )

		override fun fromFieldValue(value: FieldValue): leaderBoardRecord {
			val tuple = value.toTuple()!!
			val id = tuple[0].toUInt32()!!
			val text = tuple[1].toStringValue()!!
			val value = tuple[2].toInt32()!!
			return leaderBoardRecord(id, text, value)
		}

		override fun leaderBoardRecord.toFieldValue(): FieldValue =
			FieldValue.TupleValue(id.toFieldValue(), text.toFieldValue(), value.toFieldValue())
	}
}













data class PotentialAvatar(val avNum: UInt, val avName: String, val avDNA: ByteArray, val avPosition: UByte, val nameState: UByte, ) {
	companion object: ToFieldValue<PotentialAvatar> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Blob, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): PotentialAvatar {
			val tuple = value.toTuple()!!
			val avNum = tuple[0].toUInt32()!!
			val avName = tuple[1].toStringValue()!!
			val avDNA = tuple[2].toBlob()!!
			val avPosition = tuple[3].toUInt8()!!
			val nameState = tuple[4].toUInt8()!!
			return PotentialAvatar(avNum, avName, avDNA, avPosition, nameState)
		}

		override fun PotentialAvatar.toFieldValue(): FieldValue =
			FieldValue.TupleValue(avNum.toFieldValue(), avName.toFieldValue(), avDNA.toFieldValue(), avPosition.toFieldValue(), nameState.toFieldValue())
	}
}


data class GiftItem(val Item: ByteArray, val giftTag: String, ) {
	companion object: ToFieldValue<GiftItem> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.String, )

		override fun fromFieldValue(value: FieldValue): GiftItem {
			val tuple = value.toTuple()!!
			val Item = tuple[0].toBlob()!!
			val giftTag = tuple[1].toStringValue()!!
			return GiftItem(Item, giftTag)
		}

		override fun GiftItem.toFieldValue(): FieldValue =
			FieldValue.TupleValue(Item.toFieldValue(), giftTag.toFieldValue())
	}
}

data class gardenSpecial(val index: UByte, val count: UByte, ) {
	companion object: ToFieldValue<gardenSpecial> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): gardenSpecial {
			val tuple = value.toTuple()!!
			val index = tuple[0].toUInt8()!!
			val count = tuple[1].toUInt8()!!
			return gardenSpecial(index, count)
		}

		override fun gardenSpecial.toFieldValue(): FieldValue =
			FieldValue.TupleValue(index.toFieldValue(), count.toFieldValue())
	}
}

data class simpleMail(val msgId: ULong, val senderId: UInt, val year: UShort, val month: UByte, val day: UByte, val body: String, ) {
	companion object: ToFieldValue<simpleMail> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, )

		override fun fromFieldValue(value: FieldValue): simpleMail {
			val tuple = value.toTuple()!!
			val msgId = tuple[0].toUInt64()!!
			val senderId = tuple[1].toUInt32()!!
			val year = tuple[2].toUInt16()!!
			val month = tuple[3].toUInt8()!!
			val day = tuple[4].toUInt8()!!
			val body = tuple[5].toStringValue()!!
			return simpleMail(msgId, senderId, year, month, day, body)
		}

		override fun simpleMail.toFieldValue(): FieldValue =
			FieldValue.TupleValue(msgId.toFieldValue(), senderId.toFieldValue(), year.toFieldValue(), month.toFieldValue(), day.toFieldValue(), body.toFieldValue())
	}
}

data class invite(val inviteKey: ULong, val partyId: ULong, val status: UByte, ) {
	companion object: ToFieldValue<invite> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt64, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): invite {
			val tuple = value.toTuple()!!
			val inviteKey = tuple[0].toUInt64()!!
			val partyId = tuple[1].toUInt64()!!
			val status = tuple[2].toUInt8()!!
			return invite(inviteKey, partyId, status)
		}

		override fun invite.toFieldValue(): FieldValue =
			FieldValue.TupleValue(inviteKey.toFieldValue(), partyId.toFieldValue(), status.toFieldValue())
	}
}

data class decoration(val decorId: UByte, val x: UByte, val y: UByte, val h: UByte, ) {
	companion object: ToFieldValue<decoration> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): decoration {
			val tuple = value.toTuple()!!
			val decorId = tuple[0].toUInt8()!!
			val x = tuple[1].toUInt8()!!
			val y = tuple[2].toUInt8()!!
			val h = tuple[3].toUInt8()!!
			return decoration(decorId, x, y, h)
		}

		override fun decoration.toFieldValue(): FieldValue =
			FieldValue.TupleValue(decorId.toFieldValue(), x.toFieldValue(), y.toFieldValue(), h.toFieldValue())
	}
}

data class activity(val activityId: UByte, val x: UByte, val y: UByte, val h: UByte, ) {
	companion object: ToFieldValue<activity> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): activity {
			val tuple = value.toTuple()!!
			val activityId = tuple[0].toUInt8()!!
			val x = tuple[1].toUInt8()!!
			val y = tuple[2].toUInt8()!!
			val h = tuple[3].toUInt8()!!
			return activity(activityId, x, y, h)
		}

		override fun activity.toFieldValue(): FieldValue =
			FieldValue.TupleValue(activityId.toFieldValue(), x.toFieldValue(), y.toFieldValue(), h.toFieldValue())
	}
}

data class party(val partyId: ULong, val hostId: UInt, val startYear: UShort, val startMonth: UByte, val startDay: UByte, val startHour: UByte, val startMinute: UByte, val endYear: UShort, val endMonth: UByte, val endDay: UByte, val endHour: UByte, val endMinute: UByte, val isPrivate: UByte, val inviteTheme: UByte, val activities: List<activity>, val decors: List<decoration>, val status: UByte, ) {
	companion object: ToFieldValue<party> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): party {
			val tuple = value.toTuple()!!
			val partyId = tuple[0].toUInt64()!!
			val hostId = tuple[1].toUInt32()!!
			val startYear = tuple[2].toUInt16()!!
			val startMonth = tuple[3].toUInt8()!!
			val startDay = tuple[4].toUInt8()!!
			val startHour = tuple[5].toUInt8()!!
			val startMinute = tuple[6].toUInt8()!!
			val endYear = tuple[7].toUInt16()!!
			val endMonth = tuple[8].toUInt8()!!
			val endDay = tuple[9].toUInt8()!!
			val endHour = tuple[10].toUInt8()!!
			val endMinute = tuple[11].toUInt8()!!
			val isPrivate = tuple[12].toUInt8()!!
			val inviteTheme = tuple[13].toUInt8()!!
			val activities = with(activity) { tuple[14].toList()!!.map { fromFieldValue(it) }}
			val decors = with(decoration) { tuple[15].toList()!!.map { fromFieldValue(it) }}
			val status = tuple[16].toUInt8()!!
			return party(partyId, hostId, startYear, startMonth, startDay, startHour, startMinute, endYear, endMonth, endDay, endHour, endMinute, isPrivate, inviteTheme, activities, decors, status)
		}

		override fun party.toFieldValue(): FieldValue =
			FieldValue.TupleValue(partyId.toFieldValue(), hostId.toFieldValue(), startYear.toFieldValue(), startMonth.toFieldValue(), startDay.toFieldValue(), startHour.toFieldValue(), startMinute.toFieldValue(), endYear.toFieldValue(), endMonth.toFieldValue(), endDay.toFieldValue(), endHour.toFieldValue(), endMinute.toFieldValue(), isPrivate.toFieldValue(), inviteTheme.toFieldValue(), with(activity) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), activities.map { it.toFieldValue() }).toFieldValue()}, with(decoration) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), decors.map { it.toFieldValue() }).toFieldValue()}, status.toFieldValue())
	}
}

data class partyReply(val inviteeId: UInt, val status: UByte, ) {
	companion object: ToFieldValue<partyReply> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): partyReply {
			val tuple = value.toTuple()!!
			val inviteeId = tuple[0].toUInt32()!!
			val status = tuple[1].toUInt8()!!
			return partyReply(inviteeId, status)
		}

		override fun partyReply.toFieldValue(): FieldValue =
			FieldValue.TupleValue(inviteeId.toFieldValue(), status.toFieldValue())
	}
}

data class repliesForOneParty(val partyId: ULong, val partyReplies: List<partyReply>, ) {
	companion object: ToFieldValue<repliesForOneParty> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )), )

		override fun fromFieldValue(value: FieldValue): repliesForOneParty {
			val tuple = value.toTuple()!!
			val partyId = tuple[0].toUInt64()!!
			val partyReplies = with(partyReply) { tuple[1].toList()!!.map { fromFieldValue(it) }}
			return repliesForOneParty(partyId, partyReplies)
		}

		override fun repliesForOneParty.toFieldValue(): FieldValue =
			FieldValue.TupleValue(partyId.toFieldValue(), with(partyReply) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ), partyReplies.map { it.toFieldValue() }).toFieldValue()})
	}
}

data class publicPartyInfo(val shardId: UInt, val zoneId: UInt, val numberOfGuests: UByte, val hostName: String, val activityIds: List<UByte>, val minLeft: UShort, ) {
	companion object: ToFieldValue<publicPartyInfo> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt16, )

		override fun fromFieldValue(value: FieldValue): publicPartyInfo {
			val tuple = value.toTuple()!!
			val shardId = tuple[0].toUInt32()!!
			val zoneId = tuple[1].toUInt32()!!
			val numberOfGuests = tuple[2].toUInt8()!!
			val hostName = tuple[3].toStringValue()!!
			val activityIds = tuple[4].toList()!!.map { it.toUInt8()!! }
			val minLeft = tuple[5].toUInt16()!!
			return publicPartyInfo(shardId, zoneId, numberOfGuests, hostName, activityIds, minLeft)
		}

		override fun publicPartyInfo.toFieldValue(): FieldValue =
			FieldValue.TupleValue(shardId.toFieldValue(), zoneId.toFieldValue(), numberOfGuests.toFieldValue(), hostName.toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt8, activityIds.map { it.toFieldValue() }).toFieldValue(), minLeft.toFieldValue())
	}
}

data class jukeboxSongInfo(val phase: Double, val fileName: String, ) {
	companion object: ToFieldValue<jukeboxSongInfo> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, )

		override fun fromFieldValue(value: FieldValue): jukeboxSongInfo {
			val tuple = value.toTuple()!!
			val phase = tuple[0].toUInt8()!!.transform {
				divide(10.0f)
			}
			val fileName = tuple[1].toStringValue()!!
			return jukeboxSongInfo(phase, fileName)
		}

		override fun jukeboxSongInfo.toFieldValue(): FieldValue =
			FieldValue.TupleValue(phase.unTransform(FieldValue.Type.UInt8) {
			divide(10.0f)
		}.toFieldValue(), fileName.toFieldValue())
	}
}

data class partyCloudColor(val cloudNumber: UShort, val r: Double, val g: Double, val b: Double, ) {
	companion object: ToFieldValue<partyCloudColor> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): partyCloudColor {
			val tuple = value.toTuple()!!
			val cloudNumber = tuple[0].toUInt16()!!
			val r = tuple[1].toUInt8()!!.transform {
				divide(100.0f)
			}
			val g = tuple[2].toUInt8()!!.transform {
				divide(100.0f)
			}
			val b = tuple[3].toUInt8()!!.transform {
				divide(100.0f)
			}
			return partyCloudColor(cloudNumber, r, g, b)
		}

		override fun partyCloudColor.toFieldValue(): FieldValue =
			FieldValue.TupleValue(cloudNumber.toFieldValue(), r.unTransform(FieldValue.Type.UInt8) {
			divide(100.0f)
		}.toFieldValue(), g.unTransform(FieldValue.Type.UInt8) {
			divide(100.0f)
		}.toFieldValue(), b.unTransform(FieldValue.Type.UInt8) {
			divide(100.0f)
		}.toFieldValue())
	}
}

data class datetime(val year: UShort, val month: UByte, val day: UByte, val hour: UByte, val minutes: UByte, val seconds: UByte, ) {
	companion object: ToFieldValue<datetime> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): datetime {
			val tuple = value.toTuple()!!
			val year = tuple[0].toUInt16()!!
			val month = tuple[1].toUInt8()!!
			val day = tuple[2].toUInt8()!!
			val hour = tuple[3].toUInt8()!!
			val minutes = tuple[4].toUInt8()!!
			val seconds = tuple[5].toUInt8()!!
			return datetime(year, month, day, hour, minutes, seconds)
		}

		override fun datetime.toFieldValue(): FieldValue =
			FieldValue.TupleValue(year.toFieldValue(), month.toFieldValue(), day.toFieldValue(), hour.toFieldValue(), minutes.toFieldValue(), seconds.toFieldValue())
	}
}





data class pair16(val inner: List<Short>) {
	companion object: ToFieldValue<pair16> {
		override fun fromFieldValue(value: FieldValue): pair16 {
			val inner = value.toList()!!.map { it.toInt16()!! }
			return pair16(inner)
		}

		override val type: FieldValue.Type = FieldValue.Type.Array(FieldValue.Type.Int16)

		override fun pair16.toFieldValue(): FieldValue = FieldValue.ArrayValue(FieldValue.Type.Int16, inner.map { it.toFieldValue() }).toFieldValue()
	}
}

































data class LinkPosition(val x: Double, val y: Double, val z: Double, ) {
	companion object: ToFieldValue<LinkPosition> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )

		override fun fromFieldValue(value: FieldValue): LinkPosition {
			val tuple = value.toTuple()!!
			val x = tuple[0].toInt16()!!.transform {
				divide(100.0f)
			}
			val y = tuple[1].toInt16()!!.transform {
				divide(100.0f)
			}
			val z = tuple[2].toInt16()!!.transform {
				divide(100.0f)
			}
			return LinkPosition(x, y, z)
		}

		override fun LinkPosition.toFieldValue(): FieldValue =
			FieldValue.TupleValue(x.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), y.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), z.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue())
	}
}






































data class decorItem(val decorType: UByte, val dataByte: List<UByte>, val dataWord: List<UInt>, ) {
	companion object: ToFieldValue<decorItem> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt32), )

		override fun fromFieldValue(value: FieldValue): decorItem {
			val tuple = value.toTuple()!!
			val decorType = tuple[0].toUInt8()!!
			val dataByte = tuple[1].toList()!!.map { it.toUInt8()!! }
			val dataWord = tuple[2].toList()!!.map { it.toUInt32()!! }
			return decorItem(decorType, dataByte, dataWord)
		}

		override fun decorItem.toFieldValue(): FieldValue =
			FieldValue.TupleValue(decorType.toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt8, dataByte.map { it.toFieldValue() }).toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt32, dataWord.map { it.toFieldValue() }).toFieldValue())
	}
}

data class lawnItem(val type: UByte, val hardPoint: UByte, val waterLevel: Byte, val growthLevel: Byte, val optional: UShort, ) {
	companion object: ToFieldValue<lawnItem> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, )

		override fun fromFieldValue(value: FieldValue): lawnItem {
			val tuple = value.toTuple()!!
			val type = tuple[0].toUInt8()!!
			val hardPoint = tuple[1].toUInt8()!!
			val waterLevel = tuple[2].toInt8()!!
			val growthLevel = tuple[3].toInt8()!!
			val optional = tuple[4].toUInt16()!!
			return lawnItem(type, hardPoint, waterLevel, growthLevel, optional)
		}

		override fun lawnItem.toFieldValue(): FieldValue =
			FieldValue.TupleValue(type.toFieldValue(), hardPoint.toFieldValue(), waterLevel.toFieldValue(), growthLevel.toFieldValue(), optional.toFieldValue())
	}
}








data class CatchGeneration(val generation: UInt, val timestamp: UInt, val numPlayers: Byte, ) {
	companion object: ToFieldValue<CatchGeneration> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int8, )

		override fun fromFieldValue(value: FieldValue): CatchGeneration {
			val tuple = value.toTuple()!!
			val generation = tuple[0].toUInt32()!!
			val timestamp = tuple[1].toUInt32()!!
			val numPlayers = tuple[2].toInt8()!!
			return CatchGeneration(generation, timestamp, numPlayers)
		}

		override fun CatchGeneration.toFieldValue(): FieldValue =
			FieldValue.TupleValue(generation.toFieldValue(), timestamp.toFieldValue(), numPlayers.toFieldValue())
	}
}

























data class weeklyCalendarHoliday(val holidayId: UByte, val dayOfTheWeek: UByte, ) {
	companion object: ToFieldValue<weeklyCalendarHoliday> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): weeklyCalendarHoliday {
			val tuple = value.toTuple()!!
			val holidayId = tuple[0].toUInt8()!!
			val dayOfTheWeek = tuple[1].toUInt8()!!
			return weeklyCalendarHoliday(holidayId, dayOfTheWeek)
		}

		override fun weeklyCalendarHoliday.toFieldValue(): FieldValue =
			FieldValue.TupleValue(holidayId.toFieldValue(), dayOfTheWeek.toFieldValue())
	}
}

data class yearlyCalendarHoliday(val holidayId: UByte, val firstStartTime: List<UByte>, val lastEndTime: List<UByte>, ) {
	companion object: ToFieldValue<yearlyCalendarHoliday> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )

		override fun fromFieldValue(value: FieldValue): yearlyCalendarHoliday {
			val tuple = value.toTuple()!!
			val holidayId = tuple[0].toUInt8()!!
			val firstStartTime = tuple[1].toList()!!.map { it.toUInt8()!! }
			val lastEndTime = tuple[2].toList()!!.map { it.toUInt8()!! }
			return yearlyCalendarHoliday(holidayId, firstStartTime, lastEndTime)
		}

		override fun yearlyCalendarHoliday.toFieldValue(): FieldValue =
			FieldValue.TupleValue(holidayId.toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt8, firstStartTime.map { it.toFieldValue() }).toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt8, lastEndTime.map { it.toFieldValue() }).toFieldValue())
	}
}

data class oncelyCalendarHoliday(val holidayId: UByte, val firstStartTime: List<UShort>, val lastEndTime: List<UShort>, ) {
	companion object: ToFieldValue<oncelyCalendarHoliday> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), )

		override fun fromFieldValue(value: FieldValue): oncelyCalendarHoliday {
			val tuple = value.toTuple()!!
			val holidayId = tuple[0].toUInt8()!!
			val firstStartTime = tuple[1].toList()!!.map { it.toUInt16()!! }
			val lastEndTime = tuple[2].toList()!!.map { it.toUInt16()!! }
			return oncelyCalendarHoliday(holidayId, firstStartTime, lastEndTime)
		}

		override fun oncelyCalendarHoliday.toFieldValue(): FieldValue =
			FieldValue.TupleValue(holidayId.toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt16, firstStartTime.map { it.toFieldValue() }).toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt16, lastEndTime.map { it.toFieldValue() }).toFieldValue())
	}
}

data class relativelyCalendarHoliday(val holidayId: UByte, val firstStartTime: List<UShort>, val lastEndTime: List<UShort>, ) {
	companion object: ToFieldValue<relativelyCalendarHoliday> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), )

		override fun fromFieldValue(value: FieldValue): relativelyCalendarHoliday {
			val tuple = value.toTuple()!!
			val holidayId = tuple[0].toUInt8()!!
			val firstStartTime = tuple[1].toList()!!.map { it.toUInt16()!! }
			val lastEndTime = tuple[2].toList()!!.map { it.toUInt16()!! }
			return relativelyCalendarHoliday(holidayId, firstStartTime, lastEndTime)
		}

		override fun relativelyCalendarHoliday.toFieldValue(): FieldValue =
			FieldValue.TupleValue(holidayId.toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt16, firstStartTime.map { it.toFieldValue() }).toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt16, lastEndTime.map { it.toFieldValue() }).toFieldValue())
	}
}

data class startAndEndTime(val startTime: List<UShort>, val endTime: List<UShort>, ) {
	companion object: ToFieldValue<startAndEndTime> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), )

		override fun fromFieldValue(value: FieldValue): startAndEndTime {
			val tuple = value.toTuple()!!
			val startTime = tuple[0].toList()!!.map { it.toUInt16()!! }
			val endTime = tuple[1].toList()!!.map { it.toUInt16()!! }
			return startAndEndTime(startTime, endTime)
		}

		override fun startAndEndTime.toFieldValue(): FieldValue =
			FieldValue.TupleValue(FieldValue.ArrayValue(FieldValue.Type.UInt16, startTime.map { it.toFieldValue() }).toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt16, endTime.map { it.toFieldValue() }).toFieldValue())
	}
}

data class multipleStartHoliday(val holidayId: UByte, val times: List<startAndEndTime>, ) {
	companion object: ToFieldValue<multipleStartHoliday> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), )), )

		override fun fromFieldValue(value: FieldValue): multipleStartHoliday {
			val tuple = value.toTuple()!!
			val holidayId = tuple[0].toUInt8()!!
			val times = with(startAndEndTime) { tuple[1].toList()!!.map { fromFieldValue(it) }}
			return multipleStartHoliday(holidayId, times)
		}

		override fun multipleStartHoliday.toFieldValue(): FieldValue =
			FieldValue.TupleValue(holidayId.toFieldValue(), with(startAndEndTime) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), ), times.map { it.toFieldValue() }).toFieldValue()})
	}
}



























data class savedBy(val avId: UInt, val name: String, val dna: ByteArray, ) {
	companion object: ToFieldValue<savedBy> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Blob, )

		override fun fromFieldValue(value: FieldValue): savedBy {
			val tuple = value.toTuple()!!
			val avId = tuple[0].toUInt32()!!
			val name = tuple[1].toStringValue()!!
			val dna = tuple[2].toBlob()!!
			return savedBy(avId, name, dna)
		}

		override fun savedBy.toFieldValue(): FieldValue =
			FieldValue.TupleValue(avId.toFieldValue(), name.toFieldValue(), dna.toFieldValue())
	}
}




































































































data class golfGreenGameBoardData(val posX: UByte, val posZ: UByte, val typeIndex: UByte, ) {
	companion object: ToFieldValue<golfGreenGameBoardData> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): golfGreenGameBoardData {
			val tuple = value.toTuple()!!
			val posX = tuple[0].toUInt8()!!
			val posZ = tuple[1].toUInt8()!!
			val typeIndex = tuple[2].toUInt8()!!
			return golfGreenGameBoardData(posX, posZ, typeIndex)
		}

		override fun golfGreenGameBoardData.toFieldValue(): FieldValue =
			FieldValue.TupleValue(posX.toFieldValue(), posZ.toFieldValue(), typeIndex.toFieldValue())
	}
}

data class golfGreenGameScoreData(val avId: UInt, val score: UByte, ) {
	companion object: ToFieldValue<golfGreenGameScoreData> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): golfGreenGameScoreData {
			val tuple = value.toTuple()!!
			val avId = tuple[0].toUInt32()!!
			val score = tuple[1].toUInt8()!!
			return golfGreenGameScoreData(avId, score)
		}

		override fun golfGreenGameScoreData.toFieldValue(): FieldValue =
			FieldValue.TupleValue(avId.toFieldValue(), score.toFieldValue())
	}
}




data class PetTrait(val inner: Double) {
	companion object: ToFieldValue<PetTrait> {
		override fun fromFieldValue(value: FieldValue): PetTrait {
			val inner = value.toUInt16()!!.transform {
				divide(10000.0f)
			}
			return PetTrait(inner)
		}

		override val type: FieldValue.Type = FieldValue.Type.UInt16

		override fun PetTrait.toFieldValue(): FieldValue = inner.unTransform(FieldValue.Type.UInt16) {
			divide(10000.0f)
		}.toFieldValue()
	}
}












data class avatarAndKart(val avId: UInt, val kartId: UInt, ) {
	companion object: ToFieldValue<avatarAndKart> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )

		override fun fromFieldValue(value: FieldValue): avatarAndKart {
			val tuple = value.toTuple()!!
			val avId = tuple[0].toUInt32()!!
			val kartId = tuple[1].toUInt32()!!
			return avatarAndKart(avId, kartId)
		}

		override fun avatarAndKart.toFieldValue(): FieldValue =
			FieldValue.TupleValue(avId.toFieldValue(), kartId.toFieldValue())
	}
}




























data class golfData(val frame: Short, val x: Double, val y: Double, val z: Double, ) {
	companion object: ToFieldValue<golfData> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )

		override fun fromFieldValue(value: FieldValue): golfData {
			val tuple = value.toTuple()!!
			val frame = tuple[0].toInt16()!!
			val x = tuple[1].toInt32()!!.transform {
				divide(100000.0f)
			}
			val y = tuple[2].toInt32()!!.transform {
				divide(100000.0f)
			}
			val z = tuple[3].toInt32()!!.transform {
				divide(100000.0f)
			}
			return golfData(frame, x, y, z)
		}

		override fun golfData.toFieldValue(): FieldValue =
			FieldValue.TupleValue(frame.toFieldValue(), x.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), y.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), z.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue())
	}
}

data class Coord3(val x: Double, val y: Double, val z: Double, ) {
	companion object: ToFieldValue<Coord3> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )

		override fun fromFieldValue(value: FieldValue): Coord3 {
			val tuple = value.toTuple()!!
			val x = tuple[0].toInt32()!!.transform {
				divide(100000.0f)
			}
			val y = tuple[1].toInt32()!!.transform {
				divide(100000.0f)
			}
			val z = tuple[2].toInt32()!!.transform {
				divide(100000.0f)
			}
			return Coord3(x, y, z)
		}

		override fun Coord3.toFieldValue(): FieldValue =
			FieldValue.TupleValue(x.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), y.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), z.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue())
	}
}

data class CommonObjectData(val id: UByte, val type: UByte, val x: Double, val y: Double, val z: Double, val q1: Double, val q2: Double, val q3: Double, val q4: Double, val aVX: Double, val aVY: Double, val aVZ: Double, val lVX: Double, val lVY: Double, val lVZ: Double, ) {
	companion object: ToFieldValue<CommonObjectData> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )

		override fun fromFieldValue(value: FieldValue): CommonObjectData {
			val tuple = value.toTuple()!!
			val id = tuple[0].toUInt8()!!
			val type = tuple[1].toUInt8()!!
			val x = tuple[2].toInt32()!!.transform {
				divide(100000.0f)
			}
			val y = tuple[3].toInt32()!!.transform {
				divide(100000.0f)
			}
			val z = tuple[4].toInt32()!!.transform {
				divide(100000.0f)
			}
			val q1 = tuple[5].toInt32()!!.transform {
				divide(100000.0f)
			}
			val q2 = tuple[6].toInt32()!!.transform {
				divide(100000.0f)
			}
			val q3 = tuple[7].toInt32()!!.transform {
				divide(100000.0f)
			}
			val q4 = tuple[8].toInt32()!!.transform {
				divide(100000.0f)
			}
			val aVX = tuple[9].toInt32()!!.transform {
				divide(100000.0f)
			}
			val aVY = tuple[10].toInt32()!!.transform {
				divide(100000.0f)
			}
			val aVZ = tuple[11].toInt32()!!.transform {
				divide(100000.0f)
			}
			val lVX = tuple[12].toInt32()!!.transform {
				divide(100000.0f)
			}
			val lVY = tuple[13].toInt32()!!.transform {
				divide(100000.0f)
			}
			val lVZ = tuple[14].toInt32()!!.transform {
				divide(100000.0f)
			}
			return CommonObjectData(id, type, x, y, z, q1, q2, q3, q4, aVX, aVY, aVZ, lVX, lVY, lVZ)
		}

		override fun CommonObjectData.toFieldValue(): FieldValue =
			FieldValue.TupleValue(id.toFieldValue(), type.toFieldValue(), x.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), y.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), z.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), q1.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), q2.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), q3.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), q4.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), aVX.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), aVY.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), aVZ.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), lVX.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), lVY.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue(), lVZ.unTransform(FieldValue.Type.Int32) {
			divide(100000.0f)
		}.toFieldValue())
	}
}
























data class TireInput(val force: Double, val heading: Double, ) {
	companion object: ToFieldValue<TireInput> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, )

		override fun fromFieldValue(value: FieldValue): TireInput {
			val tuple = value.toTuple()!!
			val force = tuple[0].toInt32()!!.transform {
				divide(100.0f)
			}
			val heading = tuple[1].toInt32()!!.transform {
				divide(100.0f)
			}
			return TireInput(force, heading)
		}

		override fun TireInput.toFieldValue(): FieldValue =
			FieldValue.TupleValue(force.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), heading.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue())
	}
}



data class twoDTreasureInfo(val treasureIndex: UByte, val treasureValue: UByte, ) {
	companion object: ToFieldValue<twoDTreasureInfo> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )

		override fun fromFieldValue(value: FieldValue): twoDTreasureInfo {
			val tuple = value.toTuple()!!
			val treasureIndex = tuple[0].toUInt8()!!
			val treasureValue = tuple[1].toUInt8()!!
			return twoDTreasureInfo(treasureIndex, treasureValue)
		}

		override fun twoDTreasureInfo.toFieldValue(): FieldValue =
			FieldValue.TupleValue(treasureIndex.toFieldValue(), treasureValue.toFieldValue())
	}
}

data class twoDSectionInfo(val sectionIndex: UByte, val enemyIndicesSelected: List<UByte>, val treasureIndicesSelected: List<twoDTreasureInfo>, val spawnPointIndicesSelected: List<UByte>, val stomperIndicesSelected: List<UByte>, ) {
	companion object: ToFieldValue<twoDSectionInfo> {
		override val type: FieldValue.Type = FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )

		override fun fromFieldValue(value: FieldValue): twoDSectionInfo {
			val tuple = value.toTuple()!!
			val sectionIndex = tuple[0].toUInt8()!!
			val enemyIndicesSelected = tuple[1].toList()!!.map { it.toUInt8()!! }
			val treasureIndicesSelected = with(twoDTreasureInfo) { tuple[2].toList()!!.map { fromFieldValue(it) }}
			val spawnPointIndicesSelected = tuple[3].toList()!!.map { it.toUInt8()!! }
			val stomperIndicesSelected = tuple[4].toList()!!.map { it.toUInt8()!! }
			return twoDSectionInfo(sectionIndex, enemyIndicesSelected, treasureIndicesSelected, spawnPointIndicesSelected, stomperIndicesSelected)
		}

		override fun twoDSectionInfo.toFieldValue(): FieldValue =
			FieldValue.TupleValue(sectionIndex.toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt8, enemyIndicesSelected.map { it.toFieldValue() }).toFieldValue(), with(twoDTreasureInfo) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), treasureIndicesSelected.map { it.toFieldValue() }).toFieldValue()}, FieldValue.ArrayValue(FieldValue.Type.UInt8, spawnPointIndicesSelected.map { it.toFieldValue() }).toFieldValue(), FieldValue.ArrayValue(FieldValue.Type.UInt8, stomperIndicesSelected.map { it.toFieldValue() }).toFieldValue())
	}
}























open class Account(doId: DOId): DistributedObjectBase(doId, 1U.toDClassId()) {
	companion object {
		val dClassId = 1U.toDClassId()

		object Fields {
			val DcObjectType: FieldId = 2U.toFieldId()
			val ACCOUNT_AV_SET: FieldId = 3U.toFieldId()
			val pirateAvatars: FieldId = 4U.toFieldId()
			val HOUSE_ID_SET: FieldId = 5U.toFieldId()
			val ESTATE_ID: FieldId = 6U.toFieldId()
			val ACCOUNT_AV_SET_DEL: FieldId = 7U.toFieldId()
			val PLAYED_MINUTES: FieldId = 8U.toFieldId()
			val PLAYED_MINUTES_PERIOD: FieldId = 9U.toFieldId()
			val CREATED: FieldId = 10U.toFieldId()
			val LAST_LOGIN: FieldId = 11U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetDcObjectType(it.toStringValue()!!, sender)
			}
		),
		3U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetACCOUNT_AV_SET(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		4U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetPirateAvatars(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		5U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetHOUSE_ID_SET(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		6U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetESTATE_ID(it.toUInt32()!!, sender)
			}
		),
		7U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )),
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetACCOUNT_AV_SET_DEL(with(AvatarPendingDel) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		8U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetPLAYED_MINUTES(it.toStringValue()!!, sender)
			}
		),
		9U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetPLAYED_MINUTES_PERIOD(it.toStringValue()!!, sender)
			}
		),
		10U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetCREATED(it.toStringValue()!!, sender)
			}
		),
		11U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetLAST_LOGIN(it.toStringValue()!!, sender)
			}
		),
	)

	var DcObjectType: String
		get() = getField(2U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	var ACCOUNT_AV_SET: List<UInt>
		get() = getField(3U.toFieldId())!!.toList()!!.map { it.toUInt32()!! }
		set(value) { FieldValue.ArrayValue(FieldValue.Type.UInt32, value.map { it.toFieldValue() }).toFieldValue()}

	var pirateAvatars: List<UInt>
		get() = getField(4U.toFieldId())!!.toList()!!.map { it.toUInt32()!! }
		set(value) { FieldValue.ArrayValue(FieldValue.Type.UInt32, value.map { it.toFieldValue() }).toFieldValue()}

	var HOUSE_ID_SET: List<UInt>
		get() = getField(5U.toFieldId())!!.toList()!!.map { it.toUInt32()!! }
		set(value) { FieldValue.ArrayValue(FieldValue.Type.UInt32, value.map { it.toFieldValue() }).toFieldValue()}

	var ESTATE_ID: UInt
		get() = getField(6U.toFieldId())!!.toUInt32()!!
		set(value) { value.toFieldValue()}

	var ACCOUNT_AV_SET_DEL: List<AvatarPendingDel>
		get() = with(AvatarPendingDel) { getField(7U.toFieldId())!!.toList()!!.map { fromFieldValue(it) }}
		set(value) { with(AvatarPendingDel) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ), value.map { it.toFieldValue() }).toFieldValue()}}

	var PLAYED_MINUTES: String
		get() = getField(8U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	var PLAYED_MINUTES_PERIOD: String
		get() = getField(9U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	var CREATED: String
		get() = getField(10U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	var LAST_LOGIN: String
		get() = getField(11U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	open fun onSetDcObjectType(DcObjectType: String, sender: ChannelId? = null) {}
	open fun onSetACCOUNT_AV_SET(ACCOUNT_AV_SET: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetPirateAvatars(pirateAvatars: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetHOUSE_ID_SET(HOUSE_ID_SET: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetESTATE_ID(ESTATE_ID: UInt, sender: ChannelId? = null) {}
	open fun onSetACCOUNT_AV_SET_DEL(ACCOUNT_AV_SET_DEL: List<AvatarPendingDel>, sender: ChannelId? = null) {}
	open fun onSetPLAYED_MINUTES(PLAYED_MINUTES: String, sender: ChannelId? = null) {}
	open fun onSetPLAYED_MINUTES_PERIOD(PLAYED_MINUTES_PERIOD: String, sender: ChannelId? = null) {}
	open fun onSetCREATED(CREATED: String, sender: ChannelId? = null) {}
	open fun onSetLAST_LOGIN(LAST_LOGIN: String, sender: ChannelId? = null) {}
}

open class AstronAccount(doId: DOId): DistributedObjectBase(doId, 2U.toDClassId()) {
	companion object {
		val dClassId = 2U.toDClassId()

		object Fields {
			val ACCOUNT_AV_SET: FieldId = 12U.toFieldId()
			val ESTATE_ID: FieldId = 13U.toFieldId()
			val ACCOUNT_AV_SET_DEL: FieldId = 14U.toFieldId()
			val CREATED: FieldId = 15U.toFieldId()
			val LAST_LOGIN: FieldId = 16U.toFieldId()
			val ACCOUNT_ID: FieldId = 17U.toFieldId()
			val ACCESS_LEVEL: FieldId = 18U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		12U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetACCOUNT_AV_SET(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		13U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetESTATE_ID(it.toUInt32()!!, sender)
			}
		),
		14U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )),
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetACCOUNT_AV_SET_DEL(with(AvatarPendingDel) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		15U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetCREATED(it.toStringValue()!!, sender)
			}
		),
		16U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetLAST_LOGIN(it.toStringValue()!!, sender)
			}
		),
		17U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetACCOUNT_ID(it.toStringValue()!!, sender)
			}
		),
		18U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetACCESS_LEVEL(it.toStringValue()!!, sender)
			}
		),
	)

	var ACCOUNT_AV_SET: List<UInt>
		get() = getField(12U.toFieldId())!!.toList()!!.map { it.toUInt32()!! }
		set(value) { FieldValue.ArrayValue(FieldValue.Type.UInt32, value.map { it.toFieldValue() }).toFieldValue()}

	var ESTATE_ID: UInt
		get() = getField(13U.toFieldId())!!.toUInt32()!!
		set(value) { value.toFieldValue()}

	var ACCOUNT_AV_SET_DEL: List<AvatarPendingDel>
		get() = with(AvatarPendingDel) { getField(14U.toFieldId())!!.toList()!!.map { fromFieldValue(it) }}
		set(value) { with(AvatarPendingDel) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ), value.map { it.toFieldValue() }).toFieldValue()}}

	var CREATED: String
		get() = getField(15U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	var LAST_LOGIN: String
		get() = getField(16U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	var ACCOUNT_ID: String
		get() = getField(17U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	var ACCESS_LEVEL: String
		get() = getField(18U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	open fun onSetACCOUNT_AV_SET(ACCOUNT_AV_SET: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetESTATE_ID(ESTATE_ID: UInt, sender: ChannelId? = null) {}
	open fun onSetACCOUNT_AV_SET_DEL(ACCOUNT_AV_SET_DEL: List<AvatarPendingDel>, sender: ChannelId? = null) {}
	open fun onSetCREATED(CREATED: String, sender: ChannelId? = null) {}
	open fun onSetLAST_LOGIN(LAST_LOGIN: String, sender: ChannelId? = null) {}
	open fun onSetACCOUNT_ID(ACCOUNT_ID: String, sender: ChannelId? = null) {}
	open fun onSetACCESS_LEVEL(ACCESS_LEVEL: String, sender: ChannelId? = null) {}
}

open class DistributedObject(doId: DOId): DistributedObjectBase(doId, 4U.toDClassId()) {
	companion object {
		val dClassId = 4U.toDClassId()

		object Fields {
			val setBarrierData: FieldId = 22U.toFieldId()
			val setBarrierReady: FieldId = 23U.toFieldId()
			val execCommand: FieldId = 24U.toFieldId()
			val broadcastMessage: FieldId = 25U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		22U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBarrierData(with(BarrierData) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		23U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetBarrierReady(it.toUInt16()!!, sender)
			}
		),
		24U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				onExecCommand(t0, t1, t2, t3, sender)
				}
			}
		),
		25U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onBroadcastMessage(sender)
			}
		),
	)

	fun setBarrierData(arg0: List<BarrierData>, ) {
		setField(22U.toFieldId(), with(BarrierData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setBarrierReady(arg0: UShort, ) {
		setField(23U.toFieldId(), arg0.toFieldValue())
	}

	fun execCommand(arg0: String, arg1: UInt, arg2: UInt, arg3: UInt, ) {
		setField(24U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun broadcastMessage() {
		setField(25U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetBarrierData(arg0: List<BarrierData>, sender: ChannelId? = null) {}
	open fun onSetBarrierReady(arg0: UShort, sender: ChannelId? = null) {}
	open fun onExecCommand(arg0: String, arg1: UInt, arg2: UInt, arg3: UInt, sender: ChannelId? = null) {}
	open fun onBroadcastMessage(sender: ChannelId? = null) {}
}

open class DistributedTestObject(doId: DOId): DistributedObjectBase(doId, 5U.toDClassId()) {
	companion object {
		val dClassId = 5U.toDClassId()

		object Fields {
			val AutoInterest: FieldId = 26U.toFieldId()
			val setParentingRules: FieldId = 27U.toFieldId()
			val setRequiredField: FieldId = 28U.toFieldId()
			val setB: FieldId = 29U.toFieldId()
			val setBA: FieldId = 30U.toFieldId()
			val setBO: FieldId = 31U.toFieldId()
			val setBR: FieldId = 32U.toFieldId()
			val setBRA: FieldId = 33U.toFieldId()
			val setBRO: FieldId = 34U.toFieldId()
			val setBROA: FieldId = 35U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		26U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetAutoInterest(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		27U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				onSetParentingRules(t0, t1, sender)
				}
			}
		),
		28U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRequiredField(it.toUInt32()!!, sender)
			}
		),
		29U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetB(it.toUInt32()!!, sender)
			}
		),
		30U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBA(it.toUInt32()!!, sender)
			}
		),
		31U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetBO(it.toUInt32()!!, sender)
			}
		),
		32U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBR(it.toUInt32()!!, sender)
			}
		),
		33U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBRA(it.toUInt32()!!, sender)
			}
		),
		34U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetBRO(it.toUInt32()!!, sender)
			}
		),
		35U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetBROA(it.toUInt32()!!, sender)
			}
		),
	)

	var AutoInterest: List<UInt>
		get() = getField(26U.toFieldId())!!.toList()!!.map { it.toUInt32()!! }
		set(value) { FieldValue.ArrayValue(FieldValue.Type.UInt32, value.map { it.toFieldValue() }).toFieldValue()}

	fun setParentingRules(arg0: String, arg1: String, ) {
		setField(27U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setRequiredField(arg0: UInt, ) {
		setField(28U.toFieldId(), arg0.toFieldValue())
	}

	fun setB(arg0: UInt, ) {
		setField(29U.toFieldId(), arg0.toFieldValue())
	}

	fun setBA(arg0: UInt, ) {
		setField(30U.toFieldId(), arg0.toFieldValue())
	}

	fun setBO(arg0: UInt, ) {
		setField(31U.toFieldId(), arg0.toFieldValue())
	}

	fun setBR(arg0: UInt, ) {
		setField(32U.toFieldId(), arg0.toFieldValue())
	}

	fun setBRA(arg0: UInt, ) {
		setField(33U.toFieldId(), arg0.toFieldValue())
	}

	fun setBRO(arg0: UInt, ) {
		setField(34U.toFieldId(), arg0.toFieldValue())
	}

	fun setBROA(arg0: UInt, ) {
		setField(35U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetAutoInterest(AutoInterest: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetParentingRules(arg0: String, arg1: String, sender: ChannelId? = null) {}
	open fun onSetRequiredField(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetB(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBA(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBO(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBR(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBRA(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBRO(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBROA(arg0: UInt, sender: ChannelId? = null) {}
}

open class TimeManager(doId: DOId): DistributedObjectBase(doId, 8U.toDClassId()) {
	companion object {
		val dClassId = 8U.toDClassId()

		object Fields {
			val requestServerTime: FieldId = 42U.toFieldId()
			val serverTime: FieldId = 43U.toFieldId()
			val setDisconnectReason: FieldId = 44U.toFieldId()
			val setExceptionInfo: FieldId = 45U.toFieldId()
			val setSignature: FieldId = 46U.toFieldId()
			val setFrameRate: FieldId = 47U.toFieldId()
			val setCpuInfo: FieldId = 48U.toFieldId()
			val checkForGarbageLeaks: FieldId = 49U.toFieldId()
			val setNumAIGarbageLeaks: FieldId = 50U.toFieldId()
			val setClientGarbageLeak: FieldId = 51U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		42U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestServerTime(it.toUInt8()!!, sender)
			}
		),
		43U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toUInt32()!!
				onServerTime(t0, t1, t2, sender)
				}
			}
		),
		44U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetDisconnectReason(it.toUInt8()!!, sender)
			}
		),
		45U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetExceptionInfo(it.toStringValue()!!, sender)
			}
		),
		46U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Blob, FieldValue.Type.Blob, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toBlob()!!
				val t2 = values[2].toBlob()!!
				onSetSignature(t0, t1, t2, sender)
				}
			}
		),
		47U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ), FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, ), FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toUInt16()!!
				val t3 = values[3].toStringValue()!!
				val t4 = values[4].toUInt32()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toUInt32()!!.transform {
						divide(10.0f)
					}
				val t6 = values[6].toStringValue()!!
				val t7 = values[7].toUInt16()!!
				val t8 = values[8].toUInt16()!!
				val t9 = values[9].toUInt32()!!.transform {
						divide(10.0f)
					}
				val t10 = values[10].toUInt32()!!.transform {
						divide(10.0f)
					}
				val t11 = values[11].toUInt32()!!.transform {
						divide(10.0f)
					}
				val t12 = values[12].toUInt32()!!
				val t13 = with(OSInfo) { fromFieldValue(it)}
				val t14 = with(CPUSpeed) { fromFieldValue(it)}
				val t15 = values[15].toUInt16()!!
				val t16 = values[16].toUInt16()!!
				val t17 = values[17].toStringValue()!!
				onSetFrameRate(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, sender)
				}
			}
		),
		48U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				onSetCpuInfo(t0, t1, sender)
				}
			}
		),
		49U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onCheckForGarbageLeaks(with(bool) { fromFieldValue(it)}, sender)
			}
		),
		50U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetNumAIGarbageLeaks(it.toUInt32()!!, sender)
			}
		),
		51U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onSetClientGarbageLeak(t0, t1, sender)
				}
			}
		),
	)

	fun requestServerTime(arg0: UByte, ) {
		setField(42U.toFieldId(), arg0.toFieldValue())
	}

	fun serverTime(arg0: UByte, arg1: Int, arg2: UInt, ) {
		setField(43U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setDisconnectReason(arg0: UByte, ) {
		setField(44U.toFieldId(), arg0.toFieldValue())
	}

	fun setExceptionInfo(arg0: String, ) {
		setField(45U.toFieldId(), arg0.toFieldValue())
	}

	fun setSignature(arg0: String, arg1: ByteArray, arg2: ByteArray, ) {
		setField(46U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setFrameRate(arg0: Double, arg1: Double, arg2: UShort, arg3: String, arg4: Double, arg5: Double, arg6: String, arg7: UShort, arg8: UShort, arg9: Double, arg10: Double, arg11: Double, arg12: UInt, arg13: OSInfo, arg14: CPUSpeed, arg15: UShort, arg16: UShort, arg17: String, ) {
		setField(47U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.UInt16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.UInt32) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.UInt32) {
			divide(10.0f)
		}.toFieldValue(), 
			arg6.toFieldValue(), 
			arg7.toFieldValue(), 
			arg8.toFieldValue(), 
			arg9.unTransform(FieldValue.Type.UInt32) {
			divide(10.0f)
		}.toFieldValue(), 
			arg10.unTransform(FieldValue.Type.UInt32) {
			divide(10.0f)
		}.toFieldValue(), 
			arg11.unTransform(FieldValue.Type.UInt32) {
			divide(10.0f)
		}.toFieldValue(), 
			arg12.toFieldValue(), 
			with(OSInfo) { arg13.toFieldValue()}, 
			with(CPUSpeed) { arg14.toFieldValue()}, 
			arg15.toFieldValue(), 
			arg16.toFieldValue(), 
			arg17.toFieldValue(), 
				))
	}

	fun setCpuInfo(arg0: String, arg1: String, ) {
		setField(48U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun checkForGarbageLeaks(arg0: bool, ) {
		setField(49U.toFieldId(), with(bool) { arg0.toFieldValue()})
	}

	fun setNumAIGarbageLeaks(arg0: UInt, ) {
		setField(50U.toFieldId(), arg0.toFieldValue())
	}

	fun setClientGarbageLeak(arg0: UInt, arg1: String, ) {
		setField(51U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onRequestServerTime(arg0: UByte, sender: ChannelId? = null) {}
	open fun onServerTime(arg0: UByte, arg1: Int, arg2: UInt, sender: ChannelId? = null) {}
	open fun onSetDisconnectReason(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetExceptionInfo(arg0: String, sender: ChannelId? = null) {}
	open fun onSetSignature(arg0: String, arg1: ByteArray, arg2: ByteArray, sender: ChannelId? = null) {}
	open fun onSetFrameRate(arg0: Double, arg1: Double, arg2: UShort, arg3: String, arg4: Double, arg5: Double, arg6: String, arg7: UShort, arg8: UShort, arg9: Double, arg10: Double, arg11: Double, arg12: UInt, arg13: OSInfo, arg14: CPUSpeed, arg15: UShort, arg16: UShort, arg17: String, sender: ChannelId? = null) {}
	open fun onSetCpuInfo(arg0: String, arg1: String, sender: ChannelId? = null) {}
	open fun onCheckForGarbageLeaks(arg0: bool, sender: ChannelId? = null) {}
	open fun onSetNumAIGarbageLeaks(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetClientGarbageLeak(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
}

open class ObjectServer(doId: DOId): DistributedObjectBase(doId, 9U.toDClassId()) {
	companion object {
		val dClassId = 9U.toDClassId()

		object Fields {
			val setName: FieldId = 52U.toFieldId()
			val setDcHash: FieldId = 53U.toFieldId()
			val setDateCreated: FieldId = 54U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		52U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetName(it.toStringValue()!!, sender)
			}
		),
		53U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
				)
			),
			onChange = { it, sender ->
				onSetDcHash(it.toUInt32()!!, sender)
			}
		),
		54U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetDateCreated(it.toUInt32()!!, sender)
			}
		),
	)

	fun setName(arg0: String, ) {
		setField(52U.toFieldId(), arg0.toFieldValue())
	}

	fun setDcHash(arg0: UInt, ) {
		setField(53U.toFieldId(), arg0.toFieldValue())
	}

	fun setDateCreated(arg0: UInt, ) {
		setField(54U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetName(arg0: String, sender: ChannelId? = null) {}
	open fun onSetDcHash(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDateCreated(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedDirectory(doId: DOId): DistributedObjectBase(doId, 10U.toDClassId()) {
	companion object {
		val dClassId = 10U.toDClassId()

		object Fields {
			val setParentingRules: FieldId = 55U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		55U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				onSetParentingRules(t0, t1, sender)
				}
			}
		),
	)

	fun setParentingRules(arg0: String, arg1: String, ) {
		setField(55U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetParentingRules(arg0: String, arg1: String, sender: ChannelId? = null) {}
}

open class DistributedDistrict(doId: DOId): DistributedObjectBase(doId, 11U.toDClassId()) {
	companion object {
		val dClassId = 11U.toDClassId()

		object Fields {
			val setName: FieldId = 56U.toFieldId()
			val setAvailable: FieldId = 57U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		56U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetName(it.toStringValue()!!, sender)
			}
		),
		57U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAvailable(it.toUInt8()!!, sender)
			}
		),
	)

	fun setName(arg0: String, ) {
		setField(56U.toFieldId(), arg0.toFieldValue())
	}

	fun setAvailable(arg0: UByte, ) {
		setField(57U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetName(arg0: String, sender: ChannelId? = null) {}
	open fun onSetAvailable(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedNode(doId: DOId): DistributedObjectBase(doId, 12U.toDClassId()) {
	companion object {
		val dClassId = 12U.toDClassId()

		object Fields {
			val setParentStr: FieldId = 58U.toFieldId()
			val setParent: FieldId = 59U.toFieldId()
			val setX: FieldId = 60U.toFieldId()
			val setY: FieldId = 61U.toFieldId()
			val setZ: FieldId = 62U.toFieldId()
			val setH: FieldId = 63U.toFieldId()
			val setP: FieldId = 64U.toFieldId()
			val setR: FieldId = 65U.toFieldId()
			val setPos: FieldId = 66U.toFieldId()
			val setHpr: FieldId = 67U.toFieldId()
			val setPosHpr: FieldId = 68U.toFieldId()
			val setXY: FieldId = 69U.toFieldId()
			val setXZ: FieldId = 70U.toFieldId()
			val setXYH: FieldId = 71U.toFieldId()
			val setXYZH: FieldId = 72U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		58U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetParentStr(it.toBlob()!!, sender)
			}
		),
		59U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetParent(it.toUInt32()!!, sender)
			}
		),
		60U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetX(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		61U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetY(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		62U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetZ(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		63U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetH(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		64U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetP(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		65U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetR(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		66U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPos(t0, t1, t2, sender)
				}
			}
		),
		67U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetHpr(t0, t1, t2, sender)
				}
			}
		),
		68U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		69U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetXY(t0, t1, sender)
				}
			}
		),
		70U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetXZ(t0, t1, sender)
				}
			}
		),
		71U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetXYH(t0, t1, t2, sender)
				}
			}
		),
		72U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetXYZH(t0, t1, t2, t3, sender)
				}
			}
		),
	)

	fun setParentStr(arg0: ByteArray, ) {
		setField(58U.toFieldId(), arg0.toFieldValue())
	}

	fun setParent(arg0: UInt, ) {
		setField(59U.toFieldId(), arg0.toFieldValue())
	}

	fun setX(arg0: Double, ) {
		setField(60U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setY(arg0: Double, ) {
		setField(61U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setZ(arg0: Double, ) {
		setField(62U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setH(arg0: Double, ) {
		setField(63U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setP(arg0: Double, ) {
		setField(64U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setR(arg0: Double, ) {
		setField(65U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setPos(arg0: Double, arg1: Double, arg2: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()

		setField(66U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setHpr(arg0: Double, arg1: Double, arg2: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(67U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg4Value = arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg5Value = arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(68U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, ))
	}

	fun setXY(arg0: Double, arg1: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()

		setField(69U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setXZ(arg0: Double, arg1: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()

		setField(70U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setXYH(arg0: Double, arg1: Double, arg2: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(71U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(72U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	open fun onSetParentStr(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetParent(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetX(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetY(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetZ(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetH(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetP(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetR(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetPos(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetHpr(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetXY(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetXZ(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetXYH(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, sender: ChannelId? = null) {}
}

open class DistributedSmoothNode(doId: DOId): DistributedObjectBase(doId, 13U.toDClassId()) {
	companion object {
		val dClassId = 13U.toDClassId()

		object Fields {
			val setComponentL: FieldId = 73U.toFieldId()
			val setComponentX: FieldId = 74U.toFieldId()
			val setComponentY: FieldId = 75U.toFieldId()
			val setComponentZ: FieldId = 76U.toFieldId()
			val setComponentH: FieldId = 77U.toFieldId()
			val setComponentP: FieldId = 78U.toFieldId()
			val setComponentR: FieldId = 79U.toFieldId()
			val setComponentT: FieldId = 80U.toFieldId()
			val setSmStop: FieldId = 81U.toFieldId()
			val setSmH: FieldId = 82U.toFieldId()
			val setSmZ: FieldId = 83U.toFieldId()
			val setSmXY: FieldId = 84U.toFieldId()
			val setSmXZ: FieldId = 85U.toFieldId()
			val setSmPos: FieldId = 86U.toFieldId()
			val setSmHpr: FieldId = 87U.toFieldId()
			val setSmXYH: FieldId = 88U.toFieldId()
			val setSmXYZH: FieldId = 89U.toFieldId()
			val setSmPosHpr: FieldId = 90U.toFieldId()
			val setSmPosHprL: FieldId = 91U.toFieldId()
			val clearSmoothing: FieldId = 92U.toFieldId()
			val suggestResync: FieldId = 93U.toFieldId()
			val returnResync: FieldId = 94U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		73U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt64,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentL(it.toUInt64()!!, sender)
			}
		),
		74U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentX(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		75U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentY(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		76U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentZ(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		77U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentH(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		78U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentP(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		79U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentR(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		80U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentT(it.toInt16()!!, sender)
			}
		),
		81U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetSmStop(it.toInt16()!!, sender)
			}
		),
		82U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t1 = values[1].toInt16()!!
				onSetSmH(t0, t1, sender)
				}
			}
		),
		83U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!
				onSetSmZ(t0, t1, sender)
				}
			}
		),
		84U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetSmXY(t0, t1, t2, sender)
				}
			}
		),
		85U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetSmXZ(t0, t1, t2, sender)
				}
			}
		),
		86U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!
				onSetSmPos(t0, t1, t2, t3, sender)
				}
			}
		),
		87U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t3 = values[3].toInt16()!!
				onSetSmHpr(t0, t1, t2, t3, sender)
				}
			}
		),
		88U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t3 = values[3].toInt16()!!
				onSetSmXYH(t0, t1, t2, t3, sender)
				}
			}
		),
		89U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t4 = values[4].toInt16()!!
				onSetSmXYZH(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		90U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t6 = values[6].toInt16()!!
				onSetSmPosHpr(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		91U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt64()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t6 = values[6].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t7 = values[7].toInt16()!!
				onSetSmPosHprL(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		92U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onClearSmoothing(it.toInt8()!!, sender)
			}
		),
		93U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toInt32()!!
				val t4 = values[4].toUInt16()!!
				val t5 = values[5].toUInt16()!!.transform {
						divide(100.0f)
					}
				onSuggestResync(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		94U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toInt32()!!
				val t3 = values[3].toUInt16()!!
				val t4 = values[4].toUInt16()!!.transform {
						divide(100.0f)
					}
				onReturnResync(t0, t1, t2, t3, t4, sender)
				}
			}
		),
	)

	fun setComponentL(arg0: ULong, ) {
		setField(73U.toFieldId(), arg0.toFieldValue())
	}

	fun setComponentX(arg0: Double, ) {
		setField(74U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setComponentY(arg0: Double, ) {
		setField(75U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setComponentZ(arg0: Double, ) {
		setField(76U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setComponentH(arg0: Double, ) {
		setField(77U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setComponentP(arg0: Double, ) {
		setField(78U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setComponentR(arg0: Double, ) {
		setField(79U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setComponentT(arg0: Short, ) {
		setField(80U.toFieldId(), arg0.toFieldValue())
	}

	fun setSmStop(arg0: Short, ) {
		val arg0Value = arg0.toFieldValue()

		setField(81U.toFieldId(), FieldValue.TupleValue(arg0Value, ))
	}

	fun setSmH(arg0: Double, arg1: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg1Value = arg1.toFieldValue()

		setField(82U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setSmZ(arg0: Double, arg1: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.toFieldValue()

		setField(83U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setSmXY(arg0: Double, arg1: Double, arg2: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.toFieldValue()

		setField(84U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setSmXZ(arg0: Double, arg1: Double, arg2: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.toFieldValue()

		setField(85U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setSmPos(arg0: Double, arg1: Double, arg2: Double, arg3: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.toFieldValue()

		setField(86U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	fun setSmHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg3Value = arg3.toFieldValue()

		setField(87U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	fun setSmXYH(arg0: Double, arg1: Double, arg2: Double, arg3: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg3Value = arg3.toFieldValue()

		setField(88U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	fun setSmXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg4Value = arg4.toFieldValue()

		setField(89U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, ))
	}

	fun setSmPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg4Value = arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg5Value = arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg6Value = arg6.toFieldValue()

		setField(90U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, arg6Value, ))
	}

	fun setSmPosHprL(arg0: ULong, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Short, ) {
		val arg0Value = arg0.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg4Value = arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg5Value = arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg6Value = arg6.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg7Value = arg7.toFieldValue()

		setField(91U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, arg6Value, arg7Value, ))
	}

	fun clearSmoothing(arg0: Byte, ) {
		setField(92U.toFieldId(), arg0.toFieldValue())
	}

	fun suggestResync(arg0: UInt, arg1: Short, arg2: Short, arg3: Int, arg4: UShort, arg5: Double, ) {
		setField(93U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun returnResync(arg0: UInt, arg1: Short, arg2: Int, arg3: UShort, arg4: Double, ) {
		setField(94U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	open fun onSetComponentL(arg0: ULong, sender: ChannelId? = null) {}
	open fun onSetComponentX(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentY(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentZ(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentH(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentP(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentR(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentT(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetSmStop(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetSmH(arg0: Double, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetSmZ(arg0: Double, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetSmXY(arg0: Double, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetSmXZ(arg0: Double, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetSmPos(arg0: Double, arg1: Double, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onSetSmHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onSetSmXYH(arg0: Double, arg1: Double, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onSetSmXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Short, sender: ChannelId? = null) {}
	open fun onSetSmPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Short, sender: ChannelId? = null) {}
	open fun onSetSmPosHprL(arg0: ULong, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Short, sender: ChannelId? = null) {}
	open fun onClearSmoothing(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSuggestResync(arg0: UInt, arg1: Short, arg2: Short, arg3: Int, arg4: UShort, arg5: Double, sender: ChannelId? = null) {}
	open fun onReturnResync(arg0: UInt, arg1: Short, arg2: Int, arg3: UShort, arg4: Double, sender: ChannelId? = null) {}
}

open class DistributedCartesianGrid(doId: DOId): DistributedObjectBase(doId, 14U.toDClassId()) {
	companion object {
		val dClassId = 14U.toDClassId()

		object Fields {
			val setCellWidth: FieldId = 95U.toFieldId()
			val setParentingRules: FieldId = 96U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		95U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCellWidth(it.toUInt32()!!, sender)
			}
		),
		96U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				onSetParentingRules(t0, t1, sender)
				}
			}
		),
	)

	fun setCellWidth(arg0: UInt, ) {
		setField(95U.toFieldId(), arg0.toFieldValue())
	}

	fun setParentingRules(arg0: String, arg1: String, ) {
		setField(96U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetCellWidth(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetParentingRules(arg0: String, arg1: String, sender: ChannelId? = null) {}
}

open class DistributedCamera(doId: DOId): DistributedObjectBase(doId, 16U.toDClassId()) {
	companion object {
		val dClassId = 16U.toDClassId()

		object Fields {
			val setCamParent: FieldId = 104U.toFieldId()
			val setFixtures: FieldId = 105U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		104U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetCamParent(it.toUInt32()!!, sender)
			}
		),
		105U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.String, )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetFixtures(with(Fixture) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
	)

	fun setCamParent(arg0: UInt, ) {
		setField(104U.toFieldId(), arg0.toFieldValue())
	}

	fun setFixtures(arg0: List<Fixture>, ) {
		setField(105U.toFieldId(), with(Fixture) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.String, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	open fun onSetCamParent(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetFixtures(arg0: List<Fixture>, sender: ChannelId? = null) {}
}

open class TalkPath_owner(doId: DOId): DistributedObjectBase(doId, 18U.toDClassId()) {
	companion object {
		val dClassId = 18U.toDClassId()

		object Fields {
			val setTalk: FieldId = 108U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		108U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, )), FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toStringValue()!!
				val t4 = with(TalkModification) { values[4].toList()!!.map { fromFieldValue(it) }}
				val t5 = values[5].toUInt8()!!
				onSetTalk(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
	)

	fun setTalk(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: List<TalkModification>, arg5: UByte, ) {
		setField(108U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			with(TalkModification) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, ), arg4.map { it.toFieldValue() }).toFieldValue()}, 
			arg5.toFieldValue(), 
				))
	}

	open fun onSetTalk(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: List<TalkModification>, arg5: UByte, sender: ChannelId? = null) {}
}

open class TalkPath_whisper(doId: DOId): DistributedObjectBase(doId, 19U.toDClassId()) {
	companion object {
		val dClassId = 19U.toDClassId()

		object Fields {
			val setTalkWhisper: FieldId = 109U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		109U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, )), FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toStringValue()!!
				val t4 = with(TalkModification) { values[4].toList()!!.map { fromFieldValue(it) }}
				val t5 = values[5].toUInt8()!!
				onSetTalkWhisper(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
	)

	fun setTalkWhisper(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: List<TalkModification>, arg5: UByte, ) {
		setField(109U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			with(TalkModification) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, ), arg4.map { it.toFieldValue() }).toFieldValue()}, 
			arg5.toFieldValue(), 
				))
	}

	open fun onSetTalkWhisper(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: List<TalkModification>, arg5: UByte, sender: ChannelId? = null) {}
}

open class TalkPath_group(doId: DOId): DistributedObjectBase(doId, 20U.toDClassId()) {
	companion object {
		val dClassId = 20U.toDClassId()

		object Fields {
			val setTalkGroup: FieldId = 110U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		110U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, )), FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toStringValue()!!
				val t4 = with(TalkModification) { values[4].toList()!!.map { fromFieldValue(it) }}
				val t5 = values[5].toUInt8()!!
				onSetTalkGroup(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
	)

	fun setTalkGroup(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: List<TalkModification>, arg5: UByte, ) {
		setField(110U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			with(TalkModification) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, ), arg4.map { it.toFieldValue() }).toFieldValue()}, 
			arg5.toFieldValue(), 
				))
	}

	open fun onSetTalkGroup(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: List<TalkModification>, arg5: UByte, sender: ChannelId? = null) {}
}

open class TalkPath_account(doId: DOId): DistributedObjectBase(doId, 21U.toDClassId()) {
	companion object {
		val dClassId = 21U.toDClassId()

		object Fields {
			val setTalkAccount: FieldId = 111U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		111U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, )), FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toStringValue()!!
				val t4 = with(TalkModification) { values[4].toList()!!.map { fromFieldValue(it) }}
				val t5 = values[5].toUInt8()!!
				onSetTalkAccount(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
	)

	fun setTalkAccount(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: List<TalkModification>, arg5: UByte, ) {
		setField(111U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			with(TalkModification) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, ), arg4.map { it.toFieldValue() }).toFieldValue()}, 
			arg5.toFieldValue(), 
				))
	}

	open fun onSetTalkAccount(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: List<TalkModification>, arg5: UByte, sender: ChannelId? = null) {}
}

open class AvatarHandle(doId: DOId): DistributedObjectBase(doId, 22U.toDClassId()) {
	companion object {
		val dClassId = 22U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedAvatar(doId: DOId): DistributedObjectBase(doId, 23U.toDClassId()) {
	companion object {
		val dClassId = 23U.toDClassId()

		object Fields {
			val DcObjectType: FieldId = 112U.toFieldId()
			val setName: FieldId = 113U.toFieldId()
			val friendsNotify: FieldId = 114U.toFieldId()
			val checkAvOnShard: FieldId = 115U.toFieldId()
			val confirmAvOnShard: FieldId = 116U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		112U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetDcObjectType(it.toStringValue()!!, sender)
			}
		),
		113U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetName(it.toStringValue()!!, sender)
			}
		),
		114U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toInt8()!!
				onFriendsNotify(t0, t1, sender)
				}
			}
		),
		115U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onCheckAvOnShard(it.toUInt32()!!, sender)
			}
		),
		116U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				onConfirmAvOnShard(t0, t1, sender)
				}
			}
		),
	)

	var DcObjectType: String
		get() = getField(112U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	fun setName(arg0: String, ) {
		setField(113U.toFieldId(), arg0.toFieldValue())
	}

	fun friendsNotify(arg0: Int, arg1: Byte, ) {
		setField(114U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun checkAvOnShard(arg0: UInt, ) {
		setField(115U.toFieldId(), arg0.toFieldValue())
	}

	fun confirmAvOnShard(arg0: UInt, arg1: Byte, ) {
		setField(116U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetDcObjectType(DcObjectType: String, sender: ChannelId? = null) {}
	open fun onSetName(arg0: String, sender: ChannelId? = null) {}
	open fun onFriendsNotify(arg0: Int, arg1: Byte, sender: ChannelId? = null) {}
	open fun onCheckAvOnShard(arg0: UInt, sender: ChannelId? = null) {}
	open fun onConfirmAvOnShard(arg0: UInt, arg1: Byte, sender: ChannelId? = null) {}
}

open class DistributedPlayer(doId: DOId): DistributedObjectBase(doId, 25U.toDClassId()) {
	companion object {
		val dClassId = 25U.toDClassId()

		object Fields {
			val arrivedOnDistrict: FieldId = 119U.toFieldId()
			val setAccountName: FieldId = 120U.toFieldId()
			val setWhisperFrom: FieldId = 121U.toFieldId()
			val setWhisperWLFrom: FieldId = 122U.toFieldId()
			val setWhisperSCFrom: FieldId = 123U.toFieldId()
			val setWhisperSCCustomFrom: FieldId = 124U.toFieldId()
			val setWhisperSCEmoteFrom: FieldId = 125U.toFieldId()
			val setSystemMessage: FieldId = 126U.toFieldId()
			val setCommonChatFlags: FieldId = 127U.toFieldId()
			val setWhitelistChatFlags: FieldId = 128U.toFieldId()
			val setSC: FieldId = 129U.toFieldId()
			val setSCCustom: FieldId = 130U.toFieldId()
			val setFriendsList: FieldId = 131U.toFieldId()
			val setDISLname: FieldId = 132U.toFieldId()
			val setDISLid: FieldId = 133U.toFieldId()
			val OwningAccount: FieldId = 134U.toFieldId()
			val WishName: FieldId = 135U.toFieldId()
			val WishNameState: FieldId = 136U.toFieldId()
			val setPreviousAccess: FieldId = 137U.toFieldId()
			val setAccess: FieldId = 138U.toFieldId()
			val setAccessLevel: FieldId = 139U.toFieldId()
			val setAsGM: FieldId = 140U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		119U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onArrivedOnDistrict(it.toUInt32()!!, sender)
			}
		),
		120U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetAccountName(it.toStringValue()!!, sender)
			}
		),
		121U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt32()!!
				onSetWhisperFrom(t0, t1, t2, sender)
				}
			}
		),
		122U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt32()!!
				onSetWhisperWLFrom(t0, t1, t2, sender)
				}
			}
		),
		123U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetWhisperSCFrom(t0, t1, sender)
				}
			}
		),
		124U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetWhisperSCCustomFrom(t0, t1, sender)
				}
			}
		),
		125U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetWhisperSCEmoteFrom(t0, t1, sender)
				}
			}
		),
		126U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onSetSystemMessage(t0, t1, sender)
				}
			}
		),
		127U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCommonChatFlags(it.toUInt8()!!, sender)
			}
		),
		128U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetWhitelistChatFlags(it.toUInt8()!!, sender)
			}
		),
		129U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetSC(it.toUInt16()!!, sender)
			}
		),
		130U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetSCCustom(it.toUInt16()!!, sender)
			}
		),
		131U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetFriendsList(with(FriendEntry) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		132U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDISLname(it.toStringValue()!!, sender)
			}
		),
		133U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					db = true,
					airecv = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDISLid(it.toUInt32()!!, sender)
			}
		),
		134U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onOwningAccount(it.toUInt32()!!, sender)
			}
		),
		135U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onWishName(it.toStringValue()!!, sender)
			}
		),
		136U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onWishNameState(it.toStringValue()!!, sender)
			}
		),
		137U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetPreviousAccess(it.toUInt8()!!, sender)
			}
		),
		138U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					airecv = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAccess(it.toUInt8()!!, sender)
			}
		),
		139U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetAccessLevel(it.toUInt16()!!, sender)
			}
		),
		140U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					airecv = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAsGM(with(bool) { fromFieldValue(it)}, sender)
			}
		),
	)

	fun arrivedOnDistrict(arg0: UInt, ) {
		setField(119U.toFieldId(), arg0.toFieldValue())
	}

	fun setAccountName(arg0: String, ) {
		setField(120U.toFieldId(), arg0.toFieldValue())
	}

	fun setWhisperFrom(arg0: UInt, arg1: String, arg2: UInt, ) {
		setField(121U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setWhisperWLFrom(arg0: UInt, arg1: String, arg2: UInt, ) {
		setField(122U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setWhisperSCFrom(arg0: UInt, arg1: UShort, ) {
		setField(123U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setWhisperSCCustomFrom(arg0: UInt, arg1: UShort, ) {
		setField(124U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setWhisperSCEmoteFrom(arg0: UInt, arg1: UShort, ) {
		setField(125U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setSystemMessage(arg0: UInt, arg1: String, ) {
		setField(126U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setCommonChatFlags(arg0: UByte, ) {
		setField(127U.toFieldId(), arg0.toFieldValue())
	}

	fun setWhitelistChatFlags(arg0: UByte, ) {
		setField(128U.toFieldId(), arg0.toFieldValue())
	}

	fun setSC(arg0: UShort, ) {
		setField(129U.toFieldId(), arg0.toFieldValue())
	}

	fun setSCCustom(arg0: UShort, ) {
		setField(130U.toFieldId(), arg0.toFieldValue())
	}

	fun setFriendsList(arg0: List<FriendEntry>, ) {
		setField(131U.toFieldId(), with(FriendEntry) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setDISLname(arg0: String, ) {
		setField(132U.toFieldId(), arg0.toFieldValue())
	}

	fun setDISLid(arg0: UInt, ) {
		setField(133U.toFieldId(), arg0.toFieldValue())
	}

	fun OwningAccount(arg0: UInt, ) {
		setField(134U.toFieldId(), arg0.toFieldValue())
	}

	fun WishName(arg0: String, ) {
		setField(135U.toFieldId(), arg0.toFieldValue())
	}

	fun WishNameState(arg0: String, ) {
		setField(136U.toFieldId(), arg0.toFieldValue())
	}

	fun setPreviousAccess(arg0: UByte, ) {
		setField(137U.toFieldId(), arg0.toFieldValue())
	}

	fun setAccess(arg0: UByte, ) {
		setField(138U.toFieldId(), arg0.toFieldValue())
	}

	fun setAccessLevel(accessLevel: UShort, ) {
		setField(139U.toFieldId(), accessLevel.toFieldValue())
	}

	fun setAsGM(arg0: bool, ) {
		setField(140U.toFieldId(), with(bool) { arg0.toFieldValue()})
	}

	open fun onArrivedOnDistrict(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetAccountName(arg0: String, sender: ChannelId? = null) {}
	open fun onSetWhisperFrom(arg0: UInt, arg1: String, arg2: UInt, sender: ChannelId? = null) {}
	open fun onSetWhisperWLFrom(arg0: UInt, arg1: String, arg2: UInt, sender: ChannelId? = null) {}
	open fun onSetWhisperSCFrom(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetWhisperSCCustomFrom(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetWhisperSCEmoteFrom(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetSystemMessage(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onSetCommonChatFlags(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetWhitelistChatFlags(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetSC(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetSCCustom(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetFriendsList(arg0: List<FriendEntry>, sender: ChannelId? = null) {}
	open fun onSetDISLname(arg0: String, sender: ChannelId? = null) {}
	open fun onSetDISLid(arg0: UInt, sender: ChannelId? = null) {}
	open fun onOwningAccount(arg0: UInt, sender: ChannelId? = null) {}
	open fun onWishName(arg0: String, sender: ChannelId? = null) {}
	open fun onWishNameState(arg0: String, sender: ChannelId? = null) {}
	open fun onSetPreviousAccess(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetAccess(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetAccessLevel(accessLevel: UShort, sender: ChannelId? = null) {}
	open fun onSetAsGM(arg0: bool, sender: ChannelId? = null) {}
}

open class OtpAvatarManager(doId: DOId): DistributedObjectBase(doId, 26U.toDClassId()) {
	companion object {
		val dClassId = 26U.toDClassId()

		object Fields {
			val online: FieldId = 141U.toFieldId()
			val requestAvatarList: FieldId = 142U.toFieldId()
			val rejectAvatarList: FieldId = 143U.toFieldId()
			val avatarListResponse: FieldId = 144U.toFieldId()
			val requestAvatarSlot: FieldId = 145U.toFieldId()
			val rejectAvatarSlot: FieldId = 146U.toFieldId()
			val avatarSlotResponse: FieldId = 147U.toFieldId()
			val requestPlayAvatar: FieldId = 148U.toFieldId()
			val rejectPlayAvatar: FieldId = 149U.toFieldId()
			val playAvatarResponse: FieldId = 150U.toFieldId()
			val rejectCreateAvatar: FieldId = 151U.toFieldId()
			val createAvatarResponse: FieldId = 152U.toFieldId()
			val requestRemoveAvatar: FieldId = 153U.toFieldId()
			val rejectRemoveAvatar: FieldId = 154U.toFieldId()
			val removeAvatarResponse: FieldId = 155U.toFieldId()
			val requestShareAvatar: FieldId = 156U.toFieldId()
			val rejectShareAvatar: FieldId = 157U.toFieldId()
			val shareAvatarResponse: FieldId = 158U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		141U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onOnline(sender)
			}
		),
		142U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestAvatarList(it.toUInt32()!!, sender)
			}
		),
		143U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectAvatarList(it.toUInt32()!!, sender)
			}
		),
		144U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onAvatarListResponse(it.toBlob()!!, sender)
			}
		),
		145U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt8()!!
				onRequestAvatarSlot(t0, t1, t2, sender)
				}
			}
		),
		146U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt8()!!
				onRejectAvatarSlot(t0, t1, t2, sender)
				}
			}
		),
		147U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onAvatarSlotResponse(t0, t1, sender)
				}
			}
		),
		148U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onRequestPlayAvatar(t0, t1, t2, sender)
				}
			}
		),
		149U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRejectPlayAvatar(t0, t1, sender)
				}
			}
		),
		150U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				onPlayAvatarResponse(t0, t1, t2, t3, sender)
				}
			}
		),
		151U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectCreateAvatar(it.toUInt32()!!, sender)
			}
		),
		152U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				onCreateAvatarResponse(t0, t1, t2, t3, sender)
				}
			}
		),
		153U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toStringValue()!!
				onRequestRemoveAvatar(t0, t1, t2, t3, sender)
				}
			}
		),
		154U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectRemoveAvatar(it.toUInt32()!!, sender)
			}
		),
		155U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRemoveAvatarResponse(t0, t1, sender)
				}
			}
		),
		156U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt8()!!
				onRequestShareAvatar(t0, t1, t2, t3, sender)
				}
			}
		),
		157U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectShareAvatar(it.toUInt32()!!, sender)
			}
		),
		158U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt8()!!
				onShareAvatarResponse(t0, t1, t2, sender)
				}
			}
		),
	)

	fun online() {
		setField(141U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestAvatarList(arg0: UInt, ) {
		setField(142U.toFieldId(), arg0.toFieldValue())
	}

	fun rejectAvatarList(arg0: UInt, ) {
		setField(143U.toFieldId(), arg0.toFieldValue())
	}

	fun avatarListResponse(arg0: ByteArray, ) {
		setField(144U.toFieldId(), arg0.toFieldValue())
	}

	fun requestAvatarSlot(arg0: UInt, arg1: UInt, arg2: UByte, ) {
		setField(145U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun rejectAvatarSlot(arg0: UInt, arg1: UInt, arg2: UByte, ) {
		setField(146U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun avatarSlotResponse(arg0: UInt, arg1: UByte, ) {
		setField(147U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestPlayAvatar(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(148U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun rejectPlayAvatar(arg0: UInt, arg1: UInt, ) {
		setField(149U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun playAvatarResponse(arg0: UInt, arg1: UInt, arg2: UByte, arg3: UByte, ) {
		setField(150U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun rejectCreateAvatar(arg0: UInt, ) {
		setField(151U.toFieldId(), arg0.toFieldValue())
	}

	fun createAvatarResponse(arg0: UInt, arg1: UInt, arg2: UByte, arg3: UByte, ) {
		setField(152U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun requestRemoveAvatar(arg0: UInt, arg1: UInt, arg2: UInt, arg3: String, ) {
		setField(153U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun rejectRemoveAvatar(arg0: UInt, ) {
		setField(154U.toFieldId(), arg0.toFieldValue())
	}

	fun removeAvatarResponse(arg0: UInt, arg1: UInt, ) {
		setField(155U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestShareAvatar(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UByte, ) {
		setField(156U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun rejectShareAvatar(arg0: UInt, ) {
		setField(157U.toFieldId(), arg0.toFieldValue())
	}

	fun shareAvatarResponse(arg0: UInt, arg1: UInt, arg2: UByte, ) {
		setField(158U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onOnline(sender: ChannelId? = null) {}
	open fun onRequestAvatarList(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRejectAvatarList(arg0: UInt, sender: ChannelId? = null) {}
	open fun onAvatarListResponse(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onRequestAvatarSlot(arg0: UInt, arg1: UInt, arg2: UByte, sender: ChannelId? = null) {}
	open fun onRejectAvatarSlot(arg0: UInt, arg1: UInt, arg2: UByte, sender: ChannelId? = null) {}
	open fun onAvatarSlotResponse(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onRequestPlayAvatar(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onRejectPlayAvatar(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onPlayAvatarResponse(arg0: UInt, arg1: UInt, arg2: UByte, arg3: UByte, sender: ChannelId? = null) {}
	open fun onRejectCreateAvatar(arg0: UInt, sender: ChannelId? = null) {}
	open fun onCreateAvatarResponse(arg0: UInt, arg1: UInt, arg2: UByte, arg3: UByte, sender: ChannelId? = null) {}
	open fun onRequestRemoveAvatar(arg0: UInt, arg1: UInt, arg2: UInt, arg3: String, sender: ChannelId? = null) {}
	open fun onRejectRemoveAvatar(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRemoveAvatarResponse(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onRequestShareAvatar(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UByte, sender: ChannelId? = null) {}
	open fun onRejectShareAvatar(arg0: UInt, sender: ChannelId? = null) {}
	open fun onShareAvatarResponse(arg0: UInt, arg1: UInt, arg2: UByte, sender: ChannelId? = null) {}
}

open class DistributedChatManager(doId: DOId): DistributedObjectBase(doId, 27U.toDClassId()) {
	companion object {
		val dClassId = 27U.toDClassId()

		object Fields {
			val online: FieldId = 159U.toFieldId()
			val adminChat: FieldId = 160U.toFieldId()
			val setAvatarLocation: FieldId = 161U.toFieldId()
			val setAvatarCrew: FieldId = 162U.toFieldId()
			val setAvatarGuild: FieldId = 163U.toFieldId()
			val chatParentId: FieldId = 164U.toFieldId()
			val chatZoneId: FieldId = 165U.toFieldId()
			val chatFace: FieldId = 166U.toFieldId()
			val chatEmote: FieldId = 167U.toFieldId()
			val chatEmoteTarget: FieldId = 168U.toFieldId()
			val chatIndex: FieldId = 169U.toFieldId()
			val chatString: FieldId = 170U.toFieldId()
			val chatToAvatarIndex: FieldId = 171U.toFieldId()
			val chatParentZoneFaceEmoteWithTargetIndex: FieldId = 172U.toFieldId()
			val chatToAvatarString: FieldId = 173U.toFieldId()
			val chatParentZoneFaceEmoteWithTargetString: FieldId = 174U.toFieldId()
			val speedChatTo: FieldId = 175U.toFieldId()
			val speedChatFrom: FieldId = 176U.toFieldId()
			val speedChatCustomTo: FieldId = 177U.toFieldId()
			val speedChatCustomFrom: FieldId = 178U.toFieldId()
			val whisperSCTo: FieldId = 179U.toFieldId()
			val whisperSCFrom: FieldId = 180U.toFieldId()
			val whisperSCCustomTo: FieldId = 181U.toFieldId()
			val whisperSCCustomFrom: FieldId = 182U.toFieldId()
			val whisperSCEmoteTo: FieldId = 183U.toFieldId()
			val whisperSCEmoteFrom: FieldId = 184U.toFieldId()
			val whisperIgnored: FieldId = 185U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		159U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onOnline(sender)
			}
		),
		160U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onAdminChat(t0, t1, sender)
				}
			}
		),
		161U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onSetAvatarLocation(t0, t1, t2, sender)
				}
			}
		),
		162U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetAvatarCrew(t0, t1, sender)
				}
			}
		),
		163U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetAvatarGuild(t0, t1, sender)
				}
			}
		),
		164U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChatParentId(it.toUInt32()!!, sender)
			}
		),
		165U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChatZoneId(it.toUInt32()!!, sender)
			}
		),
		166U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChatFace(it.toUInt32()!!, sender)
			}
		),
		167U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChatEmote(it.toUInt16()!!, sender)
			}
		),
		168U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChatEmoteTarget(it.toUInt32()!!, sender)
			}
		),
		169U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChatIndex(it.toUInt16()!!, sender)
			}
		),
		170U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChatString(it.toStringValue()!!, sender)
			}
		),
		171U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onChatToAvatarIndex(t0, t1, sender)
				}
			}
		),
		172U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt16()!!
				val t4 = values[4].toUInt32()!!
				val t5 = values[5].toUInt16()!!
				onChatParentZoneFaceEmoteWithTargetIndex(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		173U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onChatToAvatarString(t0, t1, sender)
				}
			}
		),
		174U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt16()!!
				val t4 = values[4].toUInt32()!!
				val t5 = values[5].toStringValue()!!
				onChatParentZoneFaceEmoteWithTargetString(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		175U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSpeedChatTo(it.toUInt16()!!, sender)
			}
		),
		176U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSpeedChatFrom(t0, t1, sender)
				}
			}
		),
		177U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSpeedChatCustomTo(it.toUInt16()!!, sender)
			}
		),
		178U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSpeedChatCustomFrom(t0, t1, sender)
				}
			}
		),
		179U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onWhisperSCTo(t0, t1, sender)
				}
			}
		),
		180U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onWhisperSCFrom(t0, t1, sender)
				}
			}
		),
		181U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onWhisperSCCustomTo(t0, t1, sender)
				}
			}
		),
		182U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onWhisperSCCustomFrom(t0, t1, sender)
				}
			}
		),
		183U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onWhisperSCEmoteTo(t0, t1, sender)
				}
			}
		),
		184U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onWhisperSCEmoteFrom(t0, t1, sender)
				}
			}
		),
		185U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onWhisperIgnored(it.toUInt32()!!, sender)
			}
		),
	)

	fun online() {
		setField(159U.toFieldId(), FieldValue.EmptyValue)
	}

	fun adminChat(arg0: UInt, arg1: String, ) {
		setField(160U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setAvatarLocation(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(161U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setAvatarCrew(arg0: UInt, arg1: UInt, ) {
		setField(162U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setAvatarGuild(arg0: UInt, arg1: UInt, ) {
		setField(163U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun chatParentId(arg0: UInt, ) {
		setField(164U.toFieldId(), arg0.toFieldValue())
	}

	fun chatZoneId(arg0: UInt, ) {
		setField(165U.toFieldId(), arg0.toFieldValue())
	}

	fun chatFace(arg0: UInt, ) {
		setField(166U.toFieldId(), arg0.toFieldValue())
	}

	fun chatEmote(arg0: UShort, ) {
		setField(167U.toFieldId(), arg0.toFieldValue())
	}

	fun chatEmoteTarget(arg0: UInt, ) {
		setField(168U.toFieldId(), arg0.toFieldValue())
	}

	fun chatIndex(arg0: UShort, ) {
		setField(169U.toFieldId(), arg0.toFieldValue())
	}

	fun chatString(arg0: String, ) {
		setField(170U.toFieldId(), arg0.toFieldValue())
	}

	fun chatToAvatarIndex(arg0: UInt, arg1: UShort, ) {
		val arg0Value = arg0.toFieldValue()
		val arg1Value = arg1.toFieldValue()

		setField(171U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun chatParentZoneFaceEmoteWithTargetIndex(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UShort, arg4: UInt, arg5: UShort, ) {
		val arg0Value = arg0.toFieldValue()
		val arg1Value = arg1.toFieldValue()
		val arg2Value = arg2.toFieldValue()
		val arg3Value = arg3.toFieldValue()
		val arg4Value = arg4.toFieldValue()
		val arg5Value = arg5.toFieldValue()

		setField(172U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, ))
	}

	fun chatToAvatarString(arg0: UInt, arg1: String, ) {
		val arg0Value = arg0.toFieldValue()
		val arg1Value = arg1.toFieldValue()

		setField(173U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun chatParentZoneFaceEmoteWithTargetString(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UShort, arg4: UInt, arg5: String, ) {
		val arg0Value = arg0.toFieldValue()
		val arg1Value = arg1.toFieldValue()
		val arg2Value = arg2.toFieldValue()
		val arg3Value = arg3.toFieldValue()
		val arg4Value = arg4.toFieldValue()
		val arg5Value = arg5.toFieldValue()

		setField(174U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, ))
	}

	fun speedChatTo(arg0: UShort, ) {
		setField(175U.toFieldId(), arg0.toFieldValue())
	}

	fun speedChatFrom(arg0: UInt, arg1: UShort, ) {
		setField(176U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun speedChatCustomTo(arg0: UShort, ) {
		setField(177U.toFieldId(), arg0.toFieldValue())
	}

	fun speedChatCustomFrom(arg0: UInt, arg1: UShort, ) {
		setField(178U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun whisperSCTo(arg0: UInt, arg1: UShort, ) {
		setField(179U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun whisperSCFrom(arg0: UInt, arg1: UShort, ) {
		setField(180U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun whisperSCCustomTo(arg0: UInt, arg1: UShort, ) {
		setField(181U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun whisperSCCustomFrom(arg0: UInt, arg1: UShort, ) {
		setField(182U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun whisperSCEmoteTo(arg0: UInt, arg1: UShort, ) {
		setField(183U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun whisperSCEmoteFrom(arg0: UInt, arg1: UShort, ) {
		setField(184U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun whisperIgnored(arg0: UInt, ) {
		setField(185U.toFieldId(), arg0.toFieldValue())
	}

	open fun onOnline(sender: ChannelId? = null) {}
	open fun onAdminChat(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onSetAvatarLocation(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onSetAvatarCrew(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetAvatarGuild(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onChatParentId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onChatZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onChatFace(arg0: UInt, sender: ChannelId? = null) {}
	open fun onChatEmote(arg0: UShort, sender: ChannelId? = null) {}
	open fun onChatEmoteTarget(arg0: UInt, sender: ChannelId? = null) {}
	open fun onChatIndex(arg0: UShort, sender: ChannelId? = null) {}
	open fun onChatString(arg0: String, sender: ChannelId? = null) {}
	open fun onChatToAvatarIndex(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onChatParentZoneFaceEmoteWithTargetIndex(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UShort, arg4: UInt, arg5: UShort, sender: ChannelId? = null) {}
	open fun onChatToAvatarString(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onChatParentZoneFaceEmoteWithTargetString(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UShort, arg4: UInt, arg5: String, sender: ChannelId? = null) {}
	open fun onSpeedChatTo(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSpeedChatFrom(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSpeedChatCustomTo(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSpeedChatCustomFrom(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onWhisperSCTo(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onWhisperSCFrom(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onWhisperSCCustomTo(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onWhisperSCCustomFrom(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onWhisperSCEmoteTo(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onWhisperSCEmoteFrom(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onWhisperIgnored(arg0: UInt, sender: ChannelId? = null) {}
}

open class FriendManager(doId: DOId): DistributedObjectBase(doId, 28U.toDClassId()) {
	companion object {
		val dClassId = 28U.toDClassId()

		object Fields {
			val friendQuery: FieldId = 186U.toFieldId()
			val cancelFriendQuery: FieldId = 187U.toFieldId()
			val inviteeFriendConsidering: FieldId = 188U.toFieldId()
			val inviteeFriendResponse: FieldId = 189U.toFieldId()
			val inviteeAcknowledgeCancel: FieldId = 190U.toFieldId()
			val friendConsidering: FieldId = 191U.toFieldId()
			val friendResponse: FieldId = 192U.toFieldId()
			val inviteeFriendQuery: FieldId = 193U.toFieldId()
			val inviteeCancelFriendQuery: FieldId = 194U.toFieldId()
			val requestSecret: FieldId = 195U.toFieldId()
			val requestSecretResponse: FieldId = 196U.toFieldId()
			val submitSecret: FieldId = 197U.toFieldId()
			val submitSecretResponse: FieldId = 198U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		186U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onFriendQuery(it.toInt32()!!, sender)
			}
		),
		187U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onCancelFriendQuery(it.toInt32()!!, sender)
			}
		),
		188U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt32()!!
				onInviteeFriendConsidering(t0, t1, sender)
				}
			}
		),
		189U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt32()!!
				onInviteeFriendResponse(t0, t1, sender)
				}
			}
		),
		190U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onInviteeAcknowledgeCancel(it.toInt32()!!, sender)
			}
		),
		191U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt32()!!
				onFriendConsidering(t0, t1, sender)
				}
			}
		),
		192U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt32()!!
				onFriendResponse(t0, t1, sender)
				}
			}
		),
		193U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.String, FieldValue.Type.Blob, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toBlob()!!
				val t3 = values[3].toInt32()!!
				onInviteeFriendQuery(t0, t1, t2, t3, sender)
				}
			}
		),
		194U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onInviteeCancelFriendQuery(it.toInt32()!!, sender)
			}
		),
		195U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestSecret(sender)
			}
		),
		196U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toStringValue()!!
				onRequestSecretResponse(t0, t1, sender)
				}
			}
		),
		197U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSubmitSecret(it.toStringValue()!!, sender)
			}
		),
		198U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt32()!!
				onSubmitSecretResponse(t0, t1, sender)
				}
			}
		),
	)

	fun friendQuery(arg0: Int, ) {
		setField(186U.toFieldId(), arg0.toFieldValue())
	}

	fun cancelFriendQuery(arg0: Int, ) {
		setField(187U.toFieldId(), arg0.toFieldValue())
	}

	fun inviteeFriendConsidering(arg0: Byte, arg1: Int, ) {
		setField(188U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun inviteeFriendResponse(arg0: Byte, arg1: Int, ) {
		setField(189U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun inviteeAcknowledgeCancel(arg0: Int, ) {
		setField(190U.toFieldId(), arg0.toFieldValue())
	}

	fun friendConsidering(arg0: Byte, arg1: Int, ) {
		setField(191U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun friendResponse(arg0: Byte, arg1: Int, ) {
		setField(192U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun inviteeFriendQuery(arg0: Int, arg1: String, arg2: ByteArray, arg3: Int, ) {
		setField(193U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun inviteeCancelFriendQuery(arg0: Int, ) {
		setField(194U.toFieldId(), arg0.toFieldValue())
	}

	fun requestSecret() {
		setField(195U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestSecretResponse(arg0: Byte, arg1: String, ) {
		setField(196U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun submitSecret(arg0: String, ) {
		setField(197U.toFieldId(), arg0.toFieldValue())
	}

	fun submitSecretResponse(arg0: Byte, arg1: Int, ) {
		setField(198U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onFriendQuery(arg0: Int, sender: ChannelId? = null) {}
	open fun onCancelFriendQuery(arg0: Int, sender: ChannelId? = null) {}
	open fun onInviteeFriendConsidering(arg0: Byte, arg1: Int, sender: ChannelId? = null) {}
	open fun onInviteeFriendResponse(arg0: Byte, arg1: Int, sender: ChannelId? = null) {}
	open fun onInviteeAcknowledgeCancel(arg0: Int, sender: ChannelId? = null) {}
	open fun onFriendConsidering(arg0: Byte, arg1: Int, sender: ChannelId? = null) {}
	open fun onFriendResponse(arg0: Byte, arg1: Int, sender: ChannelId? = null) {}
	open fun onInviteeFriendQuery(arg0: Int, arg1: String, arg2: ByteArray, arg3: Int, sender: ChannelId? = null) {}
	open fun onInviteeCancelFriendQuery(arg0: Int, sender: ChannelId? = null) {}
	open fun onRequestSecret(sender: ChannelId? = null) {}
	open fun onRequestSecretResponse(arg0: Byte, arg1: String, sender: ChannelId? = null) {}
	open fun onSubmitSecret(arg0: String, sender: ChannelId? = null) {}
	open fun onSubmitSecretResponse(arg0: Byte, arg1: Int, sender: ChannelId? = null) {}
}

open class LeaderBoardReceiver(doId: DOId): DistributedObjectBase(doId, 34U.toDClassId()) {
	companion object {
		val dClassId = 34U.toDClassId()

		object Fields {
			val getTopTenResponce: FieldId = 229U.toFieldId()
			val getValuesResponce: FieldId = 230U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		229U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, )), ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = with(leaderBoardRecord) { values[1].toList()!!.map { fromFieldValue(it) }}
				onGetTopTenResponce(t0, t1, sender)
				}
			}
		),
		230U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, )), ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = with(leaderBoardRecordResponces) { values[1].toList()!!.map { fromFieldValue(it) }}
				onGetValuesResponce(t0, t1, sender)
				}
			}
		),
	)

	fun getTopTenResponce(arg0: String, arg1: List<leaderBoardRecord>, ) {
		setField(229U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			with(leaderBoardRecord) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, ), arg1.map { it.toFieldValue() }).toFieldValue()}, 
				))
	}

	fun getValuesResponce(arg0: String, arg1: List<leaderBoardRecordResponces>, ) {
		setField(230U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			with(leaderBoardRecordResponces) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, ), arg1.map { it.toFieldValue() }).toFieldValue()}, 
				))
	}

	open fun onGetTopTenResponce(arg0: String, arg1: List<leaderBoardRecord>, sender: ChannelId? = null) {}
	open fun onGetValuesResponce(arg0: String, arg1: List<leaderBoardRecordResponces>, sender: ChannelId? = null) {}
}

open class LeaderBoard(doId: DOId): DistributedObjectBase(doId, 35U.toDClassId()) {
	companion object {
		val dClassId = 35U.toDClassId()

		object Fields {
			val setValue: FieldId = 231U.toFieldId()
			val alterValue: FieldId = 232U.toFieldId()
			val setHighScore: FieldId = 233U.toFieldId()
			val getValues: FieldId = 234U.toFieldId()
			val getTopTen: FieldId = 235U.toFieldId()
			val getValuesRespondTo: FieldId = 236U.toFieldId()
			val getTopTenRespondTo: FieldId = 237U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		231U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.String), FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toStringValue()!! }
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toInt32()!!
				onSetValue(t0, t1, t2, t3, sender)
				}
			}
		),
		232U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.String), FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toStringValue()!! }
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toInt32()!!
				onAlterValue(t0, t1, t2, t3, sender)
				}
			}
		),
		233U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.String), FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toStringValue()!! }
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toInt32()!!
				onSetHighScore(t0, t1, t2, t3, sender)
				}
			}
		),
		234U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onGetValues(t0, t1, sender)
				}
			}
		),
		235U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onGetTopTen(it.toStringValue()!!, sender)
			}
		),
		236U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				val t2 = values[2].toUInt32()!!
				onGetValuesRespondTo(t0, t1, t2, sender)
				}
			}
		),
		237U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toUInt32()!!
				onGetTopTenRespondTo(t0, t1, sender)
				}
			}
		),
	)

	fun setValue(arg0: List<String>, arg1: UInt, arg2: String, arg3: Int, ) {
		setField(231U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.String, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun alterValue(arg0: List<String>, arg1: UInt, arg2: String, arg3: Int, ) {
		setField(232U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.String, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setHighScore(arg0: List<String>, arg1: UInt, arg2: String, arg3: Int, ) {
		setField(233U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.String, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun getValues(arg0: String, arg1: List<UInt>, ) {
		setField(234U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun getTopTen(arg0: String, ) {
		setField(235U.toFieldId(), arg0.toFieldValue())
	}

	fun getValuesRespondTo(arg0: String, arg1: List<UInt>, arg2: UInt, ) {
		setField(236U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun getTopTenRespondTo(arg0: String, arg1: UInt, ) {
		setField(237U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetValue(arg0: List<String>, arg1: UInt, arg2: String, arg3: Int, sender: ChannelId? = null) {}
	open fun onAlterValue(arg0: List<String>, arg1: UInt, arg2: String, arg3: Int, sender: ChannelId? = null) {}
	open fun onSetHighScore(arg0: List<String>, arg1: UInt, arg2: String, arg3: Int, sender: ChannelId? = null) {}
	open fun onGetValues(arg0: String, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onGetTopTen(arg0: String, sender: ChannelId? = null) {}
	open fun onGetValuesRespondTo(arg0: String, arg1: List<UInt>, arg2: UInt, sender: ChannelId? = null) {}
	open fun onGetTopTenRespondTo(arg0: String, arg1: UInt, sender: ChannelId? = null) {}
}

open class GuildManager(doId: DOId): DistributedObjectBase(doId, 36U.toDClassId()) {
	companion object {
		val dClassId = 36U.toDClassId()

		object Fields {
			val online: FieldId = 238U.toFieldId()
			val guildRejectInvite: FieldId = 239U.toFieldId()
			val invitationFrom: FieldId = 240U.toFieldId()
			val requestInvite: FieldId = 241U.toFieldId()
			val memberList: FieldId = 242U.toFieldId()
			val createGuild: FieldId = 243U.toFieldId()
			val acceptInvite: FieldId = 244U.toFieldId()
			val declineInvite: FieldId = 245U.toFieldId()
			val setWantName: FieldId = 246U.toFieldId()
			val removeMember: FieldId = 247U.toFieldId()
			val changeRank: FieldId = 248U.toFieldId()
			val changeRankAvocate: FieldId = 249U.toFieldId()
			val statusRequest: FieldId = 250U.toFieldId()
			val requestLeaderboardTopTen: FieldId = 251U.toFieldId()
			val guildStatusUpdate: FieldId = 252U.toFieldId()
			val guildNameReject: FieldId = 253U.toFieldId()
			val guildNameChange: FieldId = 254U.toFieldId()
			val receiveMember: FieldId = 255U.toFieldId()
			val receiveMembersDone: FieldId = 256U.toFieldId()
			val guildAcceptInvite: FieldId = 257U.toFieldId()
			val guildDeclineInvite: FieldId = 258U.toFieldId()
			val updateRep: FieldId = 259U.toFieldId()
			val leaderboardTopTen: FieldId = 260U.toFieldId()
			val recvAvatarOnline: FieldId = 261U.toFieldId()
			val recvAvatarOffline: FieldId = 262U.toFieldId()
			val sendChat: FieldId = 263U.toFieldId()
			val sendWLChat: FieldId = 264U.toFieldId()
			val sendSC: FieldId = 265U.toFieldId()
			val sendSCQuest: FieldId = 266U.toFieldId()
			val recvChat: FieldId = 267U.toFieldId()
			val recvWLChat: FieldId = 268U.toFieldId()
			val recvSC: FieldId = 269U.toFieldId()
			val recvSCQuest: FieldId = 270U.toFieldId()
			val sendTokenRequest: FieldId = 271U.toFieldId()
			val recvTokenGenerated: FieldId = 272U.toFieldId()
			val recvTokenInviteValue: FieldId = 273U.toFieldId()
			val sendTokenForJoinRequest: FieldId = 274U.toFieldId()
			val recvTokenRedeemMessage: FieldId = 275U.toFieldId()
			val recvTokenRedeemedByPlayerMessage: FieldId = 276U.toFieldId()
			val sendTokenRValue: FieldId = 277U.toFieldId()
			val sendPermToken: FieldId = 278U.toFieldId()
			val sendNonPermTokenCount: FieldId = 279U.toFieldId()
			val recvPermToken: FieldId = 280U.toFieldId()
			val recvNonPermTokenCount: FieldId = 281U.toFieldId()
			val sendClearTokens: FieldId = 282U.toFieldId()
			val sendAvatarBandId: FieldId = 283U.toFieldId()
			val recvMemberAdded: FieldId = 284U.toFieldId()
			val notifyGuildKicksMaxed: FieldId = 285U.toFieldId()
			val recvMemberRemoved: FieldId = 286U.toFieldId()
			val recvMemberUpdateName: FieldId = 287U.toFieldId()
			val recvMemberUpdateRank: FieldId = 288U.toFieldId()
			val recvMemberUpdateBandId: FieldId = 289U.toFieldId()
			val avatarOnline: FieldId = 290U.toFieldId()
			val avatarOffline: FieldId = 291U.toFieldId()
			val reflectTeleportQuery: FieldId = 292U.toFieldId()
			val teleportQuery: FieldId = 293U.toFieldId()
			val reflectTeleportResponse: FieldId = 294U.toFieldId()
			val teleportResponse: FieldId = 295U.toFieldId()
			val requestGuildMatesList: FieldId = 296U.toFieldId()
			val updateAvatarName: FieldId = 297U.toFieldId()
			val avatarDeleted: FieldId = 298U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		238U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onOnline(sender)
			}
		),
		239U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onGuildRejectInvite(t0, t1, sender)
				}
			}
		),
		240U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toStringValue()!!
				onInvitationFrom(t0, t1, t2, t3, sender)
				}
			}
		),
		241U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestInvite(it.toUInt32()!!, sender)
			}
		),
		242U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onMemberList(sender)
			}
		),
		243U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onCreateGuild(sender)
			}
		),
		244U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAcceptInvite(sender)
			}
		),
		245U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onDeclineInvite(sender)
			}
		),
		246U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetWantName(it.toStringValue()!!, sender)
			}
		),
		247U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRemoveMember(it.toUInt32()!!, sender)
			}
		),
		248U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onChangeRank(t0, t1, sender)
				}
			}
		),
		249U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChangeRankAvocate(it.toUInt32()!!, sender)
			}
		),
		250U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onStatusRequest(sender)
			}
		),
		251U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestLeaderboardTopTen(sender)
			}
		),
		252U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt8()!!
				onGuildStatusUpdate(t0, t1, t2, sender)
				}
			}
		),
		253U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onGuildNameReject(it.toUInt32()!!, sender)
			}
		),
		254U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toUInt8()!!
				onGuildNameChange(t0, t1, sender)
				}
			}
		),
		255U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onReceiveMember(with(MemberInfo) { fromFieldValue(it)}, sender)
			}
		),
		256U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onReceiveMembersDone(sender)
			}
		),
		257U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onGuildAcceptInvite(it.toUInt32()!!, sender)
			}
		),
		258U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onGuildDeclineInvite(it.toUInt32()!!, sender)
			}
		),
		259U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onUpdateRep(t0, t1, sender)
				}
			}
		),
		260U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, )),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onLeaderboardTopTen(with(leaderBoardRecord) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		261U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				onRecvAvatarOnline(t0, t1, t2, t3, sender)
				}
			}
		),
		262U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onRecvAvatarOffline(t0, t1, sender)
				}
			}
		),
		263U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt32()!!
				onSendChat(t0, t1, t2, sender)
				}
			}
		),
		264U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt32()!!
				onSendWLChat(t0, t1, t2, sender)
				}
			}
		),
		265U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSendSC(it.toUInt16()!!, sender)
			}
		),
		266U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toUInt16()!!
				onSendSCQuest(t0, t1, t2, sender)
				}
			}
		),
		267U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt32()!!
				onRecvChat(t0, t1, t2, t3, sender)
				}
			}
		),
		268U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt32()!!
				onRecvWLChat(t0, t1, t2, t3, sender)
				}
			}
		),
		269U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onRecvSC(t0, t1, sender)
				}
			}
		),
		270U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toUInt16()!!
				val t3 = values[3].toUInt16()!!
				onRecvSCQuest(t0, t1, t2, t3, sender)
				}
			}
		),
		271U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSendTokenRequest(sender)
			}
		),
		272U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRecvTokenGenerated(it.toStringValue()!!, sender)
			}
		),
		273U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt8()!!
				onRecvTokenInviteValue(t0, t1, sender)
				}
			}
		),
		274U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				onSendTokenForJoinRequest(t0, t1, sender)
				}
			}
		),
		275U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRecvTokenRedeemMessage(it.toStringValue()!!, sender)
			}
		),
		276U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRecvTokenRedeemedByPlayerMessage(it.toStringValue()!!, sender)
			}
		),
		277U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt8()!!
				onSendTokenRValue(t0, t1, sender)
				}
			}
		),
		278U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSendPermToken(sender)
			}
		),
		279U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSendNonPermTokenCount(sender)
			}
		),
		280U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRecvPermToken(it.toStringValue()!!, sender)
			}
		),
		281U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRecvNonPermTokenCount(it.toUInt8()!!, sender)
			}
		),
		282U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSendClearTokens(it.toUInt8()!!, sender)
			}
		),
		283U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onSendAvatarBandId(t0, t1, t2, sender)
				}
			}
		),
		284U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ), FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = with(MemberInfo) { fromFieldValue(it)}
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				onRecvMemberAdded(t0, t1, t2, sender)
				}
			}
		),
		285U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onNotifyGuildKicksMaxed(sender)
			}
		),
		286U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toStringValue()!!
				onRecvMemberRemoved(t0, t1, t2, t3, sender)
				}
			}
		),
		287U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onRecvMemberUpdateName(t0, t1, sender)
				}
			}
		),
		288U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toStringValue()!!
				val t4 = values[4].toUInt8()!!
				val t5 = with(bool) { fromFieldValue(it)}
				onRecvMemberUpdateRank(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		289U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onRecvMemberUpdateBandId(t0, t1, t2, sender)
				}
			}
		),
		290U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onAvatarOnline(t0, t1, sender)
				}
			}
		),
		291U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onAvatarOffline(it.toUInt32()!!, sender)
			}
		),
		292U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt32()!!
				onReflectTeleportQuery(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		293U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt32()!!
				onTeleportQuery(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		294U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt32()!!
				onReflectTeleportResponse(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		295U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt32()!!
				onTeleportResponse(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		296U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onRequestGuildMatesList(t0, t1, t2, sender)
				}
			}
		),
		297U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onUpdateAvatarName(t0, t1, sender)
				}
			}
		),
		298U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onAvatarDeleted(it.toUInt32()!!, sender)
			}
		),
	)

	fun online() {
		setField(238U.toFieldId(), FieldValue.EmptyValue)
	}

	fun guildRejectInvite(arg0: UInt, arg1: UInt, ) {
		setField(239U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun invitationFrom(arg0: UInt, arg1: String, arg2: UInt, arg3: String, ) {
		setField(240U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun requestInvite(arg0: UInt, ) {
		setField(241U.toFieldId(), arg0.toFieldValue())
	}

	fun memberList() {
		setField(242U.toFieldId(), FieldValue.EmptyValue)
	}

	fun createGuild() {
		setField(243U.toFieldId(), FieldValue.EmptyValue)
	}

	fun acceptInvite() {
		setField(244U.toFieldId(), FieldValue.EmptyValue)
	}

	fun declineInvite() {
		setField(245U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setWantName(arg0: String, ) {
		setField(246U.toFieldId(), arg0.toFieldValue())
	}

	fun removeMember(arg0: UInt, ) {
		setField(247U.toFieldId(), arg0.toFieldValue())
	}

	fun changeRank(arg0: UInt, arg1: UByte, ) {
		setField(248U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun changeRankAvocate(arg0: UInt, ) {
		setField(249U.toFieldId(), arg0.toFieldValue())
	}

	fun statusRequest() {
		setField(250U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestLeaderboardTopTen() {
		setField(251U.toFieldId(), FieldValue.EmptyValue)
	}

	fun guildStatusUpdate(arg0: UInt, arg1: String, arg2: UByte, ) {
		setField(252U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun guildNameReject(arg0: UInt, ) {
		setField(253U.toFieldId(), arg0.toFieldValue())
	}

	fun guildNameChange(arg0: String, arg1: UByte, ) {
		setField(254U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun receiveMember(arg0: MemberInfo, ) {
		setField(255U.toFieldId(), with(MemberInfo) { arg0.toFieldValue()})
	}

	fun receiveMembersDone() {
		setField(256U.toFieldId(), FieldValue.EmptyValue)
	}

	fun guildAcceptInvite(arg0: UInt, ) {
		setField(257U.toFieldId(), arg0.toFieldValue())
	}

	fun guildDeclineInvite(arg0: UInt, ) {
		setField(258U.toFieldId(), arg0.toFieldValue())
	}

	fun updateRep(arg0: UInt, arg1: UInt, ) {
		setField(259U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun leaderboardTopTen(arg0: List<leaderBoardRecord>, ) {
		setField(260U.toFieldId(), with(leaderBoardRecord) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun recvAvatarOnline(arg0: UInt, arg1: String, arg2: UInt, arg3: UInt, ) {
		setField(261U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun recvAvatarOffline(arg0: UInt, arg1: String, ) {
		setField(262U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun sendChat(arg0: String, arg1: UByte, arg2: UInt, ) {
		setField(263U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun sendWLChat(arg0: String, arg1: UByte, arg2: UInt, ) {
		setField(264U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun sendSC(arg0: UShort, ) {
		setField(265U.toFieldId(), arg0.toFieldValue())
	}

	fun sendSCQuest(arg0: UShort, arg1: UShort, arg2: UShort, ) {
		setField(266U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun recvChat(arg0: UInt, arg1: String, arg2: UByte, arg3: UInt, ) {
		setField(267U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun recvWLChat(arg0: UInt, arg1: String, arg2: UByte, arg3: UInt, ) {
		setField(268U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun recvSC(arg0: UInt, arg1: UShort, ) {
		setField(269U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun recvSCQuest(arg0: UInt, arg1: UShort, arg2: UShort, arg3: UShort, ) {
		setField(270U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun sendTokenRequest() {
		setField(271U.toFieldId(), FieldValue.EmptyValue)
	}

	fun recvTokenGenerated(arg0: String, ) {
		setField(272U.toFieldId(), arg0.toFieldValue())
	}

	fun recvTokenInviteValue(arg0: String, arg1: Byte, ) {
		setField(273U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun sendTokenForJoinRequest(arg0: String, arg1: String, ) {
		setField(274U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun recvTokenRedeemMessage(arg0: String, ) {
		setField(275U.toFieldId(), arg0.toFieldValue())
	}

	fun recvTokenRedeemedByPlayerMessage(arg0: String, ) {
		setField(276U.toFieldId(), arg0.toFieldValue())
	}

	fun sendTokenRValue(arg0: String, arg1: Byte, ) {
		setField(277U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun sendPermToken() {
		setField(278U.toFieldId(), FieldValue.EmptyValue)
	}

	fun sendNonPermTokenCount() {
		setField(279U.toFieldId(), FieldValue.EmptyValue)
	}

	fun recvPermToken(arg0: String, ) {
		setField(280U.toFieldId(), arg0.toFieldValue())
	}

	fun recvNonPermTokenCount(arg0: UByte, ) {
		setField(281U.toFieldId(), arg0.toFieldValue())
	}

	fun sendClearTokens(arg0: UByte, ) {
		setField(282U.toFieldId(), arg0.toFieldValue())
	}

	fun sendAvatarBandId(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(283U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun recvMemberAdded(arg0: MemberInfo, arg1: UInt, arg2: String, ) {
		setField(284U.toFieldId(), FieldValue.TupleValue(
			with(MemberInfo) { arg0.toFieldValue()}, 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun notifyGuildKicksMaxed() {
		setField(285U.toFieldId(), FieldValue.EmptyValue)
	}

	fun recvMemberRemoved(arg0: UInt, arg1: UInt, arg2: String, arg3: String, ) {
		setField(286U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun recvMemberUpdateName(arg0: UInt, arg1: String, ) {
		setField(287U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun recvMemberUpdateRank(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: UByte, arg5: bool, ) {
		setField(288U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			with(bool) { arg5.toFieldValue()}, 
				))
	}

	fun recvMemberUpdateBandId(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(289U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun avatarOnline(arg0: UInt, arg1: UShort, ) {
		setField(290U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun avatarOffline(arg0: UInt, ) {
		setField(291U.toFieldId(), arg0.toFieldValue())
	}

	fun reflectTeleportQuery(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, arg4: UInt, ) {
		setField(292U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun teleportQuery(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, arg4: UInt, ) {
		setField(293U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun reflectTeleportResponse(arg0: UInt, arg1: Byte, arg2: UInt, arg3: UInt, arg4: UInt, ) {
		setField(294U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun teleportResponse(arg0: UInt, arg1: Byte, arg2: UInt, arg3: UInt, arg4: UInt, ) {
		setField(295U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun requestGuildMatesList(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(296U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun updateAvatarName(arg0: UInt, arg1: String, ) {
		setField(297U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun avatarDeleted(arg0: UInt, ) {
		setField(298U.toFieldId(), arg0.toFieldValue())
	}

	open fun onOnline(sender: ChannelId? = null) {}
	open fun onGuildRejectInvite(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onInvitationFrom(arg0: UInt, arg1: String, arg2: UInt, arg3: String, sender: ChannelId? = null) {}
	open fun onRequestInvite(arg0: UInt, sender: ChannelId? = null) {}
	open fun onMemberList(sender: ChannelId? = null) {}
	open fun onCreateGuild(sender: ChannelId? = null) {}
	open fun onAcceptInvite(sender: ChannelId? = null) {}
	open fun onDeclineInvite(sender: ChannelId? = null) {}
	open fun onSetWantName(arg0: String, sender: ChannelId? = null) {}
	open fun onRemoveMember(arg0: UInt, sender: ChannelId? = null) {}
	open fun onChangeRank(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onChangeRankAvocate(arg0: UInt, sender: ChannelId? = null) {}
	open fun onStatusRequest(sender: ChannelId? = null) {}
	open fun onRequestLeaderboardTopTen(sender: ChannelId? = null) {}
	open fun onGuildStatusUpdate(arg0: UInt, arg1: String, arg2: UByte, sender: ChannelId? = null) {}
	open fun onGuildNameReject(arg0: UInt, sender: ChannelId? = null) {}
	open fun onGuildNameChange(arg0: String, arg1: UByte, sender: ChannelId? = null) {}
	open fun onReceiveMember(arg0: MemberInfo, sender: ChannelId? = null) {}
	open fun onReceiveMembersDone(sender: ChannelId? = null) {}
	open fun onGuildAcceptInvite(arg0: UInt, sender: ChannelId? = null) {}
	open fun onGuildDeclineInvite(arg0: UInt, sender: ChannelId? = null) {}
	open fun onUpdateRep(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onLeaderboardTopTen(arg0: List<leaderBoardRecord>, sender: ChannelId? = null) {}
	open fun onRecvAvatarOnline(arg0: UInt, arg1: String, arg2: UInt, arg3: UInt, sender: ChannelId? = null) {}
	open fun onRecvAvatarOffline(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onSendChat(arg0: String, arg1: UByte, arg2: UInt, sender: ChannelId? = null) {}
	open fun onSendWLChat(arg0: String, arg1: UByte, arg2: UInt, sender: ChannelId? = null) {}
	open fun onSendSC(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSendSCQuest(arg0: UShort, arg1: UShort, arg2: UShort, sender: ChannelId? = null) {}
	open fun onRecvChat(arg0: UInt, arg1: String, arg2: UByte, arg3: UInt, sender: ChannelId? = null) {}
	open fun onRecvWLChat(arg0: UInt, arg1: String, arg2: UByte, arg3: UInt, sender: ChannelId? = null) {}
	open fun onRecvSC(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onRecvSCQuest(arg0: UInt, arg1: UShort, arg2: UShort, arg3: UShort, sender: ChannelId? = null) {}
	open fun onSendTokenRequest(sender: ChannelId? = null) {}
	open fun onRecvTokenGenerated(arg0: String, sender: ChannelId? = null) {}
	open fun onRecvTokenInviteValue(arg0: String, arg1: Byte, sender: ChannelId? = null) {}
	open fun onSendTokenForJoinRequest(arg0: String, arg1: String, sender: ChannelId? = null) {}
	open fun onRecvTokenRedeemMessage(arg0: String, sender: ChannelId? = null) {}
	open fun onRecvTokenRedeemedByPlayerMessage(arg0: String, sender: ChannelId? = null) {}
	open fun onSendTokenRValue(arg0: String, arg1: Byte, sender: ChannelId? = null) {}
	open fun onSendPermToken(sender: ChannelId? = null) {}
	open fun onSendNonPermTokenCount(sender: ChannelId? = null) {}
	open fun onRecvPermToken(arg0: String, sender: ChannelId? = null) {}
	open fun onRecvNonPermTokenCount(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSendClearTokens(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSendAvatarBandId(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onRecvMemberAdded(arg0: MemberInfo, arg1: UInt, arg2: String, sender: ChannelId? = null) {}
	open fun onNotifyGuildKicksMaxed(sender: ChannelId? = null) {}
	open fun onRecvMemberRemoved(arg0: UInt, arg1: UInt, arg2: String, arg3: String, sender: ChannelId? = null) {}
	open fun onRecvMemberUpdateName(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onRecvMemberUpdateRank(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: UByte, arg5: bool, sender: ChannelId? = null) {}
	open fun onRecvMemberUpdateBandId(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onAvatarOnline(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onAvatarOffline(arg0: UInt, sender: ChannelId? = null) {}
	open fun onReflectTeleportQuery(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, arg4: UInt, sender: ChannelId? = null) {}
	open fun onTeleportQuery(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, arg4: UInt, sender: ChannelId? = null) {}
	open fun onReflectTeleportResponse(arg0: UInt, arg1: Byte, arg2: UInt, arg3: UInt, arg4: UInt, sender: ChannelId? = null) {}
	open fun onTeleportResponse(arg0: UInt, arg1: Byte, arg2: UInt, arg3: UInt, arg4: UInt, sender: ChannelId? = null) {}
	open fun onRequestGuildMatesList(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onUpdateAvatarName(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onAvatarDeleted(arg0: UInt, sender: ChannelId? = null) {}
}

open class AvatarFriendsManager(doId: DOId): DistributedObjectBase(doId, 37U.toDClassId()) {
	companion object {
		val dClassId = 37U.toDClassId()

		object Fields {
			val online: FieldId = 299U.toFieldId()
			val requestInvite: FieldId = 300U.toFieldId()
			val friendConsidering: FieldId = 301U.toFieldId()
			val invitationFrom: FieldId = 302U.toFieldId()
			val retractInvite: FieldId = 303U.toFieldId()
			val rejectInvite: FieldId = 304U.toFieldId()
			val requestRemove: FieldId = 305U.toFieldId()
			val rejectRemove: FieldId = 306U.toFieldId()
			val updateAvatarFriend: FieldId = 307U.toFieldId()
			val removeAvatarFriend: FieldId = 308U.toFieldId()
			val updateAvatarName: FieldId = 309U.toFieldId()
			val avatarOnline: FieldId = 310U.toFieldId()
			val avatarOffline: FieldId = 311U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		299U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onOnline(sender)
			}
		),
		300U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestInvite(it.toUInt32()!!, sender)
			}
		),
		301U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onFriendConsidering(it.toUInt32()!!, sender)
			}
		),
		302U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onInvitationFrom(t0, t1, sender)
				}
			}
		),
		303U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRetractInvite(it.toUInt32()!!, sender)
			}
		),
		304U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRejectInvite(t0, t1, sender)
				}
			}
		),
		305U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestRemove(it.toUInt32()!!, sender)
			}
		),
		306U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRejectRemove(t0, t1, sender)
				}
			}
		),
		307U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = with(AvatarFriendInfo) { fromFieldValue(it)}
				onUpdateAvatarFriend(t0, t1, sender)
				}
			}
		),
		308U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRemoveAvatarFriend(it.toUInt32()!!, sender)
			}
		),
		309U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onUpdateAvatarName(t0, t1, sender)
				}
			}
		),
		310U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = with(bool) { fromFieldValue(it)}
				val t4 = with(bool) { fromFieldValue(it)}
				val t5 = values[5].toStringValue()!!
				val t6 = values[6].toStringValue()!!
				onAvatarOnline(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		311U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onAvatarOffline(it.toUInt32()!!, sender)
			}
		),
	)

	fun online() {
		setField(299U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestInvite(arg0: UInt, ) {
		setField(300U.toFieldId(), arg0.toFieldValue())
	}

	fun friendConsidering(arg0: UInt, ) {
		setField(301U.toFieldId(), arg0.toFieldValue())
	}

	fun invitationFrom(arg0: UInt, arg1: String, ) {
		setField(302U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun retractInvite(arg0: UInt, ) {
		setField(303U.toFieldId(), arg0.toFieldValue())
	}

	fun rejectInvite(arg0: UInt, arg1: UInt, ) {
		setField(304U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestRemove(arg0: UInt, ) {
		setField(305U.toFieldId(), arg0.toFieldValue())
	}

	fun rejectRemove(arg0: UInt, arg1: UInt, ) {
		setField(306U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun updateAvatarFriend(arg0: UInt, arg1: AvatarFriendInfo, ) {
		setField(307U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			with(AvatarFriendInfo) { arg1.toFieldValue()}, 
				))
	}

	fun removeAvatarFriend(arg0: UInt, ) {
		setField(308U.toFieldId(), arg0.toFieldValue())
	}

	fun updateAvatarName(arg0: UInt, arg1: String, ) {
		setField(309U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun avatarOnline(arg0: UInt, arg1: UInt, arg2: String, arg3: bool, arg4: bool, arg5: String, arg6: String, ) {
		setField(310U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			with(bool) { arg3.toFieldValue()}, 
			with(bool) { arg4.toFieldValue()}, 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
				))
	}

	fun avatarOffline(arg0: UInt, ) {
		setField(311U.toFieldId(), arg0.toFieldValue())
	}

	open fun onOnline(sender: ChannelId? = null) {}
	open fun onRequestInvite(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFriendConsidering(arg0: UInt, sender: ChannelId? = null) {}
	open fun onInvitationFrom(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onRetractInvite(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRejectInvite(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onRequestRemove(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRejectRemove(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onUpdateAvatarFriend(arg0: UInt, arg1: AvatarFriendInfo, sender: ChannelId? = null) {}
	open fun onRemoveAvatarFriend(arg0: UInt, sender: ChannelId? = null) {}
	open fun onUpdateAvatarName(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onAvatarOnline(arg0: UInt, arg1: UInt, arg2: String, arg3: bool, arg4: bool, arg5: String, arg6: String, sender: ChannelId? = null) {}
	open fun onAvatarOffline(arg0: UInt, sender: ChannelId? = null) {}
}

open class PlayerFriendsManager(doId: DOId): DistributedObjectBase(doId, 38U.toDClassId()) {
	companion object {
		val dClassId = 38U.toDClassId()

		object Fields {
			val requestInvite: FieldId = 312U.toFieldId()
			val invitationFrom: FieldId = 313U.toFieldId()
			val retractInvite: FieldId = 314U.toFieldId()
			val invitationResponse: FieldId = 315U.toFieldId()
			val requestDecline: FieldId = 316U.toFieldId()
			val requestDeclineWithReason: FieldId = 317U.toFieldId()
			val requestRemove: FieldId = 318U.toFieldId()
			val secretResponse: FieldId = 319U.toFieldId()
			val rejectSecret: FieldId = 320U.toFieldId()
			val rejectUseSecret: FieldId = 321U.toFieldId()
			val updatePlayerFriend: FieldId = 322U.toFieldId()
			val removePlayerFriend: FieldId = 323U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		312U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt8()!!
				onRequestInvite(t0, t1, t2, sender)
				}
			}
		),
		313U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onInvitationFrom(t0, t1, sender)
				}
			}
		),
		314U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRetractInvite(it.toUInt32()!!, sender)
			}
		),
		315U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toUInt32()!!
				onInvitationResponse(t0, t1, t2, sender)
				}
			}
		),
		316U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRequestDecline(t0, t1, sender)
				}
			}
		),
		317U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onRequestDeclineWithReason(t0, t1, t2, sender)
				}
			}
		),
		318U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRequestRemove(t0, t1, sender)
				}
			}
		),
		319U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSecretResponse(it.toStringValue()!!, sender)
			}
		),
		320U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectSecret(it.toStringValue()!!, sender)
			}
		),
		321U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectUseSecret(it.toStringValue()!!, sender)
			}
		),
		322U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt32, ), FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = with(FriendInfo) { fromFieldValue(it)}
				val t2 = values[2].toUInt8()!!
				onUpdatePlayerFriend(t0, t1, t2, sender)
				}
			}
		),
		323U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRemovePlayerFriend(it.toUInt32()!!, sender)
			}
		),
	)

	fun requestInvite(arg0: UInt, arg1: UInt, arg2: UByte, ) {
		setField(312U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun invitationFrom(arg0: UInt, arg1: String, ) {
		setField(313U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun retractInvite(arg0: UInt, ) {
		setField(314U.toFieldId(), arg0.toFieldValue())
	}

	fun invitationResponse(arg0: UInt, arg1: UShort, arg2: UInt, ) {
		setField(315U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestDecline(arg0: UInt, arg1: UInt, ) {
		setField(316U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestDeclineWithReason(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(317U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestRemove(arg0: UInt, arg1: UInt, ) {
		setField(318U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun secretResponse(arg0: String, ) {
		setField(319U.toFieldId(), arg0.toFieldValue())
	}

	fun rejectSecret(arg0: String, ) {
		setField(320U.toFieldId(), arg0.toFieldValue())
	}

	fun rejectUseSecret(arg0: String, ) {
		setField(321U.toFieldId(), arg0.toFieldValue())
	}

	fun updatePlayerFriend(arg0: UInt, arg1: FriendInfo, arg2: UByte, ) {
		setField(322U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			with(FriendInfo) { arg1.toFieldValue()}, 
			arg2.toFieldValue(), 
				))
	}

	fun removePlayerFriend(arg0: UInt, ) {
		setField(323U.toFieldId(), arg0.toFieldValue())
	}

	open fun onRequestInvite(arg0: UInt, arg1: UInt, arg2: UByte, sender: ChannelId? = null) {}
	open fun onInvitationFrom(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onRetractInvite(arg0: UInt, sender: ChannelId? = null) {}
	open fun onInvitationResponse(arg0: UInt, arg1: UShort, arg2: UInt, sender: ChannelId? = null) {}
	open fun onRequestDecline(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onRequestDeclineWithReason(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onRequestRemove(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSecretResponse(arg0: String, sender: ChannelId? = null) {}
	open fun onRejectSecret(arg0: String, sender: ChannelId? = null) {}
	open fun onRejectUseSecret(arg0: String, sender: ChannelId? = null) {}
	open fun onUpdatePlayerFriend(arg0: UInt, arg1: FriendInfo, arg2: UByte, sender: ChannelId? = null) {}
	open fun onRemovePlayerFriend(arg0: UInt, sender: ChannelId? = null) {}
}

open class SnapshotDispatcher(doId: DOId): DistributedObjectBase(doId, 39U.toDClassId()) {
	companion object {
		val dClassId = 39U.toDClassId()

		object Fields {
			val online: FieldId = 324U.toFieldId()
			val requestRender: FieldId = 325U.toFieldId()
			val avatarDeleted: FieldId = 326U.toFieldId()
			val requestNewWork: FieldId = 327U.toFieldId()
			val errorFetchingAvatar: FieldId = 328U.toFieldId()
			val errorRenderingAvatar: FieldId = 329U.toFieldId()
			val renderSuccessful: FieldId = 330U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		324U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onOnline(sender)
			}
		),
		325U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRequestRender(it.toUInt32()!!, sender)
			}
		),
		326U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onAvatarDeleted(it.toUInt32()!!, sender)
			}
		),
		327U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRequestNewWork(it.toUInt32()!!, sender)
			}
		),
		328U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onErrorFetchingAvatar(t0, t1, sender)
				}
			}
		),
		329U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onErrorRenderingAvatar(t0, t1, sender)
				}
			}
		),
		330U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRenderSuccessful(t0, t1, sender)
				}
			}
		),
	)

	fun online() {
		setField(324U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestRender(arg0: UInt, ) {
		setField(325U.toFieldId(), arg0.toFieldValue())
	}

	fun avatarDeleted(arg0: UInt, ) {
		setField(326U.toFieldId(), arg0.toFieldValue())
	}

	fun requestNewWork(arg0: UInt, ) {
		setField(327U.toFieldId(), arg0.toFieldValue())
	}

	fun errorFetchingAvatar(arg0: UInt, arg1: UInt, ) {
		setField(328U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun errorRenderingAvatar(arg0: UInt, arg1: UInt, ) {
		setField(329U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun renderSuccessful(arg0: UInt, arg1: UInt, ) {
		setField(330U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onOnline(sender: ChannelId? = null) {}
	open fun onRequestRender(arg0: UInt, sender: ChannelId? = null) {}
	open fun onAvatarDeleted(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestNewWork(arg0: UInt, sender: ChannelId? = null) {}
	open fun onErrorFetchingAvatar(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onErrorRenderingAvatar(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onRenderSuccessful(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
}

open class SnapshotRenderer(doId: DOId): DistributedObjectBase(doId, 40U.toDClassId()) {
	companion object {
		val dClassId = 40U.toDClassId()

		object Fields {
			val online: FieldId = 331U.toFieldId()
			val requestRender: FieldId = 332U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		331U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onOnline(sender)
			}
		),
		332U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				onRequestRender(t0, t1, t2, sender)
				}
			}
		),
	)

	fun online() {
		setField(331U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestRender(arg0: UInt, arg1: UInt, arg2: String, ) {
		setField(332U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onOnline(sender: ChannelId? = null) {}
	open fun onRequestRender(arg0: UInt, arg1: UInt, arg2: String, sender: ChannelId? = null) {}
}

open class SpeedchatRelay(doId: DOId): DistributedObjectBase(doId, 41U.toDClassId()) {
	companion object {
		val dClassId = 41U.toDClassId()

		object Fields {
			val forwardSpeedchat: FieldId = 333U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		333U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toStringValue()!!
				val t5 = values[5].toUInt8()!!
				onForwardSpeedchat(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
	)

	fun forwardSpeedchat(arg0: UInt, arg1: UByte, arg2: List<UInt>, arg3: UInt, arg4: String, arg5: UByte, ) {
		setField(333U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
				))
	}

	open fun onForwardSpeedchat(arg0: UInt, arg1: UByte, arg2: List<UInt>, arg3: UInt, arg4: String, arg5: UByte, sender: ChannelId? = null) {}
}

open class CentralLogger(doId: DOId): DistributedObjectBase(doId, 42U.toDClassId()) {
	companion object {
		val dClassId = 42U.toDClassId()

		object Fields {
			val sendMessage: FieldId = 334U.toFieldId()
			val logAIGarbage: FieldId = 335U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		334U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				onSendMessage(t0, t1, t2, t3, sender)
				}
			}
		),
		335U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onLogAIGarbage(sender)
			}
		),
	)

	fun sendMessage(arg0: String, arg1: String, arg2: UInt, arg3: UInt, ) {
		setField(334U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun logAIGarbage() {
		setField(335U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSendMessage(arg0: String, arg1: String, arg2: UInt, arg3: UInt, sender: ChannelId? = null) {}
	open fun onLogAIGarbage(sender: ChannelId? = null) {}
}

open class SettingsMgr(doId: DOId): DistributedObjectBase(doId, 43U.toDClassId()) {
	companion object {
		val dClassId = 43U.toDClassId()

		object Fields {
			val requestAllChangedSettings: FieldId = 336U.toFieldId()
			val settingChange: FieldId = 337U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		336U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestAllChangedSettings(sender)
			}
		),
		337U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				onSettingChange(t0, t1, sender)
				}
			}
		),
	)

	fun requestAllChangedSettings() {
		setField(336U.toFieldId(), FieldValue.EmptyValue)
	}

	fun settingChange(arg0: String, arg1: String, ) {
		setField(337U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onRequestAllChangedSettings(sender: ChannelId? = null) {}
	open fun onSettingChange(arg0: String, arg1: String, sender: ChannelId? = null) {}
}

open class StatusDatabase(doId: DOId): DistributedObjectBase(doId, 44U.toDClassId()) {
	companion object {
		val dClassId = 44U.toDClassId()

		object Fields {
			val requestOfflineAvatarStatus: FieldId = 338U.toFieldId()
			val recvOfflineAvatarStatus: FieldId = 339U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		338U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestOfflineAvatarStatus(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		339U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRecvOfflineAvatarStatus(t0, t1, sender)
				}
			}
		),
	)

	fun requestOfflineAvatarStatus(arg0: List<UInt>, ) {
		setField(338U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun recvOfflineAvatarStatus(arg0: UInt, arg1: UInt, ) {
		setField(339U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onRequestOfflineAvatarStatus(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onRecvOfflineAvatarStatus(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
}

open class CallbackObject(doId: DOId): DistributedObjectBase(doId, 45U.toDClassId()) {
	companion object {
		val dClassId = 45U.toDClassId()

		object Fields {
			val callback: FieldId = 340U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		340U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = with(bool) { fromFieldValue(it)}
				val t2 = values[2].toUInt8()!!
				onCallback(t0, t1, t2, sender)
				}
			}
		),
	)

	fun callback(arg0: UInt, arg1: bool, arg2: UByte, ) {
		setField(340U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			with(bool) { arg1.toFieldValue()}, 
			arg2.toFieldValue(), 
				))
	}

	open fun onCallback(arg0: UInt, arg1: bool, arg2: UByte, sender: ChannelId? = null) {}
}

open class AstronLoginManager(doId: DOId): DistributedObjectBase(doId, 47U.toDClassId()) {
	companion object {
		val dClassId = 47U.toDClassId()

		object Fields {
			val requestLogin: FieldId = 346U.toFieldId()
			val loginResponse: FieldId = 347U.toFieldId()
			val requestAvatarList: FieldId = 348U.toFieldId()
			val avatarListResponse: FieldId = 349U.toFieldId()
			val createAvatar: FieldId = 350U.toFieldId()
			val createAvatarResponse: FieldId = 351U.toFieldId()
			val setNamePattern: FieldId = 352U.toFieldId()
			val namePatternAnswer: FieldId = 353U.toFieldId()
			val setNameTyped: FieldId = 354U.toFieldId()
			val nameTypedResponse: FieldId = 355U.toFieldId()
			val acknowledgeAvatarName: FieldId = 356U.toFieldId()
			val acknowledgeAvatarNameResponse: FieldId = 357U.toFieldId()
			val requestRemoveAvatar: FieldId = 358U.toFieldId()
			val requestPlayAvatar: FieldId = 359U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		346U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestLogin(it.toStringValue()!!, sender)
			}
		),
		347U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onLoginResponse(it.toBlob()!!, sender)
			}
		),
		348U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestAvatarList(sender)
			}
		),
		349U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Blob, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onAvatarListResponse(with(PotentialAvatar) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		350U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toUInt8()!!
				onCreateAvatar(t0, t1, sender)
				}
			}
		),
		351U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onCreateAvatarResponse(it.toUInt32()!!, sender)
			}
		),
		352U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toInt16()!!
				val t4 = values[4].toUInt8()!!
				val t5 = values[5].toInt16()!!
				val t6 = values[6].toUInt8()!!
				val t7 = values[7].toInt16()!!
				val t8 = values[8].toUInt8()!!
				onSetNamePattern(t0, t1, t2, t3, t4, t5, t6, t7, t8, sender)
				}
			}
		),
		353U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onNamePatternAnswer(t0, t1, sender)
				}
			}
		),
		354U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onSetNameTyped(t0, t1, sender)
				}
			}
		),
		355U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onNameTypedResponse(t0, t1, sender)
				}
			}
		),
		356U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAcknowledgeAvatarName(it.toUInt32()!!, sender)
			}
		),
		357U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onAcknowledgeAvatarNameResponse(sender)
			}
		),
		358U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestRemoveAvatar(it.toUInt32()!!, sender)
			}
		),
		359U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestPlayAvatar(it.toUInt32()!!, sender)
			}
		),
	)

	fun requestLogin(arg0: String, ) {
		setField(346U.toFieldId(), arg0.toFieldValue())
	}

	fun loginResponse(arg0: ByteArray, ) {
		setField(347U.toFieldId(), arg0.toFieldValue())
	}

	fun requestAvatarList() {
		setField(348U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarListResponse(arg0: List<PotentialAvatar>, ) {
		setField(349U.toFieldId(), with(PotentialAvatar) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Blob, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun createAvatar(arg0: ByteArray, arg1: UByte, ) {
		setField(350U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun createAvatarResponse(arg0: UInt, ) {
		setField(351U.toFieldId(), arg0.toFieldValue())
	}

	fun setNamePattern(arg0: UInt, arg1: Short, arg2: UByte, arg3: Short, arg4: UByte, arg5: Short, arg6: UByte, arg7: Short, arg8: UByte, ) {
		setField(352U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
			arg7.toFieldValue(), 
			arg8.toFieldValue(), 
				))
	}

	fun namePatternAnswer(arg0: UInt, arg1: UByte, ) {
		setField(353U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setNameTyped(arg0: UInt, arg1: String, ) {
		setField(354U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun nameTypedResponse(arg0: UInt, arg1: UByte, ) {
		setField(355U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun acknowledgeAvatarName(arg0: UInt, ) {
		setField(356U.toFieldId(), arg0.toFieldValue())
	}

	fun acknowledgeAvatarNameResponse() {
		setField(357U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestRemoveAvatar(arg0: UInt, ) {
		setField(358U.toFieldId(), arg0.toFieldValue())
	}

	fun requestPlayAvatar(arg0: UInt, ) {
		setField(359U.toFieldId(), arg0.toFieldValue())
	}

	open fun onRequestLogin(arg0: String, sender: ChannelId? = null) {}
	open fun onLoginResponse(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onRequestAvatarList(sender: ChannelId? = null) {}
	open fun onAvatarListResponse(arg0: List<PotentialAvatar>, sender: ChannelId? = null) {}
	open fun onCreateAvatar(arg0: ByteArray, arg1: UByte, sender: ChannelId? = null) {}
	open fun onCreateAvatarResponse(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetNamePattern(arg0: UInt, arg1: Short, arg2: UByte, arg3: Short, arg4: UByte, arg5: Short, arg6: UByte, arg7: Short, arg8: UByte, sender: ChannelId? = null) {}
	open fun onNamePatternAnswer(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetNameTyped(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onNameTypedResponse(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onAcknowledgeAvatarName(arg0: UInt, sender: ChannelId? = null) {}
	open fun onAcknowledgeAvatarNameResponse(sender: ChannelId? = null) {}
	open fun onRequestRemoveAvatar(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestPlayAvatar(arg0: UInt, sender: ChannelId? = null) {}
}

open class ToontownDistrict(doId: DOId): DistributedObjectBase(doId, 61U.toDClassId()) {
	companion object {
		val dClassId = 61U.toDClassId()

		object Fields {
			val setParentingRules: FieldId = 420U.toFieldId()
			val allowAHNNLog: FieldId = 421U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		420U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				onSetParentingRules(t0, t1, sender)
				}
			}
		),
		421U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAllowAHNNLog(with(bool) { fromFieldValue(it)}, sender)
			}
		),
	)

	fun setParentingRules(arg0: String, arg1: String, ) {
		setField(420U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun allowAHNNLog(arg0: bool, ) {
		setField(421U.toFieldId(), with(bool) { arg0.toFieldValue()})
	}

	open fun onSetParentingRules(arg0: String, arg1: String, sender: ChannelId? = null) {}
	open fun onAllowAHNNLog(arg0: bool, sender: ChannelId? = null) {}
}

open class ToontownDistrictStats(doId: DOId): DistributedObjectBase(doId, 62U.toDClassId()) {
	companion object {
		val dClassId = 62U.toDClassId()

		object Fields {
			val settoontownDistrictId: FieldId = 422U.toFieldId()
			val setAvatarCount: FieldId = 423U.toFieldId()
			val setNewAvatarCount: FieldId = 424U.toFieldId()
			val setStats: FieldId = 425U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		422U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSettoontownDistrictId(it.toUInt32()!!, sender)
			}
		),
		423U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarCount(it.toUInt32()!!, sender)
			}
		),
		424U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetNewAvatarCount(it.toUInt32()!!, sender)
			}
		),
		425U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetStats(t0, t1, sender)
				}
			}
		),
	)

	fun settoontownDistrictId(arg0: UInt, ) {
		setField(422U.toFieldId(), arg0.toFieldValue())
	}

	fun setAvatarCount(arg0: UInt, ) {
		setField(423U.toFieldId(), arg0.toFieldValue())
	}

	fun setNewAvatarCount(arg0: UInt, ) {
		setField(424U.toFieldId(), arg0.toFieldValue())
	}

	fun setStats(arg0: UInt, arg1: UInt, ) {
		val arg0Value = arg0.toFieldValue()
		val arg1Value = arg1.toFieldValue()

		setField(425U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	open fun onSettoontownDistrictId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetAvatarCount(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetNewAvatarCount(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetStats(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
}

open class WelcomeValleyManager(doId: DOId): DistributedObjectBase(doId, 63U.toDClassId()) {
	companion object {
		val dClassId = 63U.toDClassId()

		object Fields {
			val clientSetZone: FieldId = 426U.toFieldId()
			val requestZoneIdMessage: FieldId = 427U.toFieldId()
			val requestZoneIdResponse: FieldId = 428U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		426U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onClientSetZone(it.toUInt32()!!, sender)
			}
		),
		427U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onRequestZoneIdMessage(t0, t1, sender)
				}
			}
		),
		428U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onRequestZoneIdResponse(t0, t1, sender)
				}
			}
		),
	)

	fun clientSetZone(arg0: UInt, ) {
		setField(426U.toFieldId(), arg0.toFieldValue())
	}

	fun requestZoneIdMessage(arg0: UInt, arg1: UShort, ) {
		setField(427U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestZoneIdResponse(arg0: UInt, arg1: UShort, ) {
		setField(428U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onClientSetZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestZoneIdMessage(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onRequestZoneIdResponse(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
}

open class DistributedAnimatedProp(doId: DOId): DistributedObjectBase(doId, 64U.toDClassId()) {
	companion object {
		val dClassId = 64U.toDClassId()

		object Fields {
			val setPropId: FieldId = 429U.toFieldId()
			val setAvatarInteract: FieldId = 430U.toFieldId()
			val requestInteract: FieldId = 431U.toFieldId()
			val rejectInteract: FieldId = 432U.toFieldId()
			val requestExit: FieldId = 433U.toFieldId()
			val avatarExit: FieldId = 434U.toFieldId()
			val setState: FieldId = 435U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		429U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPropId(it.toUInt16()!!, sender)
			}
		),
		430U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarInteract(it.toUInt32()!!, sender)
			}
		),
		431U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestInteract(sender)
			}
		),
		432U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectInteract(sender)
			}
		),
		433U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		434U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAvatarExit(it.toUInt32()!!, sender)
			}
		),
		435U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
	)

	fun setPropId(arg0: UShort, ) {
		setField(429U.toFieldId(), arg0.toFieldValue())
	}

	fun setAvatarInteract(arg0: UInt, ) {
		setField(430U.toFieldId(), arg0.toFieldValue())
	}

	fun requestInteract() {
		setField(431U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rejectInteract() {
		setField(432U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestExit() {
		setField(433U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarExit(arg0: UInt, ) {
		setField(434U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: String, arg1: Short, ) {
		setField(435U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetPropId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetAvatarInteract(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestInteract(sender: ChannelId? = null) {}
	open fun onRejectInteract(sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onAvatarExit(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
}

open class DistributedToon(doId: DOId): DistributedObjectBase(doId, 65U.toDClassId()) {
	companion object {
		val dClassId = 65U.toDClassId()

		object Fields {
			val setDNAString: FieldId = 436U.toFieldId()
			val setGM: FieldId = 437U.toFieldId()
			val setMaxBankMoney: FieldId = 438U.toFieldId()
			val setBankMoney: FieldId = 439U.toFieldId()
			val setMaxMoney: FieldId = 440U.toFieldId()
			val setMoney: FieldId = 441U.toFieldId()
			val setMaxHp: FieldId = 442U.toFieldId()
			val setHp: FieldId = 443U.toFieldId()
			val toonUp: FieldId = 444U.toFieldId()
			val takeDamage: FieldId = 445U.toFieldId()
			val setBattleId: FieldId = 446U.toFieldId()
			val setExperience: FieldId = 447U.toFieldId()
			val setMaxCarry: FieldId = 448U.toFieldId()
			val setTrackAccess: FieldId = 449U.toFieldId()
			val setTrackProgress: FieldId = 450U.toFieldId()
			val setTrackBonusLevel: FieldId = 451U.toFieldId()
			val setInventory: FieldId = 452U.toFieldId()
			val setMaxNPCFriends: FieldId = 453U.toFieldId()
			val setNPCFriendsDict: FieldId = 454U.toFieldId()
			val setDefaultShard: FieldId = 455U.toFieldId()
			val setDefaultZone: FieldId = 456U.toFieldId()
			val setShtickerBook: FieldId = 457U.toFieldId()
			val setZonesVisited: FieldId = 458U.toFieldId()
			val setHoodsVisited: FieldId = 459U.toFieldId()
			val setInterface: FieldId = 460U.toFieldId()
			val setLastHood: FieldId = 461U.toFieldId()
			val setTutorialAck: FieldId = 462U.toFieldId()
			val setMaxClothes: FieldId = 463U.toFieldId()
			val setClothesTopsList: FieldId = 464U.toFieldId()
			val setClothesBottomsList: FieldId = 465U.toFieldId()
			val setMaxAccessories: FieldId = 466U.toFieldId()
			val setHatList: FieldId = 467U.toFieldId()
			val setGlassesList: FieldId = 468U.toFieldId()
			val setBackpackList: FieldId = 469U.toFieldId()
			val setShoesList: FieldId = 470U.toFieldId()
			val setHat: FieldId = 471U.toFieldId()
			val setGlasses: FieldId = 472U.toFieldId()
			val setBackpack: FieldId = 473U.toFieldId()
			val setShoes: FieldId = 474U.toFieldId()
			val setGardenSpecials: FieldId = 475U.toFieldId()
			val setEarnedExperience: FieldId = 476U.toFieldId()
			val setTunnelIn: FieldId = 477U.toFieldId()
			val setTunnelOut: FieldId = 478U.toFieldId()
			val setAnimState: FieldId = 479U.toFieldId()
			val setEmoteState: FieldId = 480U.toFieldId()
			val setEmoteAccess: FieldId = 481U.toFieldId()
			val setCustomMessages: FieldId = 482U.toFieldId()
			val setSleepAutoReply: FieldId = 483U.toFieldId()
			val setResistanceMessages: FieldId = 484U.toFieldId()
			val setPetTrickPhrases: FieldId = 485U.toFieldId()
			val setCatalogSchedule: FieldId = 486U.toFieldId()
			val setCatalog: FieldId = 487U.toFieldId()
			val setMailboxContents: FieldId = 488U.toFieldId()
			val setDeliverySchedule: FieldId = 489U.toFieldId()
			val setGiftSchedule: FieldId = 490U.toFieldId()
			val setAwardMailboxContents: FieldId = 491U.toFieldId()
			val setAwardSchedule: FieldId = 492U.toFieldId()
			val setAwardNotify: FieldId = 493U.toFieldId()
			val setCatalogNotify: FieldId = 494U.toFieldId()
			val playSplashEffect: FieldId = 495U.toFieldId()
			val setWhisperSCToontaskFrom: FieldId = 496U.toFieldId()
			val setSCToontask: FieldId = 497U.toFieldId()
			val reqSCResistance: FieldId = 498U.toFieldId()
			val setSCResistance: FieldId = 499U.toFieldId()
			val setSpeedChatStyleIndex: FieldId = 500U.toFieldId()
			val setTrophyScore: FieldId = 501U.toFieldId()
			val setTeleportAccess: FieldId = 502U.toFieldId()
			val checkTeleportAccess: FieldId = 503U.toFieldId()
			val battleSOS: FieldId = 504U.toFieldId()
			val teleportQuery: FieldId = 505U.toFieldId()
			val teleportResponse: FieldId = 506U.toFieldId()
			val teleportResponseToAI: FieldId = 507U.toFieldId()
			val teleportGiveup: FieldId = 508U.toFieldId()
			val teleportGreeting: FieldId = 509U.toFieldId()
			val setCogStatus: FieldId = 510U.toFieldId()
			val setCogCount: FieldId = 511U.toFieldId()
			val setCogRadar: FieldId = 512U.toFieldId()
			val setBuildingRadar: FieldId = 513U.toFieldId()
			val setCogLevels: FieldId = 514U.toFieldId()
			val setCogTypes: FieldId = 515U.toFieldId()
			val setCogParts: FieldId = 516U.toFieldId()
			val setCogMerits: FieldId = 517U.toFieldId()
			val setCogIndex: FieldId = 518U.toFieldId()
			val setDisguisePageFlag: FieldId = 519U.toFieldId()
			val setSosPageFlag: FieldId = 520U.toFieldId()
			val setHouseId: FieldId = 521U.toFieldId()
			val setQuests: FieldId = 522U.toFieldId()
			val setQuestHistory: FieldId = 523U.toFieldId()
			val setRewardHistory: FieldId = 524U.toFieldId()
			val setQuestCarryLimit: FieldId = 525U.toFieldId()
			val requestDeleteQuest: FieldId = 526U.toFieldId()
			val setCheesyEffect: FieldId = 527U.toFieldId()
			val setGhostMode: FieldId = 528U.toFieldId()
			val setPosIndex: FieldId = 529U.toFieldId()
			val setFishCollection: FieldId = 530U.toFieldId()
			val setMaxFishTank: FieldId = 531U.toFieldId()
			val setFishTank: FieldId = 532U.toFieldId()
			val setFishingRod: FieldId = 533U.toFieldId()
			val setFishingTrophies: FieldId = 534U.toFieldId()
			val setFlowerCollection: FieldId = 535U.toFieldId()
			val setFlowerBasket: FieldId = 536U.toFieldId()
			val setMaxFlowerBasket: FieldId = 537U.toFieldId()
			val setGardenTrophies: FieldId = 538U.toFieldId()
			val setShovel: FieldId = 539U.toFieldId()
			val setShovelSkill: FieldId = 540U.toFieldId()
			val setWateringCan: FieldId = 541U.toFieldId()
			val setWateringCanSkill: FieldId = 542U.toFieldId()
			val promoteShovel: FieldId = 543U.toFieldId()
			val promoteWateringCan: FieldId = 544U.toFieldId()
			val reactivateWater: FieldId = 545U.toFieldId()
			val presentPie: FieldId = 546U.toFieldId()
			val tossPie: FieldId = 547U.toFieldId()
			val pieSplat: FieldId = 548U.toFieldId()
			val setPieType: FieldId = 549U.toFieldId()
			val setNumPies: FieldId = 550U.toFieldId()
			val catalogGenClothes: FieldId = 551U.toFieldId()
			val catalogGenAccessories: FieldId = 552U.toFieldId()
			val setPetId: FieldId = 553U.toFieldId()
			val setPetMovie: FieldId = 554U.toFieldId()
			val setPetTutorialDone: FieldId = 555U.toFieldId()
			val setFishBingoTutorialDone: FieldId = 556U.toFieldId()
			val setFishBingoMarkTutorialDone: FieldId = 557U.toFieldId()
			val setKartBodyType: FieldId = 558U.toFieldId()
			val setKartBodyColor: FieldId = 559U.toFieldId()
			val setKartAccessoryColor: FieldId = 560U.toFieldId()
			val setKartEngineBlockType: FieldId = 561U.toFieldId()
			val setKartSpoilerType: FieldId = 562U.toFieldId()
			val setKartFrontWheelWellType: FieldId = 563U.toFieldId()
			val setKartBackWheelWellType: FieldId = 564U.toFieldId()
			val setKartRimType: FieldId = 565U.toFieldId()
			val setKartDecalType: FieldId = 566U.toFieldId()
			val updateKartDNAField: FieldId = 567U.toFieldId()
			val addOwnedAccessory: FieldId = 568U.toFieldId()
			val removeOwnedAccessory: FieldId = 569U.toFieldId()
			val setTickets: FieldId = 570U.toFieldId()
			val setKartingHistory: FieldId = 571U.toFieldId()
			val setKartingTrophies: FieldId = 572U.toFieldId()
			val setKartingPersonalBest: FieldId = 573U.toFieldId()
			val setKartingPersonalBest2: FieldId = 574U.toFieldId()
			val setKartAccessoriesOwned: FieldId = 575U.toFieldId()
			val setCurrentKart: FieldId = 576U.toFieldId()
			val squish: FieldId = 577U.toFieldId()
			val announceBingo: FieldId = 578U.toFieldId()
			val trickOrTreatTargetMet: FieldId = 579U.toFieldId()
			val trickOrTreatMilestoneMet: FieldId = 580U.toFieldId()
			val winterCarolingTargetMet: FieldId = 581U.toFieldId()
			val setCogSummonsEarned: FieldId = 582U.toFieldId()
			val reqCogSummons: FieldId = 583U.toFieldId()
			val cogSummonsResponse: FieldId = 584U.toFieldId()
			val reqUseSpecial: FieldId = 585U.toFieldId()
			val useSpecialResponse: FieldId = 586U.toFieldId()
			val setGardenStarted: FieldId = 587U.toFieldId()
			val sendToGolfCourse: FieldId = 588U.toFieldId()
			val setGolfHistory: FieldId = 589U.toFieldId()
			val setPackedGolfHoleBest: FieldId = 590U.toFieldId()
			val setGolfCourseBest: FieldId = 591U.toFieldId()
			val setUnlimitedSwing: FieldId = 592U.toFieldId()
			val logSuspiciousEvent: FieldId = 593U.toFieldId()
			val logMessage: FieldId = 594U.toFieldId()
			val forceLogoutWithNotify: FieldId = 595U.toFieldId()
			val setPinkSlips: FieldId = 596U.toFieldId()
			val setNametagStyle: FieldId = 597U.toFieldId()
			val setMail: FieldId = 598U.toFieldId()
			val setNumMailItems: FieldId = 599U.toFieldId()
			val setSimpleMailNotify: FieldId = 600U.toFieldId()
			val setInvites: FieldId = 601U.toFieldId()
			val setPartiesInvitedTo: FieldId = 602U.toFieldId()
			val setHostedParties: FieldId = 603U.toFieldId()
			val setPartyReplies: FieldId = 604U.toFieldId()
			val updateInvite: FieldId = 605U.toFieldId()
			val updateReply: FieldId = 606U.toFieldId()
			val setPartyCanStart: FieldId = 607U.toFieldId()
			val setPartyStatus: FieldId = 608U.toFieldId()
			val announcePartyStarted: FieldId = 609U.toFieldId()
			val setNeverStartedPartyRefunded: FieldId = 610U.toFieldId()
			val setDISLname: FieldId = 611U.toFieldId()
			val setDISLid: FieldId = 612U.toFieldId()
			val toggleSleep: FieldId = 613U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		436U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDNAString(it.toBlob()!!, sender)
			}
		),
		437U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGM(it.toUInt8()!!, sender)
			}
		),
		438U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMaxBankMoney(it.toInt16()!!, sender)
			}
		),
		439U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBankMoney(it.toInt16()!!, sender)
			}
		),
		440U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMaxMoney(it.toInt16()!!, sender)
			}
		),
		441U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMoney(it.toInt16()!!, sender)
			}
		),
		442U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMaxHp(it.toInt16()!!, sender)
			}
		),
		443U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHp(it.toInt16()!!, sender)
			}
		),
		444U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onToonUp(it.toUInt16()!!, sender)
			}
		),
		445U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onTakeDamage(it.toUInt16()!!, sender)
			}
		),
		446U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBattleId(it.toUInt32()!!, sender)
			}
		),
		447U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetExperience(it.toBlob()!!, sender)
			}
		),
		448U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetMaxCarry(it.toUInt8()!!, sender)
			}
		),
		449U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt16),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTrackAccess(it.toList()!!.map { it.toUInt16()!! }, sender)
			}
		),
		450U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt32()!!
				onSetTrackProgress(t0, t1, sender)
				}
			}
		),
		451U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Int8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTrackBonusLevel(it.toList()!!.map { it.toInt8()!! }, sender)
			}
		),
		452U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetInventory(it.toBlob()!!, sender)
			}
		),
		453U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetMaxNPCFriends(it.toUInt16()!!, sender)
			}
		),
		454U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetNPCFriendsDict(with(FriendEntry) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		455U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetDefaultShard(it.toUInt32()!!, sender)
			}
		),
		456U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetDefaultZone(it.toUInt32()!!, sender)
			}
		),
		457U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetShtickerBook(it.toBlob()!!, sender)
			}
		),
		458U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetZonesVisited(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		459U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetHoodsVisited(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		460U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetInterface(it.toBlob()!!, sender)
			}
		),
		461U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetLastHood(it.toUInt32()!!, sender)
			}
		),
		462U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetTutorialAck(it.toUInt8()!!, sender)
			}
		),
		463U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetMaxClothes(it.toUInt32()!!, sender)
			}
		),
		464U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetClothesTopsList(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		465U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetClothesBottomsList(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		466U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetMaxAccessories(it.toUInt32()!!, sender)
			}
		),
		467U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetHatList(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		468U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetGlassesList(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		469U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetBackpackList(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		470U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetShoesList(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		471U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				onSetHat(t0, t1, t2, sender)
				}
			}
		),
		472U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				onSetGlasses(t0, t1, t2, sender)
				}
			}
		),
		473U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				onSetBackpack(t0, t1, t2, sender)
				}
			}
		),
		474U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				onSetShoes(t0, t1, t2, sender)
				}
			}
		),
		475U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetGardenSpecials(with(gardenSpecial) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		476U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt16),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetEarnedExperience(it.toList()!!.map { it.toUInt16()!! }, sender)
			}
		),
		477U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				onSetTunnelIn(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		478U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(100.0f)
					}
				onSetTunnelOut(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		479U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toChar()!! }
				val t1 = values[1].toInt16()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetAnimState(t0, t1, t2, sender)
				}
			}
		),
		480U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetEmoteState(t0, t1, t2, sender)
				}
			}
		),
		481U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetEmoteAccess(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		482U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt16),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetCustomMessages(it.toList()!!.map { it.toUInt16()!! }, sender)
			}
		),
		483U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetSleepAutoReply(it.toUInt32()!!, sender)
			}
		),
		484U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.Int16)),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetResistanceMessages(with(pair16) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		485U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetPetTrickPhrases(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		486U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt32()!!
				onSetCatalogSchedule(t0, t1, sender)
				}
			}
		),
		487U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.Blob, FieldValue.Type.Blob, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toBlob()!!
				val t2 = values[2].toBlob()!!
				onSetCatalog(t0, t1, t2, sender)
				}
			}
		),
		488U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetMailboxContents(it.toBlob()!!, sender)
			}
		),
		489U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetDeliverySchedule(it.toBlob()!!, sender)
			}
		),
		490U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetGiftSchedule(it.toBlob()!!, sender)
			}
		),
		491U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetAwardMailboxContents(it.toBlob()!!, sender)
			}
		),
		492U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetAwardSchedule(it.toBlob()!!, sender)
			}
		),
		493U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetAwardNotify(it.toUInt8()!!, sender)
			}
		),
		494U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onSetCatalogNotify(t0, t1, sender)
				}
			}
		),
		495U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onPlaySplashEffect(t0, t1, t2, sender)
				}
			}
		),
		496U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt8()!!
				onSetWhisperSCToontaskFrom(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		497U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt8()!!
				onSetSCToontask(t0, t1, t2, t3, sender)
				}
			}
		),
		498U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onReqSCResistance(t0, t1, sender)
				}
			}
		),
		499U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onSetSCResistance(t0, t1, sender)
				}
			}
		),
		500U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetSpeedChatStyleIndex(it.toUInt8()!!, sender)
			}
		),
		501U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTrophyScore(it.toUInt16()!!, sender)
			}
		),
		502U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetTeleportAccess(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		503U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onCheckTeleportAccess(it.toUInt16()!!, sender)
			}
		),
		504U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onBattleSOS(it.toUInt32()!!, sender)
			}
		),
		505U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTeleportQuery(it.toUInt32()!!, sender)
			}
		),
		506U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt32()!!
				onTeleportResponse(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		507U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt32()!!
				val t5 = values[5].toUInt32()!!
				onTeleportResponseToAI(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		508U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTeleportGiveup(it.toUInt32()!!, sender)
			}
		),
		509U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onTeleportGreeting(it.toUInt32()!!, sender)
			}
		),
		510U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetCogStatus(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		511U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetCogCount(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		512U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetCogRadar(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		513U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetBuildingRadar(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		514U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCogLevels(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		515U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCogTypes(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		516U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCogParts(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		517U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt16),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetCogMerits(it.toList()!!.map { it.toUInt16()!! }, sender)
			}
		),
		518U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCogIndex(it.toInt8()!!, sender)
			}
		),
		519U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetDisguisePageFlag(it.toInt8()!!, sender)
			}
		),
		520U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSosPageFlag(it.toInt8()!!, sender)
			}
		),
		521U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetHouseId(it.toUInt32()!!, sender)
			}
		),
		522U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetQuests(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		523U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt16),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetQuestHistory(it.toList()!!.map { it.toUInt16()!! }, sender)
			}
		),
		524U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt16), ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toList()!!.map { it.toUInt16()!! }
				onSetRewardHistory(t0, t1, sender)
				}
			}
		),
		525U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetQuestCarryLimit(it.toUInt8()!!, sender)
			}
		),
		526U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestDeleteQuest(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		527U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onSetCheesyEffect(t0, t1, t2, sender)
				}
			}
		),
		528U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGhostMode(it.toUInt8()!!, sender)
			}
		),
		529U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetPosIndex(it.toUInt8()!!, sender)
			}
		),
		530U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt16), ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt8()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				val t2 = values[2].toList()!!.map { it.toUInt16()!! }
				onSetFishCollection(t0, t1, t2, sender)
				}
			}
		),
		531U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetMaxFishTank(it.toUInt8()!!, sender)
			}
		),
		532U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt16), ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt8()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				val t2 = values[2].toList()!!.map { it.toUInt16()!! }
				onSetFishTank(t0, t1, t2, sender)
				}
			}
		),
		533U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFishingRod(it.toUInt8()!!, sender)
			}
		),
		534U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetFishingTrophies(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		535U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt8()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				onSetFlowerCollection(t0, t1, sender)
				}
			}
		),
		536U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt8()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				onSetFlowerBasket(t0, t1, sender)
				}
			}
		),
		537U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetMaxFlowerBasket(it.toUInt8()!!, sender)
			}
		),
		538U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetGardenTrophies(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		539U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetShovel(it.toUInt8()!!, sender)
			}
		),
		540U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetShovelSkill(it.toUInt32()!!, sender)
			}
		),
		541U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetWateringCan(it.toUInt8()!!, sender)
			}
		),
		542U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetWateringCanSkill(it.toUInt32()!!, sender)
			}
		),
		543U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onPromoteShovel(it.toUInt8()!!, sender)
			}
		),
		544U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onPromoteWateringCan(it.toUInt8()!!, sender)
			}
		),
		545U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onReactivateWater(sender)
			}
		),
		546U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				val t6 = values[6].toInt32()!!
				onPresentPie(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		547U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				val t6 = values[6].toUInt8()!!
				val t7 = values[7].toUInt8()!!
				val t8 = values[8].toInt32()!!
				onTossPie(t0, t1, t2, t3, t4, t5, t6, t7, t8, sender)
				}
			}
		),
		548U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toUInt8()!!
				val t4 = values[4].toUInt8()!!
				val t5 = values[5].toInt32()!!
				onPieSplat(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		549U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPieType(it.toUInt8()!!, sender)
			}
		),
		550U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetNumPies(it.toUInt16()!!, sender)
			}
		),
		551U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onCatalogGenClothes(it.toUInt32()!!, sender)
			}
		),
		552U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onCatalogGenAccessories(it.toUInt32()!!, sender)
			}
		),
		553U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPetId(it.toUInt32()!!, sender)
			}
		),
		554U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onSetPetMovie(t0, t1, sender)
				}
			}
		),
		555U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetPetTutorialDone(it.toUInt8()!!, sender)
			}
		),
		556U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetFishBingoTutorialDone(it.toUInt8()!!, sender)
			}
		),
		557U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSetFishBingoMarkTutorialDone(it.toUInt8()!!, sender)
			}
		),
		558U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetKartBodyType(it.toInt8()!!, sender)
			}
		),
		559U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetKartBodyColor(it.toInt8()!!, sender)
			}
		),
		560U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetKartAccessoryColor(it.toInt8()!!, sender)
			}
		),
		561U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetKartEngineBlockType(it.toInt8()!!, sender)
			}
		),
		562U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetKartSpoilerType(it.toInt8()!!, sender)
			}
		),
		563U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetKartFrontWheelWellType(it.toInt8()!!, sender)
			}
		),
		564U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetKartBackWheelWellType(it.toInt8()!!, sender)
			}
		),
		565U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetKartRimType(it.toInt8()!!, sender)
			}
		),
		566U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetKartDecalType(it.toInt8()!!, sender)
			}
		),
		567U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				onUpdateKartDNAField(t0, t1, sender)
				}
			}
		),
		568U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onAddOwnedAccessory(it.toInt8()!!, sender)
			}
		),
		569U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onRemoveOwnedAccessory(it.toInt8()!!, sender)
			}
		),
		570U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTickets(it.toUInt32()!!, sender)
			}
		),
		571U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetKartingHistory(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		572U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetKartingTrophies(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		573U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetKartingPersonalBest(it.toList()!!.map { it.toUInt32()!!.transform {
						divide(1000.0f)
					} }, sender)
			}
		),
		574U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetKartingPersonalBest2(it.toList()!!.map { it.toUInt32()!!.transform {
						divide(1000.0f)
					} }, sender)
			}
		),
		575U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Int8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetKartAccessoriesOwned(it.toList()!!.map { it.toInt8()!! }, sender)
			}
		),
		576U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCurrentKart(it.toUInt32()!!, sender)
			}
		),
		577U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onSquish(it.toUInt8()!!, sender)
			}
		),
		578U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAnnounceBingo(sender)
			}
		),
		579U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onTrickOrTreatTargetMet(it.toUInt32()!!, sender)
			}
		),
		580U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onTrickOrTreatMilestoneMet(sender)
			}
		),
		581U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onWinterCarolingTargetMet(it.toUInt32()!!, sender)
			}
		),
		582U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetCogSummonsEarned(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		583U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toChar()!! }
				val t1 = values[1].toUInt32()!!
				onReqCogSummons(t0, t1, sender)
				}
			}
		),
		584U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onCogSummonsResponse(t0, t1, t2, sender)
				}
			}
		),
		585U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onReqUseSpecial(it.toInt32()!!, sender)
			}
		),
		586U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onUseSpecialResponse(it.toStringValue()!!, sender)
			}
		),
		587U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetGardenStarted(it.toUInt8()!!, sender)
			}
		),
		588U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSendToGolfCourse(it.toUInt32()!!, sender)
			}
		),
		589U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt16),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetGolfHistory(it.toList()!!.map { it.toUInt16()!! }, sender)
			}
		),
		590U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetPackedGolfHoleBest(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		591U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetGolfCourseBest(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		592U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					ownrecv = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetUnlimitedSwing(it.toUInt8()!!, sender)
			}
		),
		593U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Char),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onLogSuspiciousEvent(it.toList()!!.map { it.toChar()!! }, sender)
			}
		),
		594U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Char),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onLogMessage(it.toList()!!.map { it.toChar()!! }, sender)
			}
		),
		595U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onForceLogoutWithNotify(sender)
			}
		),
		596U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetPinkSlips(it.toUInt8()!!, sender)
			}
		),
		597U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetNametagStyle(it.toUInt8()!!, sender)
			}
		),
		598U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, )),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetMail(with(simpleMail) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		599U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetNumMailItems(it.toUInt32()!!, sender)
			}
		),
		600U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSimpleMailNotify(it.toUInt8()!!, sender)
			}
		),
		601U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt64, FieldValue.Type.UInt8, )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetInvites(with(invite) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		602U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.UInt8, )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetPartiesInvitedTo(with(party) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		603U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.UInt8, )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetHostedParties(with(party) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		604U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )), )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetPartyReplies(with(repliesForOneParty) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		605U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt64()!!
				val t1 = values[1].toUInt8()!!
				onUpdateInvite(t0, t1, sender)
				}
			}
		),
		606U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt64, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt64()!!
				val t1 = values[1].toUInt64()!!
				val t2 = values[2].toUInt8()!!
				onUpdateReply(t0, t1, t2, sender)
				}
			}
		),
		607U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt64,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onSetPartyCanStart(it.toUInt64()!!, sender)
			}
		),
		608U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt64()!!
				val t1 = values[1].toUInt8()!!
				onSetPartyStatus(t0, t1, sender)
				}
			}
		),
		609U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt64,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onAnnouncePartyStarted(it.toUInt64()!!, sender)
			}
		),
		610U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt64()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt16()!!
				onSetNeverStartedPartyRefunded(t0, t1, t2, sender)
				}
			}
		),
		611U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
				)
			),
			onChange = { it, sender ->
				onSetDISLname(it.toStringValue()!!, sender)
			}
		),
		612U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetDISLid(it.toUInt32()!!, sender)
			}
		),
		613U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ownrecv = true,
				)
			),
			onChange = { it, sender ->
				onToggleSleep(sender)
			}
		),
	)

	fun setDNAString(arg0: ByteArray, ) {
		setField(436U.toFieldId(), arg0.toFieldValue())
	}

	fun setGM(arg0: UByte, ) {
		setField(437U.toFieldId(), arg0.toFieldValue())
	}

	fun setMaxBankMoney(arg0: Short, ) {
		setField(438U.toFieldId(), arg0.toFieldValue())
	}

	fun setBankMoney(arg0: Short, ) {
		setField(439U.toFieldId(), arg0.toFieldValue())
	}

	fun setMaxMoney(arg0: Short, ) {
		setField(440U.toFieldId(), arg0.toFieldValue())
	}

	fun setMoney(arg0: Short, ) {
		setField(441U.toFieldId(), arg0.toFieldValue())
	}

	fun setMaxHp(arg0: Short, ) {
		setField(442U.toFieldId(), arg0.toFieldValue())
	}

	fun setHp(arg0: Short, ) {
		setField(443U.toFieldId(), arg0.toFieldValue())
	}

	fun toonUp(arg0: UShort, ) {
		setField(444U.toFieldId(), arg0.toFieldValue())
	}

	fun takeDamage(arg0: UShort, ) {
		setField(445U.toFieldId(), arg0.toFieldValue())
	}

	fun setBattleId(arg0: UInt, ) {
		setField(446U.toFieldId(), arg0.toFieldValue())
	}

	fun setExperience(arg0: ByteArray, ) {
		setField(447U.toFieldId(), arg0.toFieldValue())
	}

	fun setMaxCarry(arg0: UByte, ) {
		setField(448U.toFieldId(), arg0.toFieldValue())
	}

	fun setTrackAccess(arg0: List<UShort>, ) {
		setField(449U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setTrackProgress(arg0: Byte, arg1: UInt, ) {
		setField(450U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setTrackBonusLevel(arg0: List<Byte>, ) {
		setField(451U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.Int8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setInventory(arg0: ByteArray, ) {
		setField(452U.toFieldId(), arg0.toFieldValue())
	}

	fun setMaxNPCFriends(arg0: UShort, ) {
		setField(453U.toFieldId(), arg0.toFieldValue())
	}

	fun setNPCFriendsDict(arg0: List<FriendEntry>, ) {
		setField(454U.toFieldId(), with(FriendEntry) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setDefaultShard(arg0: UInt, ) {
		setField(455U.toFieldId(), arg0.toFieldValue())
	}

	fun setDefaultZone(arg0: UInt, ) {
		setField(456U.toFieldId(), arg0.toFieldValue())
	}

	fun setShtickerBook(arg0: ByteArray, ) {
		setField(457U.toFieldId(), arg0.toFieldValue())
	}

	fun setZonesVisited(arg0: List<UInt>, ) {
		setField(458U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setHoodsVisited(arg0: List<UInt>, ) {
		setField(459U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setInterface(arg0: ByteArray, ) {
		setField(460U.toFieldId(), arg0.toFieldValue())
	}

	fun setLastHood(arg0: UInt, ) {
		setField(461U.toFieldId(), arg0.toFieldValue())
	}

	fun setTutorialAck(arg0: UByte, ) {
		setField(462U.toFieldId(), arg0.toFieldValue())
	}

	fun setMaxClothes(arg0: UInt, ) {
		setField(463U.toFieldId(), arg0.toFieldValue())
	}

	fun setClothesTopsList(arg0: List<UByte>, ) {
		setField(464U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setClothesBottomsList(arg0: List<UByte>, ) {
		setField(465U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setMaxAccessories(arg0: UInt, ) {
		setField(466U.toFieldId(), arg0.toFieldValue())
	}

	fun setHatList(arg0: List<UByte>, ) {
		setField(467U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setGlassesList(arg0: List<UByte>, ) {
		setField(468U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setBackpackList(arg0: List<UByte>, ) {
		setField(469U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setShoesList(arg0: List<UByte>, ) {
		setField(470U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setHat(arg0: UByte, arg1: UByte, arg2: UByte, ) {
		setField(471U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setGlasses(arg0: UByte, arg1: UByte, arg2: UByte, ) {
		setField(472U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setBackpack(arg0: UByte, arg1: UByte, arg2: UByte, ) {
		setField(473U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setShoes(arg0: UByte, arg1: UByte, arg2: UByte, ) {
		setField(474U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setGardenSpecials(arg0: List<gardenSpecial>, ) {
		setField(475U.toFieldId(), with(gardenSpecial) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setEarnedExperience(arg0: List<UShort>, ) {
		setField(476U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setTunnelIn(arg0: Short, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(477U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setTunnelOut(arg0: Short, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, ) {
		setField(478U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setAnimState(arg0: List<Char>, arg1: Double, arg2: Short, ) {
		setField(479U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.Char, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setEmoteState(arg0: Short, arg1: Double, arg2: Short, ) {
		setField(480U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setEmoteAccess(arg0: List<UByte>, ) {
		setField(481U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCustomMessages(arg0: List<UShort>, ) {
		setField(482U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setSleepAutoReply(arg0: UInt, ) {
		setField(483U.toFieldId(), arg0.toFieldValue())
	}

	fun setResistanceMessages(arg0: List<pair16>, ) {
		setField(484U.toFieldId(), with(pair16) { FieldValue.ArrayValue(FieldValue.Type.Array(FieldValue.Type.Int16), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setPetTrickPhrases(arg0: List<UByte>, ) {
		setField(485U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCatalogSchedule(arg0: UShort, arg1: UInt, ) {
		setField(486U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setCatalog(arg0: ByteArray, arg1: ByteArray, arg2: ByteArray, ) {
		setField(487U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setMailboxContents(arg0: ByteArray, ) {
		setField(488U.toFieldId(), arg0.toFieldValue())
	}

	fun setDeliverySchedule(arg0: ByteArray, ) {
		setField(489U.toFieldId(), arg0.toFieldValue())
	}

	fun setGiftSchedule(arg0: ByteArray, ) {
		setField(490U.toFieldId(), arg0.toFieldValue())
	}

	fun setAwardMailboxContents(arg0: ByteArray, ) {
		setField(491U.toFieldId(), arg0.toFieldValue())
	}

	fun setAwardSchedule(arg0: ByteArray, ) {
		setField(492U.toFieldId(), arg0.toFieldValue())
	}

	fun setAwardNotify(arg0: UByte, ) {
		setField(493U.toFieldId(), arg0.toFieldValue())
	}

	fun setCatalogNotify(arg0: UByte, arg1: UByte, ) {
		setField(494U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun playSplashEffect(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(495U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setWhisperSCToontaskFrom(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, arg4: UByte, ) {
		setField(496U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun setSCToontask(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UByte, ) {
		setField(497U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun reqSCResistance(arg0: UShort, arg1: List<UInt>, ) {
		setField(498U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setSCResistance(arg0: UShort, arg1: List<UInt>, ) {
		setField(499U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setSpeedChatStyleIndex(arg0: UByte, ) {
		setField(500U.toFieldId(), arg0.toFieldValue())
	}

	fun setTrophyScore(arg0: UShort, ) {
		setField(501U.toFieldId(), arg0.toFieldValue())
	}

	fun setTeleportAccess(arg0: List<UInt>, ) {
		setField(502U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun checkTeleportAccess(arg0: UShort, ) {
		setField(503U.toFieldId(), arg0.toFieldValue())
	}

	fun battleSOS(arg0: UInt, ) {
		setField(504U.toFieldId(), arg0.toFieldValue())
	}

	fun teleportQuery(arg0: UInt, ) {
		setField(505U.toFieldId(), arg0.toFieldValue())
	}

	fun teleportResponse(arg0: UInt, arg1: Byte, arg2: UInt, arg3: UInt, arg4: UInt, ) {
		setField(506U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun teleportResponseToAI(arg0: UInt, arg1: Byte, arg2: UInt, arg3: UInt, arg4: UInt, arg5: UInt, ) {
		setField(507U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
				))
	}

	fun teleportGiveup(arg0: UInt, ) {
		setField(508U.toFieldId(), arg0.toFieldValue())
	}

	fun teleportGreeting(arg0: UInt, ) {
		setField(509U.toFieldId(), arg0.toFieldValue())
	}

	fun setCogStatus(arg0: List<UInt>, ) {
		setField(510U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCogCount(arg0: List<UInt>, ) {
		setField(511U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCogRadar(arg0: List<UByte>, ) {
		setField(512U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setBuildingRadar(arg0: List<UByte>, ) {
		setField(513U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCogLevels(arg0: List<UByte>, ) {
		setField(514U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCogTypes(arg0: List<UByte>, ) {
		setField(515U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCogParts(arg0: List<UInt>, ) {
		setField(516U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCogMerits(arg0: List<UShort>, ) {
		setField(517U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCogIndex(arg0: Byte, ) {
		setField(518U.toFieldId(), arg0.toFieldValue())
	}

	fun setDisguisePageFlag(arg0: Byte, ) {
		setField(519U.toFieldId(), arg0.toFieldValue())
	}

	fun setSosPageFlag(arg0: Byte, ) {
		setField(520U.toFieldId(), arg0.toFieldValue())
	}

	fun setHouseId(arg0: UInt, ) {
		setField(521U.toFieldId(), arg0.toFieldValue())
	}

	fun setQuests(arg0: List<UInt>, ) {
		setField(522U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setQuestHistory(arg0: List<UShort>, ) {
		setField(523U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setRewardHistory(arg0: UByte, arg1: List<UShort>, ) {
		setField(524U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt16, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setQuestCarryLimit(arg0: UByte, ) {
		setField(525U.toFieldId(), arg0.toFieldValue())
	}

	fun requestDeleteQuest(arg0: List<UInt>, ) {
		setField(526U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCheesyEffect(arg0: Short, arg1: UInt, arg2: UInt, ) {
		setField(527U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setGhostMode(arg0: UByte, ) {
		setField(528U.toFieldId(), arg0.toFieldValue())
	}

	fun setPosIndex(arg0: UByte, ) {
		setField(529U.toFieldId(), arg0.toFieldValue())
	}

	fun setFishCollection(arg0: List<UByte>, arg1: List<UByte>, arg2: List<UShort>, ) {
		setField(530U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt16, arg2.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setMaxFishTank(arg0: UByte, ) {
		setField(531U.toFieldId(), arg0.toFieldValue())
	}

	fun setFishTank(arg0: List<UByte>, arg1: List<UByte>, arg2: List<UShort>, ) {
		setField(532U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt16, arg2.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setFishingRod(arg0: UByte, ) {
		setField(533U.toFieldId(), arg0.toFieldValue())
	}

	fun setFishingTrophies(arg0: List<UByte>, ) {
		setField(534U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setFlowerCollection(arg0: List<UByte>, arg1: List<UByte>, ) {
		setField(535U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setFlowerBasket(arg0: List<UByte>, arg1: List<UByte>, ) {
		setField(536U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setMaxFlowerBasket(arg0: UByte, ) {
		setField(537U.toFieldId(), arg0.toFieldValue())
	}

	fun setGardenTrophies(arg0: List<UByte>, ) {
		setField(538U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setShovel(arg0: UByte, ) {
		setField(539U.toFieldId(), arg0.toFieldValue())
	}

	fun setShovelSkill(arg0: UInt, ) {
		setField(540U.toFieldId(), arg0.toFieldValue())
	}

	fun setWateringCan(arg0: UByte, ) {
		setField(541U.toFieldId(), arg0.toFieldValue())
	}

	fun setWateringCanSkill(arg0: UInt, ) {
		setField(542U.toFieldId(), arg0.toFieldValue())
	}

	fun promoteShovel(arg0: UByte, ) {
		setField(543U.toFieldId(), arg0.toFieldValue())
	}

	fun promoteWateringCan(arg0: UByte, ) {
		setField(544U.toFieldId(), arg0.toFieldValue())
	}

	fun reactivateWater() {
		setField(545U.toFieldId(), FieldValue.EmptyValue)
	}

	fun presentPie(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Int, ) {
		setField(546U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg6.toFieldValue(), 
				))
	}

	fun tossPie(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: UByte, arg7: UByte, arg8: Int, ) {
		setField(547U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg6.toFieldValue(), 
			arg7.toFieldValue(), 
			arg8.toFieldValue(), 
				))
	}

	fun pieSplat(arg0: Double, arg1: Double, arg2: Double, arg3: UByte, arg4: UByte, arg5: Int, ) {
		setField(548U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
				))
	}

	fun setPieType(arg0: UByte, ) {
		setField(549U.toFieldId(), arg0.toFieldValue())
	}

	fun setNumPies(arg0: UShort, ) {
		setField(550U.toFieldId(), arg0.toFieldValue())
	}

	fun catalogGenClothes(arg0: UInt, ) {
		setField(551U.toFieldId(), arg0.toFieldValue())
	}

	fun catalogGenAccessories(arg0: UInt, ) {
		setField(552U.toFieldId(), arg0.toFieldValue())
	}

	fun setPetId(arg0: UInt, ) {
		setField(553U.toFieldId(), arg0.toFieldValue())
	}

	fun setPetMovie(arg0: UInt, arg1: UByte, ) {
		setField(554U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setPetTutorialDone(arg0: UByte, ) {
		setField(555U.toFieldId(), arg0.toFieldValue())
	}

	fun setFishBingoTutorialDone(arg0: UByte, ) {
		setField(556U.toFieldId(), arg0.toFieldValue())
	}

	fun setFishBingoMarkTutorialDone(arg0: UByte, ) {
		setField(557U.toFieldId(), arg0.toFieldValue())
	}

	fun setKartBodyType(arg0: Byte, ) {
		setField(558U.toFieldId(), arg0.toFieldValue())
	}

	fun setKartBodyColor(arg0: Byte, ) {
		setField(559U.toFieldId(), arg0.toFieldValue())
	}

	fun setKartAccessoryColor(arg0: Byte, ) {
		setField(560U.toFieldId(), arg0.toFieldValue())
	}

	fun setKartEngineBlockType(arg0: Byte, ) {
		setField(561U.toFieldId(), arg0.toFieldValue())
	}

	fun setKartSpoilerType(arg0: Byte, ) {
		setField(562U.toFieldId(), arg0.toFieldValue())
	}

	fun setKartFrontWheelWellType(arg0: Byte, ) {
		setField(563U.toFieldId(), arg0.toFieldValue())
	}

	fun setKartBackWheelWellType(arg0: Byte, ) {
		setField(564U.toFieldId(), arg0.toFieldValue())
	}

	fun setKartRimType(arg0: Byte, ) {
		setField(565U.toFieldId(), arg0.toFieldValue())
	}

	fun setKartDecalType(arg0: Byte, ) {
		setField(566U.toFieldId(), arg0.toFieldValue())
	}

	fun updateKartDNAField(arg0: Byte, arg1: Byte, ) {
		setField(567U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun addOwnedAccessory(arg0: Byte, ) {
		setField(568U.toFieldId(), arg0.toFieldValue())
	}

	fun removeOwnedAccessory(arg0: Byte, ) {
		setField(569U.toFieldId(), arg0.toFieldValue())
	}

	fun setTickets(arg0: UInt, ) {
		setField(570U.toFieldId(), arg0.toFieldValue())
	}

	fun setKartingHistory(arg0: List<UByte>, ) {
		setField(571U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setKartingTrophies(arg0: List<UByte>, ) {
		setField(572U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setKartingPersonalBest(arg0: List<Double>, ) {
		setField(573U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setKartingPersonalBest2(arg0: List<Double>, ) {
		setField(574U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setKartAccessoriesOwned(arg0: List<Byte>, ) {
		setField(575U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.Int8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCurrentKart(arg0: UInt, ) {
		setField(576U.toFieldId(), arg0.toFieldValue())
	}

	fun squish(arg0: UByte, ) {
		setField(577U.toFieldId(), arg0.toFieldValue())
	}

	fun announceBingo() {
		setField(578U.toFieldId(), FieldValue.EmptyValue)
	}

	fun trickOrTreatTargetMet(arg0: UInt, ) {
		setField(579U.toFieldId(), arg0.toFieldValue())
	}

	fun trickOrTreatMilestoneMet() {
		setField(580U.toFieldId(), FieldValue.EmptyValue)
	}

	fun winterCarolingTargetMet(arg0: UInt, ) {
		setField(581U.toFieldId(), arg0.toFieldValue())
	}

	fun setCogSummonsEarned(arg0: List<UByte>, ) {
		setField(582U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun reqCogSummons(arg0: List<Char>, arg1: UInt, ) {
		setField(583U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.Char, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun cogSummonsResponse(arg0: String, arg1: UInt, arg2: UInt, ) {
		setField(584U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun reqUseSpecial(arg0: Int, ) {
		setField(585U.toFieldId(), arg0.toFieldValue())
	}

	fun useSpecialResponse(arg0: String, ) {
		setField(586U.toFieldId(), arg0.toFieldValue())
	}

	fun setGardenStarted(arg0: UByte, ) {
		setField(587U.toFieldId(), arg0.toFieldValue())
	}

	fun sendToGolfCourse(arg0: UInt, ) {
		setField(588U.toFieldId(), arg0.toFieldValue())
	}

	fun setGolfHistory(arg0: List<UShort>, ) {
		setField(589U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setPackedGolfHoleBest(arg0: List<UByte>, ) {
		setField(590U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setGolfCourseBest(arg0: List<UByte>, ) {
		setField(591U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setUnlimitedSwing(arg0: UByte, ) {
		setField(592U.toFieldId(), arg0.toFieldValue())
	}

	fun logSuspiciousEvent(arg0: List<Char>, ) {
		setField(593U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.Char, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun logMessage(arg0: List<Char>, ) {
		setField(594U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.Char, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun forceLogoutWithNotify() {
		setField(595U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setPinkSlips(arg0: UByte, ) {
		setField(596U.toFieldId(), arg0.toFieldValue())
	}

	fun setNametagStyle(arg0: UByte, ) {
		setField(597U.toFieldId(), arg0.toFieldValue())
	}

	fun setMail(arg0: List<simpleMail>, ) {
		setField(598U.toFieldId(), with(simpleMail) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setNumMailItems(arg0: UInt, ) {
		setField(599U.toFieldId(), arg0.toFieldValue())
	}

	fun setSimpleMailNotify(arg0: UByte, ) {
		setField(600U.toFieldId(), arg0.toFieldValue())
	}

	fun setInvites(arg0: List<invite>, ) {
		setField(601U.toFieldId(), with(invite) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt64, FieldValue.Type.UInt8, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setPartiesInvitedTo(arg0: List<party>, ) {
		setField(602U.toFieldId(), with(party) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.UInt8, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setHostedParties(arg0: List<party>, ) {
		setField(603U.toFieldId(), with(party) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.UInt8, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setPartyReplies(arg0: List<repliesForOneParty>, ) {
		setField(604U.toFieldId(), with(repliesForOneParty) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )), ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun updateInvite(arg0: ULong, arg1: UByte, ) {
		setField(605U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun updateReply(arg0: ULong, arg1: ULong, arg2: UByte, ) {
		setField(606U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setPartyCanStart(arg0: ULong, ) {
		setField(607U.toFieldId(), arg0.toFieldValue())
	}

	fun setPartyStatus(arg0: ULong, arg1: UByte, ) {
		setField(608U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun announcePartyStarted(arg0: ULong, ) {
		setField(609U.toFieldId(), arg0.toFieldValue())
	}

	fun setNeverStartedPartyRefunded(arg0: ULong, arg1: Byte, arg2: UShort, ) {
		setField(610U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setDISLname(arg0: String, ) {
		setField(611U.toFieldId(), arg0.toFieldValue())
	}

	fun setDISLid(arg0: UInt, ) {
		setField(612U.toFieldId(), arg0.toFieldValue())
	}

	fun toggleSleep() {
		setField(613U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetDNAString(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetGM(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetMaxBankMoney(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetBankMoney(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetMaxMoney(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetMoney(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetMaxHp(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetHp(arg0: Short, sender: ChannelId? = null) {}
	open fun onToonUp(arg0: UShort, sender: ChannelId? = null) {}
	open fun onTakeDamage(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetBattleId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetExperience(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetMaxCarry(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetTrackAccess(arg0: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetTrackProgress(arg0: Byte, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetTrackBonusLevel(arg0: List<Byte>, sender: ChannelId? = null) {}
	open fun onSetInventory(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetMaxNPCFriends(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetNPCFriendsDict(arg0: List<FriendEntry>, sender: ChannelId? = null) {}
	open fun onSetDefaultShard(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDefaultZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetShtickerBook(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetZonesVisited(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetHoodsVisited(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetInterface(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetLastHood(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetTutorialAck(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetMaxClothes(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetClothesTopsList(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetClothesBottomsList(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetMaxAccessories(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetHatList(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetGlassesList(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetBackpackList(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetShoesList(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetHat(arg0: UByte, arg1: UByte, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetGlasses(arg0: UByte, arg1: UByte, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetBackpack(arg0: UByte, arg1: UByte, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetShoes(arg0: UByte, arg1: UByte, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetGardenSpecials(arg0: List<gardenSpecial>, sender: ChannelId? = null) {}
	open fun onSetEarnedExperience(arg0: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetTunnelIn(arg0: Short, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetTunnelOut(arg0: Short, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, sender: ChannelId? = null) {}
	open fun onSetAnimState(arg0: List<Char>, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetEmoteState(arg0: Short, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetEmoteAccess(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetCustomMessages(arg0: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetSleepAutoReply(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetResistanceMessages(arg0: List<pair16>, sender: ChannelId? = null) {}
	open fun onSetPetTrickPhrases(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetCatalogSchedule(arg0: UShort, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetCatalog(arg0: ByteArray, arg1: ByteArray, arg2: ByteArray, sender: ChannelId? = null) {}
	open fun onSetMailboxContents(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetDeliverySchedule(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetGiftSchedule(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetAwardMailboxContents(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetAwardSchedule(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetAwardNotify(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetCatalogNotify(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onPlaySplashEffect(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetWhisperSCToontaskFrom(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, arg4: UByte, sender: ChannelId? = null) {}
	open fun onSetSCToontask(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UByte, sender: ChannelId? = null) {}
	open fun onReqSCResistance(arg0: UShort, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetSCResistance(arg0: UShort, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetSpeedChatStyleIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetTrophyScore(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetTeleportAccess(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onCheckTeleportAccess(arg0: UShort, sender: ChannelId? = null) {}
	open fun onBattleSOS(arg0: UInt, sender: ChannelId? = null) {}
	open fun onTeleportQuery(arg0: UInt, sender: ChannelId? = null) {}
	open fun onTeleportResponse(arg0: UInt, arg1: Byte, arg2: UInt, arg3: UInt, arg4: UInt, sender: ChannelId? = null) {}
	open fun onTeleportResponseToAI(arg0: UInt, arg1: Byte, arg2: UInt, arg3: UInt, arg4: UInt, arg5: UInt, sender: ChannelId? = null) {}
	open fun onTeleportGiveup(arg0: UInt, sender: ChannelId? = null) {}
	open fun onTeleportGreeting(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetCogStatus(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetCogCount(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetCogRadar(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetBuildingRadar(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetCogLevels(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetCogTypes(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetCogParts(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetCogMerits(arg0: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetCogIndex(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetDisguisePageFlag(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetSosPageFlag(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetHouseId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetQuests(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetQuestHistory(arg0: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetRewardHistory(arg0: UByte, arg1: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetQuestCarryLimit(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestDeleteQuest(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetCheesyEffect(arg0: Short, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onSetGhostMode(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetPosIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetFishCollection(arg0: List<UByte>, arg1: List<UByte>, arg2: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetMaxFishTank(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetFishTank(arg0: List<UByte>, arg1: List<UByte>, arg2: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetFishingRod(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetFishingTrophies(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetFlowerCollection(arg0: List<UByte>, arg1: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetFlowerBasket(arg0: List<UByte>, arg1: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetMaxFlowerBasket(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetGardenTrophies(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetShovel(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetShovelSkill(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetWateringCan(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetWateringCanSkill(arg0: UInt, sender: ChannelId? = null) {}
	open fun onPromoteShovel(arg0: UByte, sender: ChannelId? = null) {}
	open fun onPromoteWateringCan(arg0: UByte, sender: ChannelId? = null) {}
	open fun onReactivateWater(sender: ChannelId? = null) {}
	open fun onPresentPie(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Int, sender: ChannelId? = null) {}
	open fun onTossPie(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: UByte, arg7: UByte, arg8: Int, sender: ChannelId? = null) {}
	open fun onPieSplat(arg0: Double, arg1: Double, arg2: Double, arg3: UByte, arg4: UByte, arg5: Int, sender: ChannelId? = null) {}
	open fun onSetPieType(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetNumPies(arg0: UShort, sender: ChannelId? = null) {}
	open fun onCatalogGenClothes(arg0: UInt, sender: ChannelId? = null) {}
	open fun onCatalogGenAccessories(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetPetId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetPetMovie(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetPetTutorialDone(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetFishBingoTutorialDone(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetFishBingoMarkTutorialDone(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetKartBodyType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetKartBodyColor(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetKartAccessoryColor(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetKartEngineBlockType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetKartSpoilerType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetKartFrontWheelWellType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetKartBackWheelWellType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetKartRimType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetKartDecalType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onUpdateKartDNAField(arg0: Byte, arg1: Byte, sender: ChannelId? = null) {}
	open fun onAddOwnedAccessory(arg0: Byte, sender: ChannelId? = null) {}
	open fun onRemoveOwnedAccessory(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetTickets(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetKartingHistory(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetKartingTrophies(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetKartingPersonalBest(arg0: List<Double>, sender: ChannelId? = null) {}
	open fun onSetKartingPersonalBest2(arg0: List<Double>, sender: ChannelId? = null) {}
	open fun onSetKartAccessoriesOwned(arg0: List<Byte>, sender: ChannelId? = null) {}
	open fun onSetCurrentKart(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSquish(arg0: UByte, sender: ChannelId? = null) {}
	open fun onAnnounceBingo(sender: ChannelId? = null) {}
	open fun onTrickOrTreatTargetMet(arg0: UInt, sender: ChannelId? = null) {}
	open fun onTrickOrTreatMilestoneMet(sender: ChannelId? = null) {}
	open fun onWinterCarolingTargetMet(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetCogSummonsEarned(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onReqCogSummons(arg0: List<Char>, arg1: UInt, sender: ChannelId? = null) {}
	open fun onCogSummonsResponse(arg0: String, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onReqUseSpecial(arg0: Int, sender: ChannelId? = null) {}
	open fun onUseSpecialResponse(arg0: String, sender: ChannelId? = null) {}
	open fun onSetGardenStarted(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSendToGolfCourse(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetGolfHistory(arg0: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetPackedGolfHoleBest(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetGolfCourseBest(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetUnlimitedSwing(arg0: UByte, sender: ChannelId? = null) {}
	open fun onLogSuspiciousEvent(arg0: List<Char>, sender: ChannelId? = null) {}
	open fun onLogMessage(arg0: List<Char>, sender: ChannelId? = null) {}
	open fun onForceLogoutWithNotify(sender: ChannelId? = null) {}
	open fun onSetPinkSlips(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetNametagStyle(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetMail(arg0: List<simpleMail>, sender: ChannelId? = null) {}
	open fun onSetNumMailItems(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetSimpleMailNotify(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetInvites(arg0: List<invite>, sender: ChannelId? = null) {}
	open fun onSetPartiesInvitedTo(arg0: List<party>, sender: ChannelId? = null) {}
	open fun onSetHostedParties(arg0: List<party>, sender: ChannelId? = null) {}
	open fun onSetPartyReplies(arg0: List<repliesForOneParty>, sender: ChannelId? = null) {}
	open fun onUpdateInvite(arg0: ULong, arg1: UByte, sender: ChannelId? = null) {}
	open fun onUpdateReply(arg0: ULong, arg1: ULong, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetPartyCanStart(arg0: ULong, sender: ChannelId? = null) {}
	open fun onSetPartyStatus(arg0: ULong, arg1: UByte, sender: ChannelId? = null) {}
	open fun onAnnouncePartyStarted(arg0: ULong, sender: ChannelId? = null) {}
	open fun onSetNeverStartedPartyRefunded(arg0: ULong, arg1: Byte, arg2: UShort, sender: ChannelId? = null) {}
	open fun onSetDISLname(arg0: String, sender: ChannelId? = null) {}
	open fun onSetDISLid(arg0: UInt, sender: ChannelId? = null) {}
	open fun onToggleSleep(sender: ChannelId? = null) {}
}

open class DistributedCCharBase(doId: DOId): DistributedObjectBase(doId, 66U.toDClassId()) {
	companion object {
		val dClassId = 66U.toDClassId()

		object Fields {
			val setChat: FieldId = 614U.toFieldId()
			val fadeAway: FieldId = 615U.toFieldId()
			val setWalk: FieldId = 616U.toFieldId()
			val avatarEnter: FieldId = 617U.toFieldId()
			val avatarExit: FieldId = 618U.toFieldId()
			val setNearbyAvatarChat: FieldId = 619U.toFieldId()
			val setNearbyAvatarSC: FieldId = 620U.toFieldId()
			val setNearbyAvatarSCCustom: FieldId = 621U.toFieldId()
			val setNearbyAvatarSCToontask: FieldId = 622U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		614U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onSetChat(t0, t1, t2, sender)
				}
			}
		),
		615U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFadeAway(sender)
			}
		),
		616U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toInt16()!!
				onSetWalk(t0, t1, t2, sender)
				}
			}
		),
		617U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarEnter(sender)
			}
		),
		618U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarExit(sender)
			}
		),
		619U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Char),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetNearbyAvatarChat(it.toList()!!.map { it.toChar()!! }, sender)
			}
		),
		620U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetNearbyAvatarSC(it.toUInt16()!!, sender)
			}
		),
		621U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetNearbyAvatarSCCustom(it.toUInt16()!!, sender)
			}
		),
		622U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt8()!!
				onSetNearbyAvatarSCToontask(t0, t1, t2, t3, sender)
				}
			}
		),
	)

	fun setChat(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(614U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun fadeAway() {
		setField(615U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setWalk(arg0: String, arg1: String, arg2: Short, ) {
		setField(616U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun avatarEnter() {
		setField(617U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarExit() {
		setField(618U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setNearbyAvatarChat(arg0: List<Char>, ) {
		setField(619U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.Char, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setNearbyAvatarSC(arg0: UShort, ) {
		setField(620U.toFieldId(), arg0.toFieldValue())
	}

	fun setNearbyAvatarSCCustom(arg0: UShort, ) {
		setField(621U.toFieldId(), arg0.toFieldValue())
	}

	fun setNearbyAvatarSCToontask(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UByte, ) {
		setField(622U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	open fun onSetChat(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onFadeAway(sender: ChannelId? = null) {}
	open fun onSetWalk(arg0: String, arg1: String, arg2: Short, sender: ChannelId? = null) {}
	open fun onAvatarEnter(sender: ChannelId? = null) {}
	open fun onAvatarExit(sender: ChannelId? = null) {}
	open fun onSetNearbyAvatarChat(arg0: List<Char>, sender: ChannelId? = null) {}
	open fun onSetNearbyAvatarSC(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetNearbyAvatarSCCustom(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetNearbyAvatarSCToontask(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UByte, sender: ChannelId? = null) {}
}

open class DistributedMickey(doId: DOId): DistributedObjectBase(doId, 67U.toDClassId()) {
	companion object {
		val dClassId = 67U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedVampireMickey(doId: DOId): DistributedObjectBase(doId, 68U.toDClassId()) {
	companion object {
		val dClassId = 68U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedWitchMinnie(doId: DOId): DistributedObjectBase(doId, 69U.toDClassId()) {
	companion object {
		val dClassId = 69U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedMinnie(doId: DOId): DistributedObjectBase(doId, 70U.toDClassId()) {
	companion object {
		val dClassId = 70U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedGoofy(doId: DOId): DistributedObjectBase(doId, 71U.toDClassId()) {
	companion object {
		val dClassId = 71U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedDaisy(doId: DOId): DistributedObjectBase(doId, 72U.toDClassId()) {
	companion object {
		val dClassId = 72U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedSockHopDaisy(doId: DOId): DistributedObjectBase(doId, 73U.toDClassId()) {
	companion object {
		val dClassId = 73U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedChip(doId: DOId): DistributedObjectBase(doId, 74U.toDClassId()) {
	companion object {
		val dClassId = 74U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPoliceChip(doId: DOId): DistributedObjectBase(doId, 75U.toDClassId()) {
	companion object {
		val dClassId = 75U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedDale(doId: DOId): DistributedObjectBase(doId, 76U.toDClassId()) {
	companion object {
		val dClassId = 76U.toDClassId()

		object Fields {
			val setFollowChip: FieldId = 623U.toFieldId()
			val setChipId: FieldId = 624U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		623U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toInt16()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(100.0f)
					}
				onSetFollowChip(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		624U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetChipId(it.toUInt32()!!, sender)
			}
		),
	)

	fun setFollowChip(arg0: String, arg1: String, arg2: Short, arg3: Double, arg4: Double, ) {
		setField(623U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setChipId(arg0: UInt, ) {
		setField(624U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetFollowChip(arg0: String, arg1: String, arg2: Short, arg3: Double, arg4: Double, sender: ChannelId? = null) {}
	open fun onSetChipId(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedJailbirdDale(doId: DOId): DistributedObjectBase(doId, 77U.toDClassId()) {
	companion object {
		val dClassId = 77U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedDonald(doId: DOId): DistributedObjectBase(doId, 78U.toDClassId()) {
	companion object {
		val dClassId = 78U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedFrankenDonald(doId: DOId): DistributedObjectBase(doId, 79U.toDClassId()) {
	companion object {
		val dClassId = 79U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedDonaldDock(doId: DOId): DistributedObjectBase(doId, 80U.toDClassId()) {
	companion object {
		val dClassId = 80U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPluto(doId: DOId): DistributedObjectBase(doId, 81U.toDClassId()) {
	companion object {
		val dClassId = 81U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedWesternPluto(doId: DOId): DistributedObjectBase(doId, 82U.toDClassId()) {
	companion object {
		val dClassId = 82U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedGoofySpeedway(doId: DOId): DistributedObjectBase(doId, 83U.toDClassId()) {
	companion object {
		val dClassId = 83U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedSuperGoofy(doId: DOId): DistributedObjectBase(doId, 84U.toDClassId()) {
	companion object {
		val dClassId = 84U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyGate(doId: DOId): DistributedObjectBase(doId, 85U.toDClassId()) {
	companion object {
		val dClassId = 85U.toDClassId()

		object Fields {
			val getPartyList: FieldId = 625U.toFieldId()
			val partyChoiceRequest: FieldId = 626U.toFieldId()
			val listAllPublicParties: FieldId = 627U.toFieldId()
			val partyRequestDenied: FieldId = 628U.toFieldId()
			val setParty: FieldId = 629U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		625U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onGetPartyList(it.toUInt32()!!, sender)
			}
		),
		626U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.UInt64, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt64()!!
				val t2 = values[2].toUInt64()!!
				onPartyChoiceRequest(t0, t1, t2, sender)
				}
			}
		),
		627U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt16, )),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onListAllPublicParties(with(publicPartyInfo) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		628U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onPartyRequestDenied(it.toUInt8()!!, sender)
			}
		),
		629U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetParty(with(publicPartyInfo) { fromFieldValue(it)}, sender)
			}
		),
	)

	fun getPartyList(arg0: UInt, ) {
		setField(625U.toFieldId(), arg0.toFieldValue())
	}

	fun partyChoiceRequest(arg0: UInt, arg1: ULong, arg2: ULong, ) {
		setField(626U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun listAllPublicParties(arg0: List<publicPartyInfo>, ) {
		setField(627U.toFieldId(), with(publicPartyInfo) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt16, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun partyRequestDenied(arg0: UByte, ) {
		setField(628U.toFieldId(), arg0.toFieldValue())
	}

	fun setParty(arg0: publicPartyInfo, ) {
		setField(629U.toFieldId(), with(publicPartyInfo) { arg0.toFieldValue()})
	}

	open fun onGetPartyList(arg0: UInt, sender: ChannelId? = null) {}
	open fun onPartyChoiceRequest(arg0: UInt, arg1: ULong, arg2: ULong, sender: ChannelId? = null) {}
	open fun onListAllPublicParties(arg0: List<publicPartyInfo>, sender: ChannelId? = null) {}
	open fun onPartyRequestDenied(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetParty(arg0: publicPartyInfo, sender: ChannelId? = null) {}
}

open class DistributedTrolley(doId: DOId): DistributedObjectBase(doId, 86U.toDClassId()) {
	companion object {
		val dClassId = 86U.toDClassId()

		object Fields {
			val setState: FieldId = 630U.toFieldId()
			val fillSlot0: FieldId = 631U.toFieldId()
			val fillSlot1: FieldId = 632U.toFieldId()
			val fillSlot2: FieldId = 633U.toFieldId()
			val fillSlot3: FieldId = 634U.toFieldId()
			val emptySlot0: FieldId = 635U.toFieldId()
			val emptySlot1: FieldId = 636U.toFieldId()
			val emptySlot2: FieldId = 637U.toFieldId()
			val emptySlot3: FieldId = 638U.toFieldId()
			val requestBoard: FieldId = 639U.toFieldId()
			val rejectBoard: FieldId = 640U.toFieldId()
			val requestExit: FieldId = 641U.toFieldId()
			val setMinigameZone: FieldId = 642U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		630U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		631U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot0(it.toUInt32()!!, sender)
			}
		),
		632U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot1(it.toUInt32()!!, sender)
			}
		),
		633U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot2(it.toUInt32()!!, sender)
			}
		),
		634U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot3(it.toUInt32()!!, sender)
			}
		),
		635U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot0(t0, t1, sender)
				}
			}
		),
		636U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot1(t0, t1, sender)
				}
			}
		),
		637U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot2(t0, t1, sender)
				}
			}
		),
		638U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot3(t0, t1, sender)
				}
			}
		),
		639U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBoard(sender)
			}
		),
		640U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectBoard(it.toUInt32()!!, sender)
			}
		),
		641U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		642U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetMinigameZone(t0, t1, sender)
				}
			}
		),
	)

	fun setState(arg0: String, arg1: Short, ) {
		setField(630U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fillSlot0(arg0: UInt, ) {
		setField(631U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot1(arg0: UInt, ) {
		setField(632U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot2(arg0: UInt, ) {
		setField(633U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot3(arg0: UInt, ) {
		setField(634U.toFieldId(), arg0.toFieldValue())
	}

	fun emptySlot0(arg0: UInt, arg1: Short, ) {
		setField(635U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun emptySlot1(arg0: UInt, arg1: Short, ) {
		setField(636U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun emptySlot2(arg0: UInt, arg1: Short, ) {
		setField(637U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun emptySlot3(arg0: UInt, arg1: Short, ) {
		setField(638U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestBoard() {
		setField(639U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rejectBoard(arg0: UInt, ) {
		setField(640U.toFieldId(), arg0.toFieldValue())
	}

	fun requestExit() {
		setField(641U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setMinigameZone(arg0: UInt, arg1: UShort, ) {
		setField(642U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onFillSlot0(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot1(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot2(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot3(arg0: UInt, sender: ChannelId? = null) {}
	open fun onEmptySlot0(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot1(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot2(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot3(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onRequestBoard(sender: ChannelId? = null) {}
	open fun onRejectBoard(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onSetMinigameZone(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
}

open class DistributedSuitPlanner(doId: DOId): DistributedObjectBase(doId, 87U.toDClassId()) {
	companion object {
		val dClassId = 87U.toDClassId()

		object Fields {
			val setZoneId: FieldId = 643U.toFieldId()
			val suitListQuery: FieldId = 644U.toFieldId()
			val suitListResponse: FieldId = 645U.toFieldId()
			val buildingListQuery: FieldId = 646U.toFieldId()
			val buildingListResponse: FieldId = 647U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		643U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetZoneId(it.toUInt32()!!, sender)
			}
		),
		644U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSuitListQuery(sender)
			}
		),
		645U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSuitListResponse(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		646U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onBuildingListQuery(sender)
			}
		),
		647U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onBuildingListResponse(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
	)

	fun setZoneId(arg0: UInt, ) {
		setField(643U.toFieldId(), arg0.toFieldValue())
	}

	fun suitListQuery() {
		setField(644U.toFieldId(), FieldValue.EmptyValue)
	}

	fun suitListResponse(arg0: List<UByte>, ) {
		setField(645U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun buildingListQuery() {
		setField(646U.toFieldId(), FieldValue.EmptyValue)
	}

	fun buildingListResponse(arg0: List<UByte>, ) {
		setField(647U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	open fun onSetZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSuitListQuery(sender: ChannelId? = null) {}
	open fun onSuitListResponse(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onBuildingListQuery(sender: ChannelId? = null) {}
	open fun onBuildingListResponse(arg0: List<UByte>, sender: ChannelId? = null) {}
}

open class DistributedSuitBase(doId: DOId): DistributedObjectBase(doId, 88U.toDClassId()) {
	companion object {
		val dClassId = 88U.toDClassId()

		object Fields {
			val denyBattle: FieldId = 648U.toFieldId()
			val setDNAString: FieldId = 649U.toFieldId()
			val setLevelDist: FieldId = 650U.toFieldId()
			val setBrushOff: FieldId = 651U.toFieldId()
			val setSkelecog: FieldId = 652U.toFieldId()
			val setSkeleRevives: FieldId = 653U.toFieldId()
			val setHP: FieldId = 654U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		648U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onDenyBattle(sender)
			}
		),
		649U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDNAString(it.toBlob()!!, sender)
			}
		),
		650U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLevelDist(it.toInt16()!!, sender)
			}
		),
		651U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBrushOff(it.toInt16()!!, sender)
			}
		),
		652U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSkelecog(it.toUInt8()!!, sender)
			}
		),
		653U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSkeleRevives(it.toUInt8()!!, sender)
			}
		),
		654U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHP(it.toInt16()!!, sender)
			}
		),
	)

	fun denyBattle() {
		setField(648U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setDNAString(arg0: ByteArray, ) {
		setField(649U.toFieldId(), arg0.toFieldValue())
	}

	fun setLevelDist(arg0: Short, ) {
		setField(650U.toFieldId(), arg0.toFieldValue())
	}

	fun setBrushOff(arg0: Short, ) {
		setField(651U.toFieldId(), arg0.toFieldValue())
	}

	fun setSkelecog(arg0: UByte, ) {
		setField(652U.toFieldId(), arg0.toFieldValue())
	}

	fun setSkeleRevives(arg0: UByte, ) {
		setField(653U.toFieldId(), arg0.toFieldValue())
	}

	fun setHP(arg0: Short, ) {
		setField(654U.toFieldId(), arg0.toFieldValue())
	}

	open fun onDenyBattle(sender: ChannelId? = null) {}
	open fun onSetDNAString(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetLevelDist(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetBrushOff(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetSkelecog(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetSkeleRevives(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetHP(arg0: Short, sender: ChannelId? = null) {}
}

open class DistributedSuit(doId: DOId): DistributedObjectBase(doId, 89U.toDClassId()) {
	companion object {
		val dClassId = 89U.toDClassId()

		object Fields {
			val requestBattle: FieldId = 655U.toFieldId()
			val setSPDoId: FieldId = 656U.toFieldId()
			val setPathEndpoints: FieldId = 657U.toFieldId()
			val setPathPosition: FieldId = 658U.toFieldId()
			val setPathState: FieldId = 659U.toFieldId()
			val debugSuitPosition: FieldId = 660U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		655U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onRequestBattle(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		656U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSPDoId(it.toUInt32()!!, sender)
			}
		),
		657U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toUInt16()!!
				val t3 = values[3].toUInt16()!!
				onSetPathEndpoints(t0, t1, t2, t3, sender)
				}
			}
		),
		658U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toInt16()!!
				onSetPathPosition(t0, t1, sender)
				}
			}
		),
		659U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPathState(it.toInt8()!!, sender)
			}
		),
		660U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!
				onDebugSuitPosition(t0, t1, t2, t3, t4, sender)
				}
			}
		),
	)

	fun requestBattle(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(655U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setSPDoId(arg0: UInt, ) {
		setField(656U.toFieldId(), arg0.toFieldValue())
	}

	fun setPathEndpoints(arg0: UShort, arg1: UShort, arg2: UShort, arg3: UShort, ) {
		setField(657U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setPathPosition(arg0: UShort, arg1: Short, ) {
		setField(658U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setPathState(arg0: Byte, ) {
		setField(659U.toFieldId(), arg0.toFieldValue())
	}

	fun debugSuitPosition(arg0: Double, arg1: Short, arg2: Double, arg3: Double, arg4: Short, ) {
		setField(660U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	open fun onRequestBattle(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetSPDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetPathEndpoints(arg0: UShort, arg1: UShort, arg2: UShort, arg3: UShort, sender: ChannelId? = null) {}
	open fun onSetPathPosition(arg0: UShort, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetPathState(arg0: Byte, sender: ChannelId? = null) {}
	open fun onDebugSuitPosition(arg0: Double, arg1: Short, arg2: Double, arg3: Double, arg4: Short, sender: ChannelId? = null) {}
}

open class DistributedTutorialSuit(doId: DOId): DistributedObjectBase(doId, 90U.toDClassId()) {
	companion object {
		val dClassId = 90U.toDClassId()

		object Fields {
			val requestBattle: FieldId = 661U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		661U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onRequestBattle(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
	)

	fun requestBattle(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(661U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	open fun onRequestBattle(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
}

open class DistributedFactorySuit(doId: DOId): DistributedObjectBase(doId, 91U.toDClassId()) {
	companion object {
		val dClassId = 91U.toDClassId()

		object Fields {
			val setLevelDoId: FieldId = 662U.toFieldId()
			val setCogId: FieldId = 663U.toFieldId()
			val setReserve: FieldId = 664U.toFieldId()
			val requestBattle: FieldId = 665U.toFieldId()
			val setAlert: FieldId = 666U.toFieldId()
			val setConfrontToon: FieldId = 667U.toFieldId()
			val setStrayed: FieldId = 668U.toFieldId()
			val setReturn: FieldId = 669U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		662U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLevelDoId(it.toUInt32()!!, sender)
			}
		),
		663U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCogId(it.toUInt32()!!, sender)
			}
		),
		664U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetReserve(it.toUInt8()!!, sender)
			}
		),
		665U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onRequestBattle(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		666U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAlert(it.toUInt32()!!, sender)
			}
		),
		667U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetConfrontToon(it.toUInt32()!!, sender)
			}
		),
		668U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetStrayed(sender)
			}
		),
		669U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetReturn(sender)
			}
		),
	)

	fun setLevelDoId(arg0: UInt, ) {
		setField(662U.toFieldId(), arg0.toFieldValue())
	}

	fun setCogId(arg0: UInt, ) {
		setField(663U.toFieldId(), arg0.toFieldValue())
	}

	fun setReserve(arg0: UByte, ) {
		setField(664U.toFieldId(), arg0.toFieldValue())
	}

	fun requestBattle(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(665U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setAlert(arg0: UInt, ) {
		setField(666U.toFieldId(), arg0.toFieldValue())
	}

	fun setConfrontToon(arg0: UInt, ) {
		setField(667U.toFieldId(), arg0.toFieldValue())
	}

	fun setStrayed() {
		setField(668U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setReturn() {
		setField(669U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetLevelDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetCogId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetReserve(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestBattle(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetAlert(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetConfrontToon(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetStrayed(sender: ChannelId? = null) {}
	open fun onSetReturn(sender: ChannelId? = null) {}
}

open class DistributedMintSuit(doId: DOId): DistributedObjectBase(doId, 92U.toDClassId()) {
	companion object {
		val dClassId = 92U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedStageSuit(doId: DOId): DistributedObjectBase(doId, 93U.toDClassId()) {
	companion object {
		val dClassId = 93U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedBossCog(doId: DOId): DistributedObjectBase(doId, 94U.toDClassId()) {
	companion object {
		val dClassId = 94U.toDClassId()

		object Fields {
			val setDNAString: FieldId = 670U.toFieldId()
			val setToonIds: FieldId = 671U.toFieldId()
			val setBattleIds: FieldId = 672U.toFieldId()
			val setArenaSide: FieldId = 673U.toFieldId()
			val avatarEnter: FieldId = 674U.toFieldId()
			val avatarExit: FieldId = 675U.toFieldId()
			val avatarNearEnter: FieldId = 676U.toFieldId()
			val avatarNearExit: FieldId = 677U.toFieldId()
			val toonDied: FieldId = 678U.toFieldId()
			val setBattleExperience: FieldId = 679U.toFieldId()
			val zapToon: FieldId = 680U.toFieldId()
			val showZapToon: FieldId = 681U.toFieldId()
			val setAttackCode: FieldId = 682U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		670U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDNAString(it.toBlob()!!, sender)
			}
		),
		671U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				onSetToonIds(t0, t1, t2, sender)
				}
			}
		),
		672U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onSetBattleIds(t0, t1, t2, sender)
				}
			}
		),
		673U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetArenaSide(it.toUInt8()!!, sender)
			}
		),
		674U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarEnter(sender)
			}
		),
		675U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarExit(sender)
			}
		),
		676U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarNearEnter(sender)
			}
		),
		677U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarNearExit(sender)
			}
		),
		678U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onToonDied(it.toUInt32()!!, sender)
			}
		),
		679U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toList()!!.map { it.toInt16()!! }
				val t2 = values[2].toList()!!.map { it.toInt16()!! }
				val t3 = values[3].toList()!!.map { it.toUInt32()!! }
				val t4 = values[4].toList()!!.map { it.toInt16()!! }
				val t5 = values[5].toList()!!.map { it.toInt16()!! }
				val t6 = values[6].toList()!!.map { it.toInt16()!! }
				val t7 = values[7].toList()!!.map { it.toInt16()!! }
				val t8 = values[8].toList()!!.map { it.toUInt32()!! }
				val t9 = values[9].toInt32()!!
				val t10 = values[10].toList()!!.map { it.toInt16()!! }
				val t11 = values[11].toList()!!.map { it.toInt16()!! }
				val t12 = values[12].toList()!!.map { it.toUInt32()!! }
				val t13 = values[13].toList()!!.map { it.toInt16()!! }
				val t14 = values[14].toList()!!.map { it.toInt16()!! }
				val t15 = values[15].toList()!!.map { it.toInt16()!! }
				val t16 = values[16].toList()!!.map { it.toInt16()!! }
				val t17 = values[17].toList()!!.map { it.toUInt32()!! }
				val t18 = values[18].toInt32()!!
				val t19 = values[19].toList()!!.map { it.toInt16()!! }
				val t20 = values[20].toList()!!.map { it.toInt16()!! }
				val t21 = values[21].toList()!!.map { it.toUInt32()!! }
				val t22 = values[22].toList()!!.map { it.toInt16()!! }
				val t23 = values[23].toList()!!.map { it.toInt16()!! }
				val t24 = values[24].toList()!!.map { it.toInt16()!! }
				val t25 = values[25].toList()!!.map { it.toInt16()!! }
				val t26 = values[26].toList()!!.map { it.toUInt32()!! }
				val t27 = values[27].toInt32()!!
				val t28 = values[28].toList()!!.map { it.toInt16()!! }
				val t29 = values[29].toList()!!.map { it.toInt16()!! }
				val t30 = values[30].toList()!!.map { it.toUInt32()!! }
				val t31 = values[31].toList()!!.map { it.toInt16()!! }
				val t32 = values[32].toList()!!.map { it.toInt16()!! }
				val t33 = values[33].toList()!!.map { it.toInt16()!! }
				val t34 = values[34].toList()!!.map { it.toInt16()!! }
				val t35 = values[35].toList()!!.map { it.toUInt32()!! }
				val t36 = values[36].toInt32()!!
				val t37 = values[37].toList()!!.map { it.toInt16()!! }
				val t38 = values[38].toList()!!.map { it.toInt16()!! }
				val t39 = values[39].toList()!!.map { it.toUInt32()!! }
				val t40 = values[40].toList()!!.map { it.toInt16()!! }
				val t41 = values[41].toList()!!.map { it.toInt16()!! }
				val t42 = values[42].toList()!!.map { it.toInt16()!! }
				val t43 = values[43].toList()!!.map { it.toInt16()!! }
				val t44 = values[44].toList()!!.map { it.toUInt32()!! }
				val t45 = values[45].toInt32()!!
				val t46 = values[46].toList()!!.map { it.toInt16()!! }
				val t47 = values[47].toList()!!.map { it.toInt16()!! }
				val t48 = values[48].toList()!!.map { it.toUInt32()!! }
				val t49 = values[49].toList()!!.map { it.toInt16()!! }
				val t50 = values[50].toList()!!.map { it.toInt16()!! }
				val t51 = values[51].toList()!!.map { it.toInt16()!! }
				val t52 = values[52].toList()!!.map { it.toInt16()!! }
				val t53 = values[53].toList()!!.map { it.toUInt32()!! }
				val t54 = values[54].toInt32()!!
				val t55 = values[55].toList()!!.map { it.toInt16()!! }
				val t56 = values[56].toList()!!.map { it.toInt16()!! }
				val t57 = values[57].toList()!!.map { it.toUInt32()!! }
				val t58 = values[58].toList()!!.map { it.toInt16()!! }
				val t59 = values[59].toList()!!.map { it.toInt16()!! }
				val t60 = values[60].toList()!!.map { it.toInt16()!! }
				val t61 = values[61].toList()!!.map { it.toInt16()!! }
				val t62 = values[62].toList()!!.map { it.toUInt32()!! }
				val t63 = values[63].toInt32()!!
				val t64 = values[64].toList()!!.map { it.toInt16()!! }
				val t65 = values[65].toList()!!.map { it.toInt16()!! }
				val t66 = values[66].toList()!!.map { it.toUInt32()!! }
				val t67 = values[67].toList()!!.map { it.toInt16()!! }
				val t68 = values[68].toList()!!.map { it.toInt16()!! }
				val t69 = values[69].toList()!!.map { it.toInt16()!! }
				val t70 = values[70].toList()!!.map { it.toInt16()!! }
				val t71 = values[71].toList()!!.map { it.toUInt32()!! }
				val t72 = values[72].toList()!!.map { it.toUInt8()!! }
				val t73 = values[73].toList()!!.map { it.toInt16()!! }
				val t74 = values[74].toList()!!.map { it.toUInt32()!! }
				onSetBattleExperience(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, sender)
				}
			}
		),
		680U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				val t6 = values[6].toInt8()!!.transform {
						divide(100.0f)
					}
				val t7 = values[7].toInt8()!!.transform {
						divide(100.0f)
					}
				val t8 = values[8].toUInt8()!!
				val t9 = values[9].toInt16()!!
				onZapToon(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, sender)
				}
			}
		),
		681U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				val t6 = values[6].toInt16()!!.transform {
						divide(10.0f)
					}
				val t7 = values[7].toUInt8()!!
				val t8 = values[8].toInt16()!!
				onShowZapToon(t0, t1, t2, t3, t4, t5, t6, t7, t8, sender)
				}
			}
		),
		682U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onSetAttackCode(t0, t1, sender)
				}
			}
		),
	)

	fun setDNAString(arg0: ByteArray, ) {
		setField(670U.toFieldId(), arg0.toFieldValue())
	}

	fun setToonIds(arg0: List<UInt>, arg1: List<UInt>, arg2: List<UInt>, ) {
		setField(671U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setBattleIds(arg0: UByte, arg1: UInt, arg2: UInt, ) {
		setField(672U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setArenaSide(arg0: UByte, ) {
		setField(673U.toFieldId(), arg0.toFieldValue())
	}

	fun avatarEnter() {
		setField(674U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarExit() {
		setField(675U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarNearEnter() {
		setField(676U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarNearExit() {
		setField(677U.toFieldId(), FieldValue.EmptyValue)
	}

	fun toonDied(arg0: UInt, ) {
		setField(678U.toFieldId(), arg0.toFieldValue())
	}

	fun setBattleExperience(arg0: Int, arg1: List<Short>, arg2: List<Short>, arg3: List<UInt>, arg4: List<Short>, arg5: List<Short>, arg6: List<Short>, arg7: List<Short>, arg8: List<UInt>, arg9: Int, arg10: List<Short>, arg11: List<Short>, arg12: List<UInt>, arg13: List<Short>, arg14: List<Short>, arg15: List<Short>, arg16: List<Short>, arg17: List<UInt>, arg18: Int, arg19: List<Short>, arg20: List<Short>, arg21: List<UInt>, arg22: List<Short>, arg23: List<Short>, arg24: List<Short>, arg25: List<Short>, arg26: List<UInt>, arg27: Int, arg28: List<Short>, arg29: List<Short>, arg30: List<UInt>, arg31: List<Short>, arg32: List<Short>, arg33: List<Short>, arg34: List<Short>, arg35: List<UInt>, arg36: Int, arg37: List<Short>, arg38: List<Short>, arg39: List<UInt>, arg40: List<Short>, arg41: List<Short>, arg42: List<Short>, arg43: List<Short>, arg44: List<UInt>, arg45: Int, arg46: List<Short>, arg47: List<Short>, arg48: List<UInt>, arg49: List<Short>, arg50: List<Short>, arg51: List<Short>, arg52: List<Short>, arg53: List<UInt>, arg54: Int, arg55: List<Short>, arg56: List<Short>, arg57: List<UInt>, arg58: List<Short>, arg59: List<Short>, arg60: List<Short>, arg61: List<Short>, arg62: List<UInt>, arg63: Int, arg64: List<Short>, arg65: List<Short>, arg66: List<UInt>, arg67: List<Short>, arg68: List<Short>, arg69: List<Short>, arg70: List<Short>, arg71: List<UInt>, arg72: List<UByte>, arg73: List<Short>, arg74: List<UInt>, ) {
		setField(679U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg2.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg3.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg4.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg5.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg6.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg7.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg8.map { it.toFieldValue() }).toFieldValue(), 
			arg9.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg10.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg11.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg12.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg13.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg14.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg15.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg16.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg17.map { it.toFieldValue() }).toFieldValue(), 
			arg18.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg19.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg20.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg21.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg22.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg23.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg24.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg25.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg26.map { it.toFieldValue() }).toFieldValue(), 
			arg27.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg28.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg29.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg30.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg31.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg32.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg33.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg34.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg35.map { it.toFieldValue() }).toFieldValue(), 
			arg36.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg37.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg38.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg39.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg40.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg41.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg42.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg43.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg44.map { it.toFieldValue() }).toFieldValue(), 
			arg45.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg46.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg47.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg48.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg49.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg50.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg51.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg52.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg53.map { it.toFieldValue() }).toFieldValue(), 
			arg54.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg55.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg56.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg57.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg58.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg59.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg60.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg61.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg62.map { it.toFieldValue() }).toFieldValue(), 
			arg63.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg64.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg65.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg66.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg67.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg68.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg69.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg70.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg71.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg72.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg73.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg74.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun zapToon(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: UByte, arg9: Short, ) {
		setField(680U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int8) {
			divide(100.0f)
		}.toFieldValue(), 
			arg7.unTransform(FieldValue.Type.Int8) {
			divide(100.0f)
		}.toFieldValue(), 
			arg8.toFieldValue(), 
			arg9.toFieldValue(), 
				))
	}

	fun showZapToon(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: UByte, arg8: Short, ) {
		setField(681U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg7.toFieldValue(), 
			arg8.toFieldValue(), 
				))
	}

	fun setAttackCode(arg0: UByte, arg1: UInt, ) {
		setField(682U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetDNAString(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetToonIds(arg0: List<UInt>, arg1: List<UInt>, arg2: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetBattleIds(arg0: UByte, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onSetArenaSide(arg0: UByte, sender: ChannelId? = null) {}
	open fun onAvatarEnter(sender: ChannelId? = null) {}
	open fun onAvatarExit(sender: ChannelId? = null) {}
	open fun onAvatarNearEnter(sender: ChannelId? = null) {}
	open fun onAvatarNearExit(sender: ChannelId? = null) {}
	open fun onToonDied(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBattleExperience(arg0: Int, arg1: List<Short>, arg2: List<Short>, arg3: List<UInt>, arg4: List<Short>, arg5: List<Short>, arg6: List<Short>, arg7: List<Short>, arg8: List<UInt>, arg9: Int, arg10: List<Short>, arg11: List<Short>, arg12: List<UInt>, arg13: List<Short>, arg14: List<Short>, arg15: List<Short>, arg16: List<Short>, arg17: List<UInt>, arg18: Int, arg19: List<Short>, arg20: List<Short>, arg21: List<UInt>, arg22: List<Short>, arg23: List<Short>, arg24: List<Short>, arg25: List<Short>, arg26: List<UInt>, arg27: Int, arg28: List<Short>, arg29: List<Short>, arg30: List<UInt>, arg31: List<Short>, arg32: List<Short>, arg33: List<Short>, arg34: List<Short>, arg35: List<UInt>, arg36: Int, arg37: List<Short>, arg38: List<Short>, arg39: List<UInt>, arg40: List<Short>, arg41: List<Short>, arg42: List<Short>, arg43: List<Short>, arg44: List<UInt>, arg45: Int, arg46: List<Short>, arg47: List<Short>, arg48: List<UInt>, arg49: List<Short>, arg50: List<Short>, arg51: List<Short>, arg52: List<Short>, arg53: List<UInt>, arg54: Int, arg55: List<Short>, arg56: List<Short>, arg57: List<UInt>, arg58: List<Short>, arg59: List<Short>, arg60: List<Short>, arg61: List<Short>, arg62: List<UInt>, arg63: Int, arg64: List<Short>, arg65: List<Short>, arg66: List<UInt>, arg67: List<Short>, arg68: List<Short>, arg69: List<Short>, arg70: List<Short>, arg71: List<UInt>, arg72: List<UByte>, arg73: List<Short>, arg74: List<UInt>, sender: ChannelId? = null) {}
	open fun onZapToon(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: UByte, arg9: Short, sender: ChannelId? = null) {}
	open fun onShowZapToon(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: UByte, arg8: Short, sender: ChannelId? = null) {}
	open fun onSetAttackCode(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
}

open class DistributedSellbotBoss(doId: DOId): DistributedObjectBase(doId, 95U.toDClassId()) {
	companion object {
		val dClassId = 95U.toDClassId()

		object Fields {
			val setCagedToonNpcId: FieldId = 683U.toFieldId()
			val setDooberIds: FieldId = 684U.toFieldId()
			val setBossDamage: FieldId = 685U.toFieldId()
			val setState: FieldId = 686U.toFieldId()
			val hitBoss: FieldId = 687U.toFieldId()
			val hitBossInsides: FieldId = 688U.toFieldId()
			val hitToon: FieldId = 689U.toFieldId()
			val finalPieSplat: FieldId = 690U.toFieldId()
			val touchCage: FieldId = 691U.toFieldId()
			val doStrafe: FieldId = 692U.toFieldId()
			val cagedToonBattleThree: FieldId = 693U.toFieldId()
			val toonPromoted: FieldId = 694U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		683U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCagedToonNpcId(it.toUInt32()!!, sender)
			}
		),
		684U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDooberIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		685U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toInt16()!!
				onSetBossDamage(t0, t1, t2, sender)
				}
			}
		),
		686U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetState(it.toStringValue()!!, sender)
			}
		),
		687U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitBoss(it.toUInt8()!!, sender)
			}
		),
		688U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitBossInsides(sender)
			}
		),
		689U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitToon(it.toUInt32()!!, sender)
			}
		),
		690U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onFinalPieSplat(sender)
			}
		),
		691U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTouchCage(sender)
			}
		),
		692U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onDoStrafe(t0, t1, sender)
				}
			}
		),
		693U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt32()!!
				onCagedToonBattleThree(t0, t1, sender)
				}
			}
		),
		694U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onToonPromoted(it.toUInt8()!!.transform {
null
					}, sender)
			}
		),
	)

	fun setCagedToonNpcId(arg0: UInt, ) {
		setField(683U.toFieldId(), arg0.toFieldValue())
	}

	fun setDooberIds(arg0: List<UInt>, ) {
		setField(684U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setBossDamage(arg0: UShort, arg1: UByte, arg2: Short, ) {
		setField(685U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setState(arg0: String, ) {
		setField(686U.toFieldId(), arg0.toFieldValue())
	}

	fun hitBoss(arg0: UByte, ) {
		setField(687U.toFieldId(), arg0.toFieldValue())
	}

	fun hitBossInsides() {
		setField(688U.toFieldId(), FieldValue.EmptyValue)
	}

	fun hitToon(arg0: UInt, ) {
		setField(689U.toFieldId(), arg0.toFieldValue())
	}

	fun finalPieSplat() {
		setField(690U.toFieldId(), FieldValue.EmptyValue)
	}

	fun touchCage() {
		setField(691U.toFieldId(), FieldValue.EmptyValue)
	}

	fun doStrafe(arg0: UByte, arg1: UByte, ) {
		setField(692U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun cagedToonBattleThree(arg0: UShort, arg1: UInt, ) {
		setField(693U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun toonPromoted(arg0: Double, ) {
		setField(694U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt8) {
null
		}.toFieldValue())
	}

	open fun onSetCagedToonNpcId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDooberIds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetBossDamage(arg0: UShort, arg1: UByte, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, sender: ChannelId? = null) {}
	open fun onHitBoss(arg0: UByte, sender: ChannelId? = null) {}
	open fun onHitBossInsides(sender: ChannelId? = null) {}
	open fun onHitToon(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFinalPieSplat(sender: ChannelId? = null) {}
	open fun onTouchCage(sender: ChannelId? = null) {}
	open fun onDoStrafe(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onCagedToonBattleThree(arg0: UShort, arg1: UInt, sender: ChannelId? = null) {}
	open fun onToonPromoted(arg0: Double, sender: ChannelId? = null) {}
}

open class DistributedCashbotBoss(doId: DOId): DistributedObjectBase(doId, 96U.toDClassId()) {
	companion object {
		val dClassId = 96U.toDClassId()

		object Fields {
			val setState: FieldId = 695U.toFieldId()
			val setBossDamage: FieldId = 696U.toFieldId()
			val setRewardId: FieldId = 697U.toFieldId()
			val applyReward: FieldId = 698U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		695U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetState(it.toStringValue()!!, sender)
			}
		),
		696U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossDamage(it.toUInt16()!!, sender)
			}
		),
		697U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRewardId(it.toUInt16()!!, sender)
			}
		),
		698U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onApplyReward(sender)
			}
		),
	)

	fun setState(arg0: String, ) {
		setField(695U.toFieldId(), arg0.toFieldValue())
	}

	fun setBossDamage(arg0: UShort, ) {
		setField(696U.toFieldId(), arg0.toFieldValue())
	}

	fun setRewardId(arg0: UShort, ) {
		setField(697U.toFieldId(), arg0.toFieldValue())
	}

	fun applyReward() {
		setField(698U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetState(arg0: String, sender: ChannelId? = null) {}
	open fun onSetBossDamage(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetRewardId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onApplyReward(sender: ChannelId? = null) {}
}

open class DistributedCashbotBossCrane(doId: DOId): DistributedObjectBase(doId, 98U.toDClassId()) {
	companion object {
		val dClassId = 98U.toDClassId()

		object Fields {
			val setBossCogId: FieldId = 702U.toFieldId()
			val setIndex: FieldId = 703U.toFieldId()
			val setState: FieldId = 704U.toFieldId()
			val requestControl: FieldId = 705U.toFieldId()
			val requestFree: FieldId = 706U.toFieldId()
			val clearSmoothing: FieldId = 707U.toFieldId()
			val setCablePos: FieldId = 708U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		702U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossCogId(it.toUInt32()!!, sender)
			}
		),
		703U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIndex(it.toUInt8()!!, sender)
			}
		),
		704U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toChar()!!
				val t1 = values[1].toUInt32()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		705U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestControl(sender)
			}
		),
		706U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestFree(sender)
			}
		),
		707U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onClearSmoothing(it.toInt8()!!, sender)
			}
		),
		708U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )), FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toUInt16()!!.transform {
						divide(100.0f)
						modulo(360.0f)
					}
				val t3 = with(LinkPosition) { values[3].toList()!!.map { fromFieldValue(it) }}
				val t4 = values[4].toInt16()!!
				onSetCablePos(t0, t1, t2, t3, t4, sender)
				}
			}
		),
	)

	fun setBossCogId(arg0: UInt, ) {
		setField(702U.toFieldId(), arg0.toFieldValue())
	}

	fun setIndex(arg0: UByte, ) {
		setField(703U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: Char, arg1: UInt, ) {
		setField(704U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestControl() {
		setField(705U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestFree() {
		setField(706U.toFieldId(), FieldValue.EmptyValue)
	}

	fun clearSmoothing(arg0: Byte, ) {
		setField(707U.toFieldId(), arg0.toFieldValue())
	}

	fun setCablePos(arg0: UByte, arg1: Double, arg2: Double, arg3: List<LinkPosition>, arg4: Short, ) {
		setField(708U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
			modulo(360.0f)
		}.toFieldValue(), 
			with(LinkPosition) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ), arg3.map { it.toFieldValue() }).toFieldValue()}, 
			arg4.toFieldValue(), 
				))
	}

	open fun onSetBossCogId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetState(arg0: Char, arg1: UInt, sender: ChannelId? = null) {}
	open fun onRequestControl(sender: ChannelId? = null) {}
	open fun onRequestFree(sender: ChannelId? = null) {}
	open fun onClearSmoothing(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetCablePos(arg0: UByte, arg1: Double, arg2: Double, arg3: List<LinkPosition>, arg4: Short, sender: ChannelId? = null) {}
}

open class DistributedCashbotBossObject(doId: DOId): DistributedObjectBase(doId, 99U.toDClassId()) {
	companion object {
		val dClassId = 99U.toDClassId()

		object Fields {
			val setBossCogId: FieldId = 709U.toFieldId()
			val setObjectState: FieldId = 710U.toFieldId()
			val requestGrab: FieldId = 711U.toFieldId()
			val rejectGrab: FieldId = 712U.toFieldId()
			val requestDrop: FieldId = 713U.toFieldId()
			val hitFloor: FieldId = 714U.toFieldId()
			val requestFree: FieldId = 715U.toFieldId()
			val hitBoss: FieldId = 716U.toFieldId()
			val setX: FieldId = 717U.toFieldId()
			val setY: FieldId = 718U.toFieldId()
			val setZ: FieldId = 719U.toFieldId()
			val setH: FieldId = 720U.toFieldId()
			val setP: FieldId = 721U.toFieldId()
			val setR: FieldId = 722U.toFieldId()
			val setPos: FieldId = 723U.toFieldId()
			val setHpr: FieldId = 724U.toFieldId()
			val setPosHpr: FieldId = 725U.toFieldId()
			val setXY: FieldId = 726U.toFieldId()
			val setXZ: FieldId = 727U.toFieldId()
			val setXYH: FieldId = 728U.toFieldId()
			val setXYZH: FieldId = 729U.toFieldId()
			val setComponentL: FieldId = 730U.toFieldId()
			val setComponentX: FieldId = 731U.toFieldId()
			val setComponentY: FieldId = 732U.toFieldId()
			val setComponentZ: FieldId = 733U.toFieldId()
			val setComponentH: FieldId = 734U.toFieldId()
			val setComponentP: FieldId = 735U.toFieldId()
			val setComponentR: FieldId = 736U.toFieldId()
			val setComponentT: FieldId = 737U.toFieldId()
			val setSmStop: FieldId = 738U.toFieldId()
			val setSmH: FieldId = 739U.toFieldId()
			val setSmZ: FieldId = 740U.toFieldId()
			val setSmXY: FieldId = 741U.toFieldId()
			val setSmXZ: FieldId = 742U.toFieldId()
			val setSmPos: FieldId = 743U.toFieldId()
			val setSmHpr: FieldId = 744U.toFieldId()
			val setSmXYH: FieldId = 745U.toFieldId()
			val setSmXYZH: FieldId = 746U.toFieldId()
			val setSmPosHpr: FieldId = 747U.toFieldId()
			val setSmPosHprL: FieldId = 748U.toFieldId()
			val clearSmoothing: FieldId = 749U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		709U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossCogId(it.toUInt32()!!, sender)
			}
		),
		710U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toChar()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onSetObjectState(t0, t1, t2, sender)
				}
			}
		),
		711U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestGrab(sender)
			}
		),
		712U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectGrab(sender)
			}
		),
		713U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestDrop(sender)
			}
		),
		714U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitFloor(sender)
			}
		),
		715U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toUInt16()!!.transform {
						divide(100.0f)
						modulo(360.0f)
					}
				onRequestFree(t0, t1, t2, t3, sender)
				}
			}
		),
		716U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitBoss(it.toUInt16()!!.transform {
						divide(255.0f)
					}, sender)
			}
		),
		717U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetX(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		718U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetY(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		719U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetZ(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		720U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetH(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		721U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetP(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		722U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetR(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		723U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPos(t0, t1, t2, sender)
				}
			}
		),
		724U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetHpr(t0, t1, t2, sender)
				}
			}
		),
		725U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		726U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetXY(t0, t1, sender)
				}
			}
		),
		727U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetXZ(t0, t1, sender)
				}
			}
		),
		728U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetXYH(t0, t1, t2, sender)
				}
			}
		),
		729U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetXYZH(t0, t1, t2, t3, sender)
				}
			}
		),
		730U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt64,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentL(it.toUInt64()!!, sender)
			}
		),
		731U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentX(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		732U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentY(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		733U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentZ(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		734U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentH(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		735U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentP(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		736U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentR(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		737U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentT(it.toInt16()!!, sender)
			}
		),
		738U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetSmStop(it.toInt16()!!, sender)
			}
		),
		739U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t1 = values[1].toInt16()!!
				onSetSmH(t0, t1, sender)
				}
			}
		),
		740U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!
				onSetSmZ(t0, t1, sender)
				}
			}
		),
		741U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetSmXY(t0, t1, t2, sender)
				}
			}
		),
		742U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetSmXZ(t0, t1, t2, sender)
				}
			}
		),
		743U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!
				onSetSmPos(t0, t1, t2, t3, sender)
				}
			}
		),
		744U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t3 = values[3].toInt16()!!
				onSetSmHpr(t0, t1, t2, t3, sender)
				}
			}
		),
		745U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t3 = values[3].toInt16()!!
				onSetSmXYH(t0, t1, t2, t3, sender)
				}
			}
		),
		746U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t4 = values[4].toInt16()!!
				onSetSmXYZH(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		747U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t6 = values[6].toInt16()!!
				onSetSmPosHpr(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		748U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt64()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t6 = values[6].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t7 = values[7].toInt16()!!
				onSetSmPosHprL(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		749U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onClearSmoothing(it.toInt8()!!, sender)
			}
		),
	)

	fun setBossCogId(arg0: UInt, ) {
		setField(709U.toFieldId(), arg0.toFieldValue())
	}

	fun setObjectState(arg0: Char, arg1: UInt, arg2: UInt, ) {
		setField(710U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestGrab() {
		setField(711U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rejectGrab() {
		setField(712U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestDrop() {
		setField(713U.toFieldId(), FieldValue.EmptyValue)
	}

	fun hitFloor() {
		setField(714U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestFree(arg0: Double, arg1: Double, arg2: Double, arg3: Double, ) {
		setField(715U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
			modulo(360.0f)
		}.toFieldValue(), 
				))
	}

	fun hitBoss(arg0: Double, ) {
		setField(716U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(255.0f)
		}.toFieldValue())
	}

	fun setX(arg0: Double, ) {
		setField(717U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setY(arg0: Double, ) {
		setField(718U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setZ(arg0: Double, ) {
		setField(719U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setH(arg0: Double, ) {
		setField(720U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setP(arg0: Double, ) {
		setField(721U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setR(arg0: Double, ) {
		setField(722U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setPos(arg0: Double, arg1: Double, arg2: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()

		setField(723U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setHpr(arg0: Double, arg1: Double, arg2: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(724U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg4Value = arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg5Value = arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(725U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, ))
	}

	fun setXY(arg0: Double, arg1: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()

		setField(726U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setXZ(arg0: Double, arg1: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()

		setField(727U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setXYH(arg0: Double, arg1: Double, arg2: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(728U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(729U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	fun setComponentL(arg0: ULong, ) {
		setField(730U.toFieldId(), arg0.toFieldValue())
	}

	fun setComponentX(arg0: Double, ) {
		setField(731U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setComponentY(arg0: Double, ) {
		setField(732U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setComponentZ(arg0: Double, ) {
		setField(733U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setComponentH(arg0: Double, ) {
		setField(734U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setComponentP(arg0: Double, ) {
		setField(735U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setComponentR(arg0: Double, ) {
		setField(736U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setComponentT(arg0: Short, ) {
		setField(737U.toFieldId(), arg0.toFieldValue())
	}

	fun setSmStop(arg0: Short, ) {
		val arg0Value = arg0.toFieldValue()

		setField(738U.toFieldId(), FieldValue.TupleValue(arg0Value, ))
	}

	fun setSmH(arg0: Double, arg1: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg1Value = arg1.toFieldValue()

		setField(739U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setSmZ(arg0: Double, arg1: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.toFieldValue()

		setField(740U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setSmXY(arg0: Double, arg1: Double, arg2: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.toFieldValue()

		setField(741U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setSmXZ(arg0: Double, arg1: Double, arg2: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.toFieldValue()

		setField(742U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setSmPos(arg0: Double, arg1: Double, arg2: Double, arg3: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.toFieldValue()

		setField(743U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	fun setSmHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg3Value = arg3.toFieldValue()

		setField(744U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	fun setSmXYH(arg0: Double, arg1: Double, arg2: Double, arg3: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg3Value = arg3.toFieldValue()

		setField(745U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	fun setSmXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg4Value = arg4.toFieldValue()

		setField(746U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, ))
	}

	fun setSmPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg4Value = arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg5Value = arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg6Value = arg6.toFieldValue()

		setField(747U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, arg6Value, ))
	}

	fun setSmPosHprL(arg0: ULong, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Short, ) {
		val arg0Value = arg0.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg4Value = arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg5Value = arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg6Value = arg6.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg7Value = arg7.toFieldValue()

		setField(748U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, arg6Value, arg7Value, ))
	}

	fun clearSmoothing(arg0: Byte, ) {
		setField(749U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetBossCogId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetObjectState(arg0: Char, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onRequestGrab(sender: ChannelId? = null) {}
	open fun onRejectGrab(sender: ChannelId? = null) {}
	open fun onRequestDrop(sender: ChannelId? = null) {}
	open fun onHitFloor(sender: ChannelId? = null) {}
	open fun onRequestFree(arg0: Double, arg1: Double, arg2: Double, arg3: Double, sender: ChannelId? = null) {}
	open fun onHitBoss(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetX(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetY(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetZ(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetH(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetP(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetR(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetPos(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetHpr(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetXY(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetXZ(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetXYH(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, sender: ChannelId? = null) {}
	open fun onSetComponentL(arg0: ULong, sender: ChannelId? = null) {}
	open fun onSetComponentX(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentY(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentZ(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentH(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentP(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentR(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentT(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetSmStop(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetSmH(arg0: Double, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetSmZ(arg0: Double, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetSmXY(arg0: Double, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetSmXZ(arg0: Double, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetSmPos(arg0: Double, arg1: Double, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onSetSmHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onSetSmXYH(arg0: Double, arg1: Double, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onSetSmXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Short, sender: ChannelId? = null) {}
	open fun onSetSmPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Short, sender: ChannelId? = null) {}
	open fun onSetSmPosHprL(arg0: ULong, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Short, sender: ChannelId? = null) {}
	open fun onClearSmoothing(arg0: Byte, sender: ChannelId? = null) {}
}

open class DistributedCashbotBossSafe(doId: DOId): DistributedObjectBase(doId, 100U.toDClassId()) {
	companion object {
		val dClassId = 100U.toDClassId()

		object Fields {
			val setIndex: FieldId = 750U.toFieldId()
			val requestInitial: FieldId = 751U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		750U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIndex(it.toUInt8()!!, sender)
			}
		),
		751U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestInitial(sender)
			}
		),
	)

	fun setIndex(arg0: UByte, ) {
		setField(750U.toFieldId(), arg0.toFieldValue())
	}

	fun requestInitial() {
		setField(751U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestInitial(sender: ChannelId? = null) {}
}

open class DistributedCashbotBossGoon(doId: DOId): DistributedObjectBase(doId, 101U.toDClassId()) {
	companion object {
		val dClassId = 101U.toDClassId()

		object Fields {
			val requestBattle: FieldId = 752U.toFieldId()
			val requestStunned: FieldId = 753U.toFieldId()
			val setVelocity: FieldId = 754U.toFieldId()
			val setHFov: FieldId = 755U.toFieldId()
			val setAttackRadius: FieldId = 756U.toFieldId()
			val setStrength: FieldId = 757U.toFieldId()
			val setGoonScale: FieldId = 758U.toFieldId()
			val setupGoon: FieldId = 759U.toFieldId()
			val setTarget: FieldId = 760U.toFieldId()
			val destroyGoon: FieldId = 761U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		752U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBattle(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		753U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestStunned(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		754U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetVelocity(it.toUInt8()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		755U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHFov(it.toUInt8()!!, sender)
			}
		),
		756U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAttackRadius(it.toUInt8()!!, sender)
			}
		),
		757U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetStrength(it.toUInt8()!!, sender)
			}
		),
		758U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGoonScale(it.toUInt8()!!.transform {
						divide(50.0f)
					}, sender)
			}
		),
		759U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				val t4 = values[4].toUInt8()!!.transform {
						divide(50.0f)
					}
				onSetupGoon(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		760U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toUInt16()!!.transform {
						divide(100.0f)
						modulo(360.0f)
					}
				val t3 = values[3].toInt16()!!
				onSetTarget(t0, t1, t2, t3, sender)
				}
			}
		),
		761U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onDestroyGoon(sender)
			}
		),
	)

	fun requestBattle(arg0: Double, ) {
		setField(752U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun requestStunned(arg0: Double, ) {
		setField(753U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setVelocity(arg0: Double, ) {
		setField(754U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt8) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setHFov(arg0: UByte, ) {
		setField(755U.toFieldId(), arg0.toFieldValue())
	}

	fun setAttackRadius(arg0: UByte, ) {
		setField(756U.toFieldId(), arg0.toFieldValue())
	}

	fun setStrength(arg0: UByte, ) {
		setField(757U.toFieldId(), arg0.toFieldValue())
	}

	fun setGoonScale(arg0: Double, ) {
		setField(758U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt8) {
			divide(50.0f)
		}.toFieldValue())
	}

	fun setupGoon(arg0: Double, arg1: UByte, arg2: UByte, arg3: UByte, arg4: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.UInt8) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.toFieldValue()
		val arg2Value = arg2.toFieldValue()
		val arg3Value = arg3.toFieldValue()
		val arg4Value = arg4.unTransform(FieldValue.Type.UInt8) {
			divide(50.0f)
		}.toFieldValue()

		setField(759U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, ))
	}

	fun setTarget(arg0: Double, arg1: Double, arg2: Double, arg3: Short, ) {
		setField(760U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
			modulo(360.0f)
		}.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun destroyGoon() {
		setField(761U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onRequestBattle(arg0: Double, sender: ChannelId? = null) {}
	open fun onRequestStunned(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetVelocity(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetHFov(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetAttackRadius(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetStrength(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetGoonScale(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetupGoon(arg0: Double, arg1: UByte, arg2: UByte, arg3: UByte, arg4: Double, sender: ChannelId? = null) {}
	open fun onSetTarget(arg0: Double, arg1: Double, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onDestroyGoon(sender: ChannelId? = null) {}
}

open class DistributedBattleBase(doId: DOId): DistributedObjectBase(doId, 102U.toDClassId()) {
	companion object {
		val dClassId = 102U.toDClassId()

		object Fields {
			val setLevelDoId: FieldId = 762U.toFieldId()
			val setBattleCellId: FieldId = 763U.toFieldId()
			val setInteractivePropTrackBonus: FieldId = 764U.toFieldId()
			val setPosition: FieldId = 765U.toFieldId()
			val setZoneId: FieldId = 766U.toFieldId()
			val setInitialSuitPos: FieldId = 767U.toFieldId()
			val setMembers: FieldId = 768U.toFieldId()
			val adjust: FieldId = 769U.toFieldId()
			val setMovie: FieldId = 770U.toFieldId()
			val setChosenToonAttacks: FieldId = 771U.toFieldId()
			val setBattleExperience: FieldId = 772U.toFieldId()
			val denyLocalToonJoin: FieldId = 773U.toFieldId()
			val setBossBattle: FieldId = 774U.toFieldId()
			val setState: FieldId = 775U.toFieldId()
			val faceOffDone: FieldId = 776U.toFieldId()
			val toonRequestJoin: FieldId = 777U.toFieldId()
			val toonRequestRun: FieldId = 778U.toFieldId()
			val toonDied: FieldId = 779U.toFieldId()
			val adjustDone: FieldId = 780U.toFieldId()
			val timeout: FieldId = 781U.toFieldId()
			val movieDone: FieldId = 782U.toFieldId()
			val rewardDone: FieldId = 783U.toFieldId()
			val joinDone: FieldId = 784U.toFieldId()
			val requestAttack: FieldId = 785U.toFieldId()
			val requestPetProxy: FieldId = 786U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		762U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLevelDoId(it.toUInt32()!!, sender)
			}
		),
		763U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBattleCellId(it.toUInt32()!!, sender)
			}
		),
		764U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetInteractivePropTrackBonus(it.toInt8()!!, sender)
			}
		),
		765U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosition(t0, t1, t2, sender)
				}
			}
		),
		766U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetZoneId(it.toUInt32()!!, sender)
			}
		),
		767U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetInitialSuitPos(t0, t1, t2, sender)
				}
			}
		),
		768U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toStringValue()!!
				val t4 = values[4].toStringValue()!!
				val t5 = values[5].toStringValue()!!
				val t6 = values[6].toList()!!.map { it.toUInt32()!! }
				val t7 = values[7].toStringValue()!!
				val t8 = values[8].toStringValue()!!
				val t9 = values[9].toStringValue()!!
				val t10 = values[10].toStringValue()!!
				val t11 = values[11].toInt16()!!
				onSetMembers(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, sender)
				}
			}
		),
		769U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAdjust(it.toInt16()!!, sender)
			}
		),
		770U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				val t3 = values[3].toInt8()!!
				val t4 = values[4].toInt8()!!
				val t5 = values[5].toInt8()!!
				val t6 = values[6].toInt32()!!
				val t7 = values[7].toList()!!.map { it.toInt16()!! }
				val t8 = values[8].toInt16()!!
				val t9 = values[9].toInt16()!!
				val t10 = values[10].toList()!!.map { it.toInt16()!! }
				val t11 = values[11].toInt8()!!
				val t12 = values[12].toInt8()!!
				val t13 = values[13].toInt8()!!
				val t14 = values[14].toInt8()!!
				val t15 = values[15].toInt8()!!
				val t16 = values[16].toInt32()!!
				val t17 = values[17].toList()!!.map { it.toInt16()!! }
				val t18 = values[18].toInt16()!!
				val t19 = values[19].toInt16()!!
				val t20 = values[20].toList()!!.map { it.toInt16()!! }
				val t21 = values[21].toInt8()!!
				val t22 = values[22].toInt8()!!
				val t23 = values[23].toInt8()!!
				val t24 = values[24].toInt8()!!
				val t25 = values[25].toInt8()!!
				val t26 = values[26].toInt32()!!
				val t27 = values[27].toList()!!.map { it.toInt16()!! }
				val t28 = values[28].toInt16()!!
				val t29 = values[29].toInt16()!!
				val t30 = values[30].toList()!!.map { it.toInt16()!! }
				val t31 = values[31].toInt8()!!
				val t32 = values[32].toInt8()!!
				val t33 = values[33].toInt8()!!
				val t34 = values[34].toInt8()!!
				val t35 = values[35].toInt8()!!
				val t36 = values[36].toInt32()!!
				val t37 = values[37].toList()!!.map { it.toInt16()!! }
				val t38 = values[38].toInt16()!!
				val t39 = values[39].toInt16()!!
				val t40 = values[40].toList()!!.map { it.toInt16()!! }
				val t41 = values[41].toInt8()!!
				val t42 = values[42].toInt8()!!
				val t43 = values[43].toInt8()!!
				val t44 = values[44].toInt8()!!
				val t45 = values[45].toInt8()!!
				val t46 = values[46].toList()!!.map { it.toInt16()!! }
				val t47 = values[47].toInt8()!!
				val t48 = values[48].toInt8()!!
				val t49 = values[49].toInt8()!!
				val t50 = values[50].toInt8()!!
				val t51 = values[51].toInt8()!!
				val t52 = values[52].toInt8()!!
				val t53 = values[53].toList()!!.map { it.toInt16()!! }
				val t54 = values[54].toInt8()!!
				val t55 = values[55].toInt8()!!
				val t56 = values[56].toInt8()!!
				val t57 = values[57].toInt8()!!
				val t58 = values[58].toInt8()!!
				val t59 = values[59].toInt8()!!
				val t60 = values[60].toList()!!.map { it.toInt16()!! }
				val t61 = values[61].toInt8()!!
				val t62 = values[62].toInt8()!!
				val t63 = values[63].toInt8()!!
				val t64 = values[64].toInt8()!!
				val t65 = values[65].toInt8()!!
				val t66 = values[66].toInt8()!!
				val t67 = values[67].toList()!!.map { it.toInt16()!! }
				val t68 = values[68].toInt8()!!
				val t69 = values[69].toInt8()!!
				val t70 = values[70].toInt8()!!
				onSetMovie(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, sender)
				}
			}
		),
		771U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toInt16()!! }
				val t2 = values[2].toList()!!.map { it.toInt16()!! }
				val t3 = values[3].toList()!!.map { it.toInt32()!! }
				onSetChosenToonAttacks(t0, t1, t2, t3, sender)
				}
			}
		),
		772U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toList()!!.map { it.toInt16()!! }
				val t2 = values[2].toList()!!.map { it.toInt16()!! }
				val t3 = values[3].toList()!!.map { it.toUInt32()!! }
				val t4 = values[4].toList()!!.map { it.toInt16()!! }
				val t5 = values[5].toList()!!.map { it.toInt16()!! }
				val t6 = values[6].toList()!!.map { it.toInt16()!! }
				val t7 = values[7].toList()!!.map { it.toInt16()!! }
				val t8 = values[8].toList()!!.map { it.toUInt32()!! }
				val t9 = values[9].toInt32()!!
				val t10 = values[10].toList()!!.map { it.toInt16()!! }
				val t11 = values[11].toList()!!.map { it.toInt16()!! }
				val t12 = values[12].toList()!!.map { it.toUInt32()!! }
				val t13 = values[13].toList()!!.map { it.toInt16()!! }
				val t14 = values[14].toList()!!.map { it.toInt16()!! }
				val t15 = values[15].toList()!!.map { it.toInt16()!! }
				val t16 = values[16].toList()!!.map { it.toInt16()!! }
				val t17 = values[17].toList()!!.map { it.toUInt32()!! }
				val t18 = values[18].toInt32()!!
				val t19 = values[19].toList()!!.map { it.toInt16()!! }
				val t20 = values[20].toList()!!.map { it.toInt16()!! }
				val t21 = values[21].toList()!!.map { it.toUInt32()!! }
				val t22 = values[22].toList()!!.map { it.toInt16()!! }
				val t23 = values[23].toList()!!.map { it.toInt16()!! }
				val t24 = values[24].toList()!!.map { it.toInt16()!! }
				val t25 = values[25].toList()!!.map { it.toInt16()!! }
				val t26 = values[26].toList()!!.map { it.toUInt32()!! }
				val t27 = values[27].toInt32()!!
				val t28 = values[28].toList()!!.map { it.toInt16()!! }
				val t29 = values[29].toList()!!.map { it.toInt16()!! }
				val t30 = values[30].toList()!!.map { it.toUInt32()!! }
				val t31 = values[31].toList()!!.map { it.toInt16()!! }
				val t32 = values[32].toList()!!.map { it.toInt16()!! }
				val t33 = values[33].toList()!!.map { it.toInt16()!! }
				val t34 = values[34].toList()!!.map { it.toInt16()!! }
				val t35 = values[35].toList()!!.map { it.toUInt32()!! }
				val t36 = values[36].toList()!!.map { it.toUInt8()!! }
				val t37 = values[37].toList()!!.map { it.toInt16()!! }
				val t38 = values[38].toList()!!.map { it.toUInt32()!! }
				onSetBattleExperience(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, sender)
				}
			}
		),
		773U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onDenyLocalToonJoin(sender)
			}
		),
		774U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossBattle(it.toUInt8()!!, sender)
			}
		),
		775U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		776U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onFaceOffDone(sender)
			}
		),
		777U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onToonRequestJoin(t0, t1, t2, sender)
				}
			}
		),
		778U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonRequestRun(sender)
			}
		),
		779U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonDied(sender)
			}
		),
		780U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAdjustDone(sender)
			}
		),
		781U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTimeout(sender)
			}
		),
		782U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onMovieDone(sender)
			}
		),
		783U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRewardDone(sender)
			}
		),
		784U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onJoinDone(it.toUInt32()!!, sender)
			}
		),
		785U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt32()!!
				onRequestAttack(t0, t1, t2, sender)
				}
			}
		),
		786U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestPetProxy(it.toUInt32()!!, sender)
			}
		),
	)

	fun setLevelDoId(arg0: UInt, ) {
		setField(762U.toFieldId(), arg0.toFieldValue())
	}

	fun setBattleCellId(arg0: UInt, ) {
		setField(763U.toFieldId(), arg0.toFieldValue())
	}

	fun setInteractivePropTrackBonus(arg0: Byte, ) {
		setField(764U.toFieldId(), arg0.toFieldValue())
	}

	fun setPosition(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(765U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setZoneId(arg0: UInt, ) {
		setField(766U.toFieldId(), arg0.toFieldValue())
	}

	fun setInitialSuitPos(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(767U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setMembers(arg0: List<UInt>, arg1: String, arg2: String, arg3: String, arg4: String, arg5: String, arg6: List<UInt>, arg7: String, arg8: String, arg9: String, arg10: String, arg11: Short, ) {
		setField(768U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg6.map { it.toFieldValue() }).toFieldValue(), 
			arg7.toFieldValue(), 
			arg8.toFieldValue(), 
			arg9.toFieldValue(), 
			arg10.toFieldValue(), 
			arg11.toFieldValue(), 
				))
	}

	fun adjust(arg0: Short, ) {
		setField(769U.toFieldId(), arg0.toFieldValue())
	}

	fun setMovie(arg0: Byte, arg1: List<UInt>, arg2: List<UInt>, arg3: Byte, arg4: Byte, arg5: Byte, arg6: Int, arg7: List<Short>, arg8: Short, arg9: Short, arg10: List<Short>, arg11: Byte, arg12: Byte, arg13: Byte, arg14: Byte, arg15: Byte, arg16: Int, arg17: List<Short>, arg18: Short, arg19: Short, arg20: List<Short>, arg21: Byte, arg22: Byte, arg23: Byte, arg24: Byte, arg25: Byte, arg26: Int, arg27: List<Short>, arg28: Short, arg29: Short, arg30: List<Short>, arg31: Byte, arg32: Byte, arg33: Byte, arg34: Byte, arg35: Byte, arg36: Int, arg37: List<Short>, arg38: Short, arg39: Short, arg40: List<Short>, arg41: Byte, arg42: Byte, arg43: Byte, arg44: Byte, arg45: Byte, arg46: List<Short>, arg47: Byte, arg48: Byte, arg49: Byte, arg50: Byte, arg51: Byte, arg52: Byte, arg53: List<Short>, arg54: Byte, arg55: Byte, arg56: Byte, arg57: Byte, arg58: Byte, arg59: Byte, arg60: List<Short>, arg61: Byte, arg62: Byte, arg63: Byte, arg64: Byte, arg65: Byte, arg66: Byte, arg67: List<Short>, arg68: Byte, arg69: Byte, arg70: Byte, ) {
		setField(770U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg7.map { it.toFieldValue() }).toFieldValue(), 
			arg8.toFieldValue(), 
			arg9.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg10.map { it.toFieldValue() }).toFieldValue(), 
			arg11.toFieldValue(), 
			arg12.toFieldValue(), 
			arg13.toFieldValue(), 
			arg14.toFieldValue(), 
			arg15.toFieldValue(), 
			arg16.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg17.map { it.toFieldValue() }).toFieldValue(), 
			arg18.toFieldValue(), 
			arg19.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg20.map { it.toFieldValue() }).toFieldValue(), 
			arg21.toFieldValue(), 
			arg22.toFieldValue(), 
			arg23.toFieldValue(), 
			arg24.toFieldValue(), 
			arg25.toFieldValue(), 
			arg26.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg27.map { it.toFieldValue() }).toFieldValue(), 
			arg28.toFieldValue(), 
			arg29.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg30.map { it.toFieldValue() }).toFieldValue(), 
			arg31.toFieldValue(), 
			arg32.toFieldValue(), 
			arg33.toFieldValue(), 
			arg34.toFieldValue(), 
			arg35.toFieldValue(), 
			arg36.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg37.map { it.toFieldValue() }).toFieldValue(), 
			arg38.toFieldValue(), 
			arg39.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg40.map { it.toFieldValue() }).toFieldValue(), 
			arg41.toFieldValue(), 
			arg42.toFieldValue(), 
			arg43.toFieldValue(), 
			arg44.toFieldValue(), 
			arg45.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg46.map { it.toFieldValue() }).toFieldValue(), 
			arg47.toFieldValue(), 
			arg48.toFieldValue(), 
			arg49.toFieldValue(), 
			arg50.toFieldValue(), 
			arg51.toFieldValue(), 
			arg52.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg53.map { it.toFieldValue() }).toFieldValue(), 
			arg54.toFieldValue(), 
			arg55.toFieldValue(), 
			arg56.toFieldValue(), 
			arg57.toFieldValue(), 
			arg58.toFieldValue(), 
			arg59.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg60.map { it.toFieldValue() }).toFieldValue(), 
			arg61.toFieldValue(), 
			arg62.toFieldValue(), 
			arg63.toFieldValue(), 
			arg64.toFieldValue(), 
			arg65.toFieldValue(), 
			arg66.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg67.map { it.toFieldValue() }).toFieldValue(), 
			arg68.toFieldValue(), 
			arg69.toFieldValue(), 
			arg70.toFieldValue(), 
				))
	}

	fun setChosenToonAttacks(arg0: List<UInt>, arg1: List<Short>, arg2: List<Short>, arg3: List<Int>, ) {
		setField(771U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg2.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int32, arg3.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setBattleExperience(arg0: Int, arg1: List<Short>, arg2: List<Short>, arg3: List<UInt>, arg4: List<Short>, arg5: List<Short>, arg6: List<Short>, arg7: List<Short>, arg8: List<UInt>, arg9: Int, arg10: List<Short>, arg11: List<Short>, arg12: List<UInt>, arg13: List<Short>, arg14: List<Short>, arg15: List<Short>, arg16: List<Short>, arg17: List<UInt>, arg18: Int, arg19: List<Short>, arg20: List<Short>, arg21: List<UInt>, arg22: List<Short>, arg23: List<Short>, arg24: List<Short>, arg25: List<Short>, arg26: List<UInt>, arg27: Int, arg28: List<Short>, arg29: List<Short>, arg30: List<UInt>, arg31: List<Short>, arg32: List<Short>, arg33: List<Short>, arg34: List<Short>, arg35: List<UInt>, arg36: List<UByte>, arg37: List<Short>, arg38: List<UInt>, ) {
		setField(772U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg2.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg3.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg4.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg5.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg6.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg7.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg8.map { it.toFieldValue() }).toFieldValue(), 
			arg9.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg10.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg11.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg12.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg13.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg14.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg15.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg16.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg17.map { it.toFieldValue() }).toFieldValue(), 
			arg18.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg19.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg20.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg21.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg22.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg23.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg24.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg25.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg26.map { it.toFieldValue() }).toFieldValue(), 
			arg27.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg28.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg29.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg30.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg31.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg32.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg33.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg34.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg35.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg36.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg37.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg38.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun denyLocalToonJoin() {
		setField(773U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setBossBattle(arg0: UByte, ) {
		setField(774U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: String, arg1: Short, ) {
		setField(775U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun faceOffDone() {
		setField(776U.toFieldId(), FieldValue.EmptyValue)
	}

	fun toonRequestJoin(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(777U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun toonRequestRun() {
		setField(778U.toFieldId(), FieldValue.EmptyValue)
	}

	fun toonDied() {
		setField(779U.toFieldId(), FieldValue.EmptyValue)
	}

	fun adjustDone() {
		setField(780U.toFieldId(), FieldValue.EmptyValue)
	}

	fun timeout() {
		setField(781U.toFieldId(), FieldValue.EmptyValue)
	}

	fun movieDone() {
		setField(782U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rewardDone() {
		setField(783U.toFieldId(), FieldValue.EmptyValue)
	}

	fun joinDone(arg0: UInt, ) {
		setField(784U.toFieldId(), arg0.toFieldValue())
	}

	fun requestAttack(arg0: Byte, arg1: Byte, arg2: Int, ) {
		setField(785U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestPetProxy(arg0: UInt, ) {
		setField(786U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetLevelDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBattleCellId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetInteractivePropTrackBonus(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetPosition(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetInitialSuitPos(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetMembers(arg0: List<UInt>, arg1: String, arg2: String, arg3: String, arg4: String, arg5: String, arg6: List<UInt>, arg7: String, arg8: String, arg9: String, arg10: String, arg11: Short, sender: ChannelId? = null) {}
	open fun onAdjust(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: Byte, arg1: List<UInt>, arg2: List<UInt>, arg3: Byte, arg4: Byte, arg5: Byte, arg6: Int, arg7: List<Short>, arg8: Short, arg9: Short, arg10: List<Short>, arg11: Byte, arg12: Byte, arg13: Byte, arg14: Byte, arg15: Byte, arg16: Int, arg17: List<Short>, arg18: Short, arg19: Short, arg20: List<Short>, arg21: Byte, arg22: Byte, arg23: Byte, arg24: Byte, arg25: Byte, arg26: Int, arg27: List<Short>, arg28: Short, arg29: Short, arg30: List<Short>, arg31: Byte, arg32: Byte, arg33: Byte, arg34: Byte, arg35: Byte, arg36: Int, arg37: List<Short>, arg38: Short, arg39: Short, arg40: List<Short>, arg41: Byte, arg42: Byte, arg43: Byte, arg44: Byte, arg45: Byte, arg46: List<Short>, arg47: Byte, arg48: Byte, arg49: Byte, arg50: Byte, arg51: Byte, arg52: Byte, arg53: List<Short>, arg54: Byte, arg55: Byte, arg56: Byte, arg57: Byte, arg58: Byte, arg59: Byte, arg60: List<Short>, arg61: Byte, arg62: Byte, arg63: Byte, arg64: Byte, arg65: Byte, arg66: Byte, arg67: List<Short>, arg68: Byte, arg69: Byte, arg70: Byte, sender: ChannelId? = null) {}
	open fun onSetChosenToonAttacks(arg0: List<UInt>, arg1: List<Short>, arg2: List<Short>, arg3: List<Int>, sender: ChannelId? = null) {}
	open fun onSetBattleExperience(arg0: Int, arg1: List<Short>, arg2: List<Short>, arg3: List<UInt>, arg4: List<Short>, arg5: List<Short>, arg6: List<Short>, arg7: List<Short>, arg8: List<UInt>, arg9: Int, arg10: List<Short>, arg11: List<Short>, arg12: List<UInt>, arg13: List<Short>, arg14: List<Short>, arg15: List<Short>, arg16: List<Short>, arg17: List<UInt>, arg18: Int, arg19: List<Short>, arg20: List<Short>, arg21: List<UInt>, arg22: List<Short>, arg23: List<Short>, arg24: List<Short>, arg25: List<Short>, arg26: List<UInt>, arg27: Int, arg28: List<Short>, arg29: List<Short>, arg30: List<UInt>, arg31: List<Short>, arg32: List<Short>, arg33: List<Short>, arg34: List<Short>, arg35: List<UInt>, arg36: List<UByte>, arg37: List<Short>, arg38: List<UInt>, sender: ChannelId? = null) {}
	open fun onDenyLocalToonJoin(sender: ChannelId? = null) {}
	open fun onSetBossBattle(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onFaceOffDone(sender: ChannelId? = null) {}
	open fun onToonRequestJoin(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onToonRequestRun(sender: ChannelId? = null) {}
	open fun onToonDied(sender: ChannelId? = null) {}
	open fun onAdjustDone(sender: ChannelId? = null) {}
	open fun onTimeout(sender: ChannelId? = null) {}
	open fun onMovieDone(sender: ChannelId? = null) {}
	open fun onRewardDone(sender: ChannelId? = null) {}
	open fun onJoinDone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestAttack(arg0: Byte, arg1: Byte, arg2: Int, sender: ChannelId? = null) {}
	open fun onRequestPetProxy(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedBattle(doId: DOId): DistributedObjectBase(doId, 103U.toDClassId()) {
	companion object {
		val dClassId = 103U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedBattleBldg(doId: DOId): DistributedObjectBase(doId, 104U.toDClassId()) {
	companion object {
		val dClassId = 104U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedBattleTutorial(doId: DOId): DistributedObjectBase(doId, 105U.toDClassId()) {
	companion object {
		val dClassId = 105U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedLevelBattle(doId: DOId): DistributedObjectBase(doId, 106U.toDClassId()) {
	companion object {
		val dClassId = 106U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedBattleFactory(doId: DOId): DistributedObjectBase(doId, 107U.toDClassId()) {
	companion object {
		val dClassId = 107U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedMintBattle(doId: DOId): DistributedObjectBase(doId, 108U.toDClassId()) {
	companion object {
		val dClassId = 108U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedStageBattle(doId: DOId): DistributedObjectBase(doId, 109U.toDClassId()) {
	companion object {
		val dClassId = 109U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedBattleFinal(doId: DOId): DistributedObjectBase(doId, 110U.toDClassId()) {
	companion object {
		val dClassId = 110U.toDClassId()

		object Fields {
			val setBossCogId: FieldId = 787U.toFieldId()
			val setBattleNumber: FieldId = 788U.toFieldId()
			val setBattleSide: FieldId = 789U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		787U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossCogId(it.toUInt32()!!, sender)
			}
		),
		788U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBattleNumber(it.toUInt8()!!, sender)
			}
		),
		789U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBattleSide(it.toUInt8()!!, sender)
			}
		),
	)

	fun setBossCogId(arg0: UInt, ) {
		setField(787U.toFieldId(), arg0.toFieldValue())
	}

	fun setBattleNumber(arg0: UByte, ) {
		setField(788U.toFieldId(), arg0.toFieldValue())
	}

	fun setBattleSide(arg0: UByte, ) {
		setField(789U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetBossCogId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBattleNumber(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetBattleSide(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedBoat(doId: DOId): DistributedObjectBase(doId, 111U.toDClassId()) {
	companion object {
		val dClassId = 111U.toDClassId()

		object Fields {
			val setState: FieldId = 790U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		790U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
	)

	fun setState(arg0: String, arg1: Short, ) {
		setField(790U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
}

open class DistributedButterfly(doId: DOId): DistributedObjectBase(doId, 112U.toDClassId()) {
	companion object {
		val dClassId = 112U.toDClassId()

		object Fields {
			val setArea: FieldId = 791U.toFieldId()
			val setState: FieldId = 792U.toFieldId()
			val avatarEnter: FieldId = 793U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		791U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!
				val t1 = values[1].toInt16()!!
				onSetArea(t0, t1, sender)
				}
			}
		),
		792U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!
				onSetState(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		793U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarEnter(sender)
			}
		),
	)

	fun setArea(arg0: Short, arg1: Short, ) {
		setField(791U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setState(arg0: Byte, arg1: UByte, arg2: UByte, arg3: Double, arg4: Short, ) {
		setField(792U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.UInt16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun avatarEnter() {
		setField(793U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetArea(arg0: Short, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetState(arg0: Byte, arg1: UByte, arg2: UByte, arg3: Double, arg4: Short, sender: ChannelId? = null) {}
	open fun onAvatarEnter(sender: ChannelId? = null) {}
}

open class DistributedMMPiano(doId: DOId): DistributedObjectBase(doId, 113U.toDClassId()) {
	companion object {
		val dClassId = 113U.toDClassId()

		object Fields {
			val requestSpeedUp: FieldId = 794U.toFieldId()
			val requestChangeDirection: FieldId = 795U.toFieldId()
			val setSpeed: FieldId = 796U.toFieldId()
			val playSpeedUp: FieldId = 797U.toFieldId()
			val playChangeDirection: FieldId = 798U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		794U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestSpeedUp(sender)
			}
		),
		795U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestChangeDirection(sender)
			}
		),
		796U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(1000.0f)
					}
				val t1 = values[1].toUInt16()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetSpeed(t0, t1, t2, sender)
				}
			}
		),
		797U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPlaySpeedUp(it.toUInt32()!!, sender)
			}
		),
		798U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPlayChangeDirection(it.toUInt32()!!, sender)
			}
		),
	)

	fun requestSpeedUp() {
		setField(794U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestChangeDirection() {
		setField(795U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setSpeed(arg0: Double, arg1: Double, arg2: Short, ) {
		setField(796U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun playSpeedUp(arg0: UInt, ) {
		setField(797U.toFieldId(), arg0.toFieldValue())
	}

	fun playChangeDirection(arg0: UInt, ) {
		setField(798U.toFieldId(), arg0.toFieldValue())
	}

	open fun onRequestSpeedUp(sender: ChannelId? = null) {}
	open fun onRequestChangeDirection(sender: ChannelId? = null) {}
	open fun onSetSpeed(arg0: Double, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onPlaySpeedUp(arg0: UInt, sender: ChannelId? = null) {}
	open fun onPlayChangeDirection(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedDGFlower(doId: DOId): DistributedObjectBase(doId, 114U.toDClassId()) {
	companion object {
		val dClassId = 114U.toDClassId()

		object Fields {
			val avatarEnter: FieldId = 799U.toFieldId()
			val avatarExit: FieldId = 800U.toFieldId()
			val setHeight: FieldId = 801U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		799U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarEnter(sender)
			}
		),
		800U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarExit(sender)
			}
		),
		801U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHeight(it.toUInt8()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
	)

	fun avatarEnter() {
		setField(799U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarExit() {
		setField(800U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setHeight(arg0: Double, ) {
		setField(801U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt8) {
			divide(10.0f)
		}.toFieldValue())
	}

	open fun onAvatarEnter(sender: ChannelId? = null) {}
	open fun onAvatarExit(sender: ChannelId? = null) {}
	open fun onSetHeight(arg0: Double, sender: ChannelId? = null) {}
}

open class DistributedFishingPond(doId: DOId): DistributedObjectBase(doId, 115U.toDClassId()) {
	companion object {
		val dClassId = 115U.toDClassId()

		object Fields {
			val hitTarget: FieldId = 802U.toFieldId()
			val setArea: FieldId = 803U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		802U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitTarget(it.toUInt32()!!, sender)
			}
		),
		803U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetArea(it.toUInt32()!!, sender)
			}
		),
	)

	fun hitTarget(arg0: UInt, ) {
		setField(802U.toFieldId(), arg0.toFieldValue())
	}

	fun setArea(arg0: UInt, ) {
		setField(803U.toFieldId(), arg0.toFieldValue())
	}

	open fun onHitTarget(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetArea(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedFishingTarget(doId: DOId): DistributedObjectBase(doId, 116U.toDClassId()) {
	companion object {
		val dClassId = 116U.toDClassId()

		object Fields {
			val setPondDoId: FieldId = 804U.toFieldId()
			val setState: FieldId = 805U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		804U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPondDoId(it.toUInt32()!!, sender)
			}
		),
		805U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toUInt16()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toUInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!
				onSetState(t0, t1, t2, t3, t4, sender)
				}
			}
		),
	)

	fun setPondDoId(arg0: UInt, ) {
		setField(804U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: UByte, arg1: Double, arg2: Double, arg3: Double, arg4: Short, ) {
		setField(805U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.UInt16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	open fun onSetPondDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetState(arg0: UByte, arg1: Double, arg2: Double, arg3: Double, arg4: Short, sender: ChannelId? = null) {}
}

open class DistributedFishingSpot(doId: DOId): DistributedObjectBase(doId, 117U.toDClassId()) {
	companion object {
		val dClassId = 117U.toDClassId()

		object Fields {
			val setPondDoId: FieldId = 806U.toFieldId()
			val setPosHpr: FieldId = 807U.toFieldId()
			val requestEnter: FieldId = 808U.toFieldId()
			val rejectEnter: FieldId = 809U.toFieldId()
			val requestExit: FieldId = 810U.toFieldId()
			val setOccupied: FieldId = 811U.toFieldId()
			val doCast: FieldId = 812U.toFieldId()
			val sellFish: FieldId = 813U.toFieldId()
			val sellFishComplete: FieldId = 814U.toFieldId()
			val setMovie: FieldId = 815U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		806U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPondDoId(it.toUInt32()!!, sender)
			}
		),
		807U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		808U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestEnter(sender)
			}
		),
		809U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectEnter(sender)
			}
		),
		810U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		811U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOccupied(it.toUInt32()!!, sender)
			}
		),
		812U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!.transform {
						divide(255.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(100.0f)
					}
				onDoCast(t0, t1, sender)
				}
			}
		),
		813U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSellFish(sender)
			}
		),
		814U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt16()!!
				onSellFishComplete(t0, t1, sender)
				}
			}
		),
		815U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt16()!!
				val t3 = values[3].toUInt16()!!
				val t4 = values[4].toUInt16()!!
				val t5 = values[5].toUInt8()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toInt16()!!.transform {
						divide(100.0f)
					}
				onSetMovie(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
	)

	fun setPondDoId(arg0: UInt, ) {
		setField(806U.toFieldId(), arg0.toFieldValue())
	}

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(807U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun requestEnter() {
		setField(808U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rejectEnter() {
		setField(809U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestExit() {
		setField(810U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setOccupied(arg0: UInt, ) {
		setField(811U.toFieldId(), arg0.toFieldValue())
	}

	fun doCast(arg0: Double, arg1: Double, ) {
		setField(812U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.UInt8) {
			divide(255.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun sellFish() {
		setField(813U.toFieldId(), FieldValue.EmptyValue)
	}

	fun sellFishComplete(arg0: UByte, arg1: UShort, ) {
		setField(814U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setMovie(arg0: UByte, arg1: UByte, arg2: UShort, arg3: UShort, arg4: UShort, arg5: Double, arg6: Double, ) {
		setField(815U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.UInt8) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	open fun onSetPondDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onRequestEnter(sender: ChannelId? = null) {}
	open fun onRejectEnter(sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onSetOccupied(arg0: UInt, sender: ChannelId? = null) {}
	open fun onDoCast(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSellFish(sender: ChannelId? = null) {}
	open fun onSellFishComplete(arg0: UByte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, arg1: UByte, arg2: UShort, arg3: UShort, arg4: UShort, arg5: Double, arg6: Double, sender: ChannelId? = null) {}
}

open class DistributedPondBingoManager(doId: DOId): DistributedObjectBase(doId, 118U.toDClassId()) {
	companion object {
		val dClassId = 118U.toDClassId()

		object Fields {
			val setPondDoId: FieldId = 816U.toFieldId()
			val updateGameState: FieldId = 817U.toFieldId()
			val setCardState: FieldId = 818U.toFieldId()
			val setState: FieldId = 819U.toFieldId()
			val cardUpdate: FieldId = 820U.toFieldId()
			val enableBingo: FieldId = 821U.toFieldId()
			val handleBingoCall: FieldId = 822U.toFieldId()
			val setJackpot: FieldId = 823U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		816U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPondDoId(it.toUInt32()!!, sender)
			}
		),
		817U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onUpdateGameState(t0, t1, sender)
				}
			}
		),
		818U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt16()!!
				val t3 = values[3].toUInt32()!!
				onSetCardState(t0, t1, t2, t3, sender)
				}
			}
		),
		819U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		820U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				onCardUpdate(t0, t1, t2, t3, sender)
				}
			}
		),
		821U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onEnableBingo(sender)
			}
		),
		822U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHandleBingoCall(it.toUInt16()!!, sender)
			}
		),
		823U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetJackpot(it.toUInt16()!!, sender)
			}
		),
	)

	fun setPondDoId(arg0: UInt, ) {
		setField(816U.toFieldId(), arg0.toFieldValue())
	}

	fun updateGameState(arg0: UInt, arg1: UByte, ) {
		setField(817U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setCardState(arg0: UShort, arg1: UByte, arg2: UShort, arg3: UInt, ) {
		setField(818U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setState(arg0: String, arg1: Short, ) {
		setField(819U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun cardUpdate(arg0: UShort, arg1: UByte, arg2: UByte, arg3: UByte, ) {
		setField(820U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun enableBingo() {
		setField(821U.toFieldId(), FieldValue.EmptyValue)
	}

	fun handleBingoCall(arg0: UShort, ) {
		setField(822U.toFieldId(), arg0.toFieldValue())
	}

	fun setJackpot(arg0: UShort, ) {
		setField(823U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetPondDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onUpdateGameState(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetCardState(arg0: UShort, arg1: UByte, arg2: UShort, arg3: UInt, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onCardUpdate(arg0: UShort, arg1: UByte, arg2: UByte, arg3: UByte, sender: ChannelId? = null) {}
	open fun onEnableBingo(sender: ChannelId? = null) {}
	open fun onHandleBingoCall(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetJackpot(arg0: UShort, sender: ChannelId? = null) {}
}

open class DistributedCannon(doId: DOId): DistributedObjectBase(doId, 119U.toDClassId()) {
	companion object {
		val dClassId = 119U.toDClassId()

		object Fields {
			val setEstateId: FieldId = 824U.toFieldId()
			val setTargetId: FieldId = 825U.toFieldId()
			val setPosHpr: FieldId = 826U.toFieldId()
			val setActive: FieldId = 827U.toFieldId()
			val setActiveState: FieldId = 828U.toFieldId()
			val requestEnter: FieldId = 829U.toFieldId()
			val requestExit: FieldId = 830U.toFieldId()
			val setMovie: FieldId = 831U.toFieldId()
			val setCannonPosition: FieldId = 832U.toFieldId()
			val setCannonLit: FieldId = 833U.toFieldId()
			val setFired: FieldId = 834U.toFieldId()
			val setLanded: FieldId = 835U.toFieldId()
			val updateCannonPosition: FieldId = 836U.toFieldId()
			val setCannonWillFire: FieldId = 837U.toFieldId()
			val setCannonExit: FieldId = 838U.toFieldId()
			val requestBumperMove: FieldId = 839U.toFieldId()
			val setCannonBumperPos: FieldId = 840U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		824U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEstateId(it.toUInt32()!!, sender)
			}
		),
		825U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTargetId(it.toUInt32()!!, sender)
			}
		),
		826U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		827U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetActive(it.toUInt8()!!, sender)
			}
		),
		828U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetActiveState(it.toUInt8()!!, sender)
			}
		),
		829U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestEnter(sender)
			}
		),
		830U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		831U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onSetMovie(t0, t1, sender)
				}
			}
		),
		832U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(100.0f)
					}
				val t1 = values[1].toUInt32()!!.transform {
						divide(100.0f)
					}
				onSetCannonPosition(t0, t1, sender)
				}
			}
		),
		833U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(100.0f)
					}
				val t1 = values[1].toUInt32()!!.transform {
						divide(100.0f)
					}
				onSetCannonLit(t0, t1, sender)
				}
			}
		),
		834U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetFired(sender)
			}
		),
		835U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetLanded(sender)
			}
		),
		836U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toUInt32()!!.transform {
						divide(100.0f)
					}
				onUpdateCannonPosition(t0, t1, t2, sender)
				}
			}
		),
		837U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toUInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt16()!!
				onSetCannonWillFire(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		838U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCannonExit(it.toUInt32()!!, sender)
			}
		),
		839U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(100.0f)
					}
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				onRequestBumperMove(t0, t1, t2, sender)
				}
			}
		),
		840U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(100.0f)
					}
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				onSetCannonBumperPos(t0, t1, t2, sender)
				}
			}
		),
	)

	fun setEstateId(arg0: UInt, ) {
		setField(824U.toFieldId(), arg0.toFieldValue())
	}

	fun setTargetId(arg0: UInt, ) {
		setField(825U.toFieldId(), arg0.toFieldValue())
	}

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(826U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setActive(arg0: UByte, ) {
		setField(827U.toFieldId(), arg0.toFieldValue())
	}

	fun setActiveState(arg0: UByte, ) {
		setField(828U.toFieldId(), arg0.toFieldValue())
	}

	fun requestEnter() {
		setField(829U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestExit() {
		setField(830U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setMovie(arg0: UByte, arg1: UInt, ) {
		setField(831U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setCannonPosition(arg0: Double, arg1: Double, ) {
		setField(832U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setCannonLit(arg0: Double, arg1: Double, ) {
		setField(833U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setFired() {
		setField(834U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setLanded() {
		setField(835U.toFieldId(), FieldValue.EmptyValue)
	}

	fun updateCannonPosition(arg0: UInt, arg1: Double, arg2: Double, ) {
		setField(836U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setCannonWillFire(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, arg4: Short, ) {
		setField(837U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun setCannonExit(arg0: UInt, ) {
		setField(838U.toFieldId(), arg0.toFieldValue())
	}

	fun requestBumperMove(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(839U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setCannonBumperPos(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(840U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	open fun onSetEstateId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetTargetId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetActive(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetActiveState(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestEnter(sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetCannonPosition(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetCannonLit(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetFired(sender: ChannelId? = null) {}
	open fun onSetLanded(sender: ChannelId? = null) {}
	open fun onUpdateCannonPosition(arg0: UInt, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetCannonWillFire(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, arg4: Short, sender: ChannelId? = null) {}
	open fun onSetCannonExit(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestBumperMove(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetCannonBumperPos(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
}

open class DistributedTarget(doId: DOId): DistributedObjectBase(doId, 120U.toDClassId()) {
	companion object {
		val dClassId = 120U.toDClassId()

		object Fields {
			val setPosition: FieldId = 841U.toFieldId()
			val setState: FieldId = 842U.toFieldId()
			val setReward: FieldId = 843U.toFieldId()
			val setResult: FieldId = 844U.toFieldId()
			val setBonus: FieldId = 845U.toFieldId()
			val setCurPinballScore: FieldId = 846U.toFieldId()
			val setPinballHiScorer: FieldId = 847U.toFieldId()
			val setPinballHiScore: FieldId = 848U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		841U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosition(t0, t1, t2, sender)
				}
			}
		),
		842U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toUInt8()!!
				onSetState(t0, t1, t2, sender)
				}
			}
		),
		843U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetReward(it.toUInt32()!!, sender)
			}
		),
		844U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetResult(it.toUInt32()!!, sender)
			}
		),
		845U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetBonus(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		846U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt32()!!
				onSetCurPinballScore(t0, t1, t2, sender)
				}
			}
		),
		847U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPinballHiScorer(it.toStringValue()!!, sender)
			}
		),
		848U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPinballHiScore(it.toInt32()!!, sender)
			}
		),
	)

	fun setPosition(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(841U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setState(arg0: UByte, arg1: Double, arg2: UByte, ) {
		setField(842U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt32) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setReward(arg0: UInt, ) {
		setField(843U.toFieldId(), arg0.toFieldValue())
	}

	fun setResult(arg0: UInt, ) {
		setField(844U.toFieldId(), arg0.toFieldValue())
	}

	fun setBonus(arg0: Double, ) {
		setField(845U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setCurPinballScore(arg0: UInt, arg1: Int, arg2: Int, ) {
		setField(846U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setPinballHiScorer(arg0: String, ) {
		setField(847U.toFieldId(), arg0.toFieldValue())
	}

	fun setPinballHiScore(arg0: Int, ) {
		setField(848U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetPosition(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetState(arg0: UByte, arg1: Double, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetReward(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetResult(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBonus(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetCurPinballScore(arg0: UInt, arg1: Int, arg2: Int, sender: ChannelId? = null) {}
	open fun onSetPinballHiScorer(arg0: String, sender: ChannelId? = null) {}
	open fun onSetPinballHiScore(arg0: Int, sender: ChannelId? = null) {}
}

open class DistributedMinigame(doId: DOId): DistributedObjectBase(doId, 121U.toDClassId()) {
	companion object {
		val dClassId = 121U.toDClassId()

		object Fields {
			val setParticipants: FieldId = 849U.toFieldId()
			val setTrolleyZone: FieldId = 850U.toFieldId()
			val setStartingVotes: FieldId = 851U.toFieldId()
			val setMetagameRound: FieldId = 852U.toFieldId()
			val setDifficultyOverrides: FieldId = 853U.toFieldId()
			val setAvatarJoined: FieldId = 854U.toFieldId()
			val setAvatarReady: FieldId = 855U.toFieldId()
			val setAvatarExited: FieldId = 856U.toFieldId()
			val requestExit: FieldId = 857U.toFieldId()
			val setGameReady: FieldId = 858U.toFieldId()
			val setGameStart: FieldId = 859U.toFieldId()
			val setGameExit: FieldId = 860U.toFieldId()
			val setGameAbort: FieldId = 861U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		849U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetParticipants(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		850U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTrolleyZone(it.toUInt32()!!, sender)
			}
		),
		851U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt16),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetStartingVotes(it.toList()!!.map { it.toUInt16()!! }, sender)
			}
		),
		852U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMetagameRound(it.toInt8()!!, sender)
			}
		),
		853U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toInt32()!!
				onSetDifficultyOverrides(t0, t1, sender)
				}
			}
		),
		854U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarJoined(sender)
			}
		),
		855U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarReady(sender)
			}
		),
		856U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarExited(sender)
			}
		),
		857U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		858U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGameReady(sender)
			}
		),
		859U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGameStart(it.toInt16()!!, sender)
			}
		),
		860U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGameExit(sender)
			}
		),
		861U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGameAbort(sender)
			}
		),
	)

	fun setParticipants(arg0: List<UInt>, ) {
		setField(849U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setTrolleyZone(arg0: UInt, ) {
		setField(850U.toFieldId(), arg0.toFieldValue())
	}

	fun setStartingVotes(arg0: List<UShort>, ) {
		setField(851U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setMetagameRound(arg0: Byte, ) {
		setField(852U.toFieldId(), arg0.toFieldValue())
	}

	fun setDifficultyOverrides(arg0: Int, arg1: Int, ) {
		setField(853U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setAvatarJoined() {
		setField(854U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setAvatarReady() {
		setField(855U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setAvatarExited() {
		setField(856U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestExit() {
		setField(857U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setGameReady() {
		setField(858U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setGameStart(arg0: Short, ) {
		setField(859U.toFieldId(), arg0.toFieldValue())
	}

	fun setGameExit() {
		setField(860U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setGameAbort() {
		setField(861U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetParticipants(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetTrolleyZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetStartingVotes(arg0: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetMetagameRound(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetDifficultyOverrides(arg0: Int, arg1: Int, sender: ChannelId? = null) {}
	open fun onSetAvatarJoined(sender: ChannelId? = null) {}
	open fun onSetAvatarReady(sender: ChannelId? = null) {}
	open fun onSetAvatarExited(sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onSetGameReady(sender: ChannelId? = null) {}
	open fun onSetGameStart(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetGameExit(sender: ChannelId? = null) {}
	open fun onSetGameAbort(sender: ChannelId? = null) {}
}

open class DistributedMinigameTemplate(doId: DOId): DistributedObjectBase(doId, 122U.toDClassId()) {
	companion object {
		val dClassId = 122U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedRaceGame(doId: DOId): DistributedObjectBase(doId, 123U.toDClassId()) {
	companion object {
		val dClassId = 123U.toDClassId()

		object Fields {
			val setTimerStartTime: FieldId = 862U.toFieldId()
			val setAvatarChoice: FieldId = 863U.toFieldId()
			val setAvatarChose: FieldId = 864U.toFieldId()
			val setChancePositions: FieldId = 865U.toFieldId()
			val setServerChoices: FieldId = 866U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		862U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTimerStartTime(it.toInt16()!!, sender)
			}
		),
		863U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarChoice(it.toUInt8()!!, sender)
			}
		),
		864U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarChose(it.toUInt32()!!, sender)
			}
		),
		865U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetChancePositions(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		866U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Int8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.Int8), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toInt8()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				val t2 = values[2].toList()!!.map { it.toInt8()!! }
				onSetServerChoices(t0, t1, t2, sender)
				}
			}
		),
	)

	fun setTimerStartTime(arg0: Short, ) {
		setField(862U.toFieldId(), arg0.toFieldValue())
	}

	fun setAvatarChoice(arg0: UByte, ) {
		setField(863U.toFieldId(), arg0.toFieldValue())
	}

	fun setAvatarChose(arg0: UInt, ) {
		setField(864U.toFieldId(), arg0.toFieldValue())
	}

	fun setChancePositions(arg0: List<UByte>, ) {
		setField(865U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setServerChoices(arg0: List<Byte>, arg1: List<UByte>, arg2: List<Byte>, ) {
		setField(866U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.Int8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int8, arg2.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	open fun onSetTimerStartTime(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetAvatarChoice(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetAvatarChose(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetChancePositions(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetServerChoices(arg0: List<Byte>, arg1: List<UByte>, arg2: List<Byte>, sender: ChannelId? = null) {}
}

open class DistributedCannonGame(doId: DOId): DistributedObjectBase(doId, 124U.toDClassId()) {
	companion object {
		val dClassId = 124U.toDClassId()

		object Fields {
			val setCannonPosition: FieldId = 867U.toFieldId()
			val setCannonLit: FieldId = 868U.toFieldId()
			val updateCannonPosition: FieldId = 869U.toFieldId()
			val setCannonWillFire: FieldId = 870U.toFieldId()
			val setToonWillLandInWater: FieldId = 871U.toFieldId()
			val announceToonWillLandInWater: FieldId = 872U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		867U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(100.0f)
					}
				val t1 = values[1].toUInt32()!!.transform {
						divide(100.0f)
					}
				onSetCannonPosition(t0, t1, sender)
				}
			}
		),
		868U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(100.0f)
					}
				val t1 = values[1].toUInt32()!!.transform {
						divide(100.0f)
					}
				onSetCannonLit(t0, t1, sender)
				}
			}
		),
		869U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toUInt32()!!.transform {
						divide(100.0f)
					}
				onUpdateCannonPosition(t0, t1, t2, sender)
				}
			}
		),
		870U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toUInt32()!!.transform {
						divide(100.0f)
					}
				onSetCannonWillFire(t0, t1, t2, t3, sender)
				}
			}
		),
		871U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetToonWillLandInWater(it.toInt32()!!.transform {
						divide(100.0f)
					}, sender)
			}
		),
		872U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				onAnnounceToonWillLandInWater(t0, t1, sender)
				}
			}
		),
	)

	fun setCannonPosition(arg0: Double, arg1: Double, ) {
		setField(867U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setCannonLit(arg0: Double, arg1: Double, ) {
		setField(868U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun updateCannonPosition(arg0: UInt, arg1: Double, arg2: Double, ) {
		setField(869U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setCannonWillFire(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, ) {
		setField(870U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setToonWillLandInWater(arg0: Double, ) {
		setField(871U.toFieldId(), arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue())
	}

	fun announceToonWillLandInWater(arg0: UInt, arg1: Double, ) {
		setField(872U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	open fun onSetCannonPosition(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetCannonLit(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onUpdateCannonPosition(arg0: UInt, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetCannonWillFire(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, sender: ChannelId? = null) {}
	open fun onSetToonWillLandInWater(arg0: Double, sender: ChannelId? = null) {}
	open fun onAnnounceToonWillLandInWater(arg0: UInt, arg1: Double, sender: ChannelId? = null) {}
}

open class DistributedPhotoGame(doId: DOId): DistributedObjectBase(doId, 125U.toDClassId()) {
	companion object {
		val dClassId = 125U.toDClassId()

		object Fields {
			val newClientPhotoScore: FieldId = 873U.toFieldId()
			val newAIPhotoScore: FieldId = 874U.toFieldId()
			val filmOut: FieldId = 875U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		873U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toList()!!.map { it.toChar()!! }
				val t2 = values[2].toUInt32()!!.transform {
						divide(100.0f)
					}
				onNewClientPhotoScore(t0, t1, t2, sender)
				}
			}
		),
		874U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt32()!!.transform {
						divide(100.0f)
					}
				onNewAIPhotoScore(t0, t1, t2, sender)
				}
			}
		),
		875U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onFilmOut(sender)
			}
		),
	)

	fun newClientPhotoScore(arg0: UByte, arg1: List<Char>, arg2: Double, ) {
		setField(873U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Char, arg1.map { it.toFieldValue() }).toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun newAIPhotoScore(arg0: UInt, arg1: UByte, arg2: Double, ) {
		setField(874U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun filmOut() {
		setField(875U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onNewClientPhotoScore(arg0: UByte, arg1: List<Char>, arg2: Double, sender: ChannelId? = null) {}
	open fun onNewAIPhotoScore(arg0: UInt, arg1: UByte, arg2: Double, sender: ChannelId? = null) {}
	open fun onFilmOut(sender: ChannelId? = null) {}
}

open class DistributedPatternGame(doId: DOId): DistributedObjectBase(doId, 126U.toDClassId()) {
	companion object {
		val dClassId = 126U.toDClassId()

		object Fields {
			val reportPlayerReady: FieldId = 876U.toFieldId()
			val setPattern: FieldId = 877U.toFieldId()
			val reportPlayerPattern: FieldId = 878U.toFieldId()
			val setPlayerPatterns: FieldId = 879U.toFieldId()
			val reportButtonPress: FieldId = 880U.toFieldId()
			val remoteButtonPressed: FieldId = 881U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		876U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReportPlayerReady(sender)
			}
		),
		877U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPattern(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		878U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt8()!! }
				val t1 = values[1].toUInt16()!!.transform {
						divide(1000.0f)
					}
				onReportPlayerPattern(t0, t1, sender)
				}
			}
		),
		879U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt8()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				val t2 = values[2].toList()!!.map { it.toUInt8()!! }
				val t3 = values[3].toList()!!.map { it.toUInt8()!! }
				val t4 = values[4].toUInt32()!!
				onSetPlayerPatterns(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		880U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onReportButtonPress(t0, t1, sender)
				}
			}
		),
		881U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				onRemoteButtonPressed(t0, t1, t2, sender)
				}
			}
		),
	)

	fun reportPlayerReady() {
		setField(876U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setPattern(arg0: List<UByte>, ) {
		setField(877U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun reportPlayerPattern(arg0: List<UByte>, arg1: Double, ) {
		setField(878U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue(), 
				))
	}

	fun setPlayerPatterns(arg0: List<UByte>, arg1: List<UByte>, arg2: List<UByte>, arg3: List<UByte>, arg4: UInt, ) {
		setField(879U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg2.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg3.map { it.toFieldValue() }).toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun reportButtonPress(arg0: UByte, arg1: UByte, ) {
		setField(880U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun remoteButtonPressed(arg0: UInt, arg1: UByte, arg2: UByte, ) {
		setField(881U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onReportPlayerReady(sender: ChannelId? = null) {}
	open fun onSetPattern(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onReportPlayerPattern(arg0: List<UByte>, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetPlayerPatterns(arg0: List<UByte>, arg1: List<UByte>, arg2: List<UByte>, arg3: List<UByte>, arg4: UInt, sender: ChannelId? = null) {}
	open fun onReportButtonPress(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onRemoteButtonPressed(arg0: UInt, arg1: UByte, arg2: UByte, sender: ChannelId? = null) {}
}

open class DistributedRingGame(doId: DOId): DistributedObjectBase(doId, 127U.toDClassId()) {
	companion object {
		val dClassId = 127U.toDClassId()

		object Fields {
			val setTimeBase: FieldId = 882U.toFieldId()
			val setColorIndices: FieldId = 883U.toFieldId()
			val setToonGotRing: FieldId = 884U.toFieldId()
			val setRingGroupResults: FieldId = 885U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		882U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTimeBase(it.toInt16()!!, sender)
			}
		),
		883U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt8()!!
				onSetColorIndices(t0, t1, t2, t3, sender)
				}
			}
		),
		884U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetToonGotRing(it.toUInt8()!!, sender)
			}
		),
		885U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRingGroupResults(it.toUInt8()!!, sender)
			}
		),
	)

	fun setTimeBase(arg0: Short, ) {
		setField(882U.toFieldId(), arg0.toFieldValue())
	}

	fun setColorIndices(arg0: Byte, arg1: Byte, arg2: Byte, arg3: Byte, ) {
		setField(883U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setToonGotRing(arg0: UByte, ) {
		setField(884U.toFieldId(), arg0.toFieldValue())
	}

	fun setRingGroupResults(arg0: UByte, ) {
		setField(885U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetTimeBase(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetColorIndices(arg0: Byte, arg1: Byte, arg2: Byte, arg3: Byte, sender: ChannelId? = null) {}
	open fun onSetToonGotRing(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetRingGroupResults(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedTagGame(doId: DOId): DistributedObjectBase(doId, 128U.toDClassId()) {
	companion object {
		val dClassId = 128U.toDClassId()

		object Fields {
			val tag: FieldId = 886U.toFieldId()
			val setIt: FieldId = 887U.toFieldId()
			val setTreasureScore: FieldId = 888U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		886U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTag(it.toUInt32()!!, sender)
			}
		),
		887U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIt(it.toUInt32()!!, sender)
			}
		),
		888U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt16),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTreasureScore(it.toList()!!.map { it.toUInt16()!! }, sender)
			}
		),
	)

	fun tag(arg0: UInt, ) {
		setField(886U.toFieldId(), arg0.toFieldValue())
	}

	fun setIt(arg0: UInt, ) {
		setField(887U.toFieldId(), arg0.toFieldValue())
	}

	fun setTreasureScore(arg0: List<UShort>, ) {
		setField(888U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	open fun onTag(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetIt(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetTreasureScore(arg0: List<UShort>, sender: ChannelId? = null) {}
}

open class DistributedMazeGame(doId: DOId): DistributedObjectBase(doId, 129U.toDClassId()) {
	companion object {
		val dClassId = 129U.toDClassId()

		object Fields {
			val claimTreasure: FieldId = 889U.toFieldId()
			val setTreasureGrabbed: FieldId = 890U.toFieldId()
			val allTreasuresTaken: FieldId = 891U.toFieldId()
			val hitBySuit: FieldId = 892U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		889U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onClaimTreasure(it.toUInt32()!!, sender)
			}
		),
		890U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetTreasureGrabbed(t0, t1, sender)
				}
			}
		),
		891U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAllTreasuresTaken(sender)
			}
		),
		892U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onHitBySuit(t0, t1, sender)
				}
			}
		),
	)

	fun claimTreasure(arg0: UInt, ) {
		setField(889U.toFieldId(), arg0.toFieldValue())
	}

	fun setTreasureGrabbed(arg0: UInt, arg1: UInt, ) {
		setField(890U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun allTreasuresTaken() {
		setField(891U.toFieldId(), FieldValue.EmptyValue)
	}

	fun hitBySuit(arg0: UInt, arg1: Short, ) {
		setField(892U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onClaimTreasure(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetTreasureGrabbed(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onAllTreasuresTaken(sender: ChannelId? = null) {}
	open fun onHitBySuit(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
}

open class DistributedTugOfWarGame(doId: DOId): DistributedObjectBase(doId, 130U.toDClassId()) {
	companion object {
		val dClassId = 130U.toDClassId()

		object Fields {
			val reportPlayerReady: FieldId = 893U.toFieldId()
			val sendGoSignal: FieldId = 894U.toFieldId()
			val sendStopSignal: FieldId = 895U.toFieldId()
			val sendGameType: FieldId = 896U.toFieldId()
			val reportEndOfContest: FieldId = 897U.toFieldId()
			val sendNewAvIdList: FieldId = 898U.toFieldId()
			val reportCurrentKeyRate: FieldId = 899U.toFieldId()
			val sendCurrentPosition: FieldId = 900U.toFieldId()
			val sendSuitPosition: FieldId = 901U.toFieldId()
			val remoteKeyRateUpdate: FieldId = 902U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		893U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReportPlayerReady(it.toUInt8()!!, sender)
			}
		),
		894U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSendGoSignal(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		895U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				onSendStopSignal(t0, t1, t2, sender)
				}
			}
		),
		896U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onSendGameType(t0, t1, sender)
				}
			}
		),
		897U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReportEndOfContest(it.toUInt8()!!, sender)
			}
		),
		898U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSendNewAvIdList(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		899U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(100.0f)
					}
				onReportCurrentKeyRate(t0, t1, sender)
				}
			}
		),
		900U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toInt16()!!.transform {
						divide(1000.0f)
					} }
				onSendCurrentPosition(t0, t1, sender)
				}
			}
		),
		901U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSendSuitPosition(it.toInt32()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		902U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRemoteKeyRateUpdate(t0, t1, sender)
				}
			}
		),
	)

	fun reportPlayerReady(arg0: UByte, ) {
		setField(893U.toFieldId(), arg0.toFieldValue())
	}

	fun sendGoSignal(arg0: List<UByte>, ) {
		setField(894U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun sendStopSignal(arg0: List<UInt>, arg1: List<UInt>, arg2: List<UInt>, ) {
		setField(895U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun sendGameType(arg0: UByte, arg1: UByte, ) {
		setField(896U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun reportEndOfContest(arg0: UByte, ) {
		setField(897U.toFieldId(), arg0.toFieldValue())
	}

	fun sendNewAvIdList(arg0: List<UInt>, ) {
		setField(898U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun reportCurrentKeyRate(arg0: UInt, arg1: Double, ) {
		setField(899U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun sendCurrentPosition(arg0: List<UInt>, arg1: List<Double>, ) {
		setField(900U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun sendSuitPosition(arg0: Double, ) {
		setField(901U.toFieldId(), arg0.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun remoteKeyRateUpdate(arg0: UInt, arg1: UInt, ) {
		setField(902U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onReportPlayerReady(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSendGoSignal(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSendStopSignal(arg0: List<UInt>, arg1: List<UInt>, arg2: List<UInt>, sender: ChannelId? = null) {}
	open fun onSendGameType(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onReportEndOfContest(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSendNewAvIdList(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onReportCurrentKeyRate(arg0: UInt, arg1: Double, sender: ChannelId? = null) {}
	open fun onSendCurrentPosition(arg0: List<UInt>, arg1: List<Double>, sender: ChannelId? = null) {}
	open fun onSendSuitPosition(arg0: Double, sender: ChannelId? = null) {}
	open fun onRemoteKeyRateUpdate(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
}

open class DistributedCatchGame(doId: DOId): DistributedObjectBase(doId, 131U.toDClassId()) {
	companion object {
		val dClassId = 131U.toDClassId()

		object Fields {
			val claimCatch: FieldId = 903U.toFieldId()
			val setObjectCaught: FieldId = 904U.toFieldId()
			val hitBySuit: FieldId = 905U.toFieldId()
			val reportDone: FieldId = 906U.toFieldId()
			val setEveryoneDone: FieldId = 907U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		903U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onClaimCatch(t0, t1, sender)
				}
			}
		),
		904U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetObjectCaught(t0, t1, sender)
				}
			}
		),
		905U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onHitBySuit(t0, t1, sender)
				}
			}
		),
		906U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReportDone(sender)
			}
		),
		907U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEveryoneDone(sender)
			}
		),
	)

	fun claimCatch(arg0: UInt, arg1: UInt, ) {
		setField(903U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setObjectCaught(arg0: UInt, arg1: UInt, ) {
		setField(904U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun hitBySuit(arg0: UInt, arg1: Short, ) {
		setField(905U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun reportDone() {
		setField(906U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setEveryoneDone() {
		setField(907U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onClaimCatch(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetObjectCaught(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onHitBySuit(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onReportDone(sender: ChannelId? = null) {}
	open fun onSetEveryoneDone(sender: ChannelId? = null) {}
}

open class DistributedDivingGame(doId: DOId): DistributedObjectBase(doId, 132U.toDClassId()) {
	companion object {
		val dClassId = 132U.toDClassId()

		object Fields {
			val pickupTreasure: FieldId = 908U.toFieldId()
			val setTreasureGrabbed: FieldId = 909U.toFieldId()
			val handleFishCollision: FieldId = 910U.toFieldId()
			val performFishCollision: FieldId = 911U.toFieldId()
			val handleCrabCollision: FieldId = 912U.toFieldId()
			val performCrabCollision: FieldId = 913U.toFieldId()
			val setTreasureDropped: FieldId = 914U.toFieldId()
			val fishSpawn: FieldId = 915U.toFieldId()
			val removeFish: FieldId = 916U.toFieldId()
			val getCrabMoving: FieldId = 917U.toFieldId()
			val setCrabMoving: FieldId = 918U.toFieldId()
			val treasureRecovered: FieldId = 919U.toFieldId()
			val incrementScore: FieldId = 920U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		908U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onPickupTreasure(it.toUInt32()!!, sender)
			}
		),
		909U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetTreasureGrabbed(t0, t1, sender)
				}
			}
		),
		910U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Char), ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toList()!!.map { it.toChar()!! }
				onHandleFishCollision(t0, t1, t2, t3, sender)
				}
			}
		),
		911U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toInt16()!!
				onPerformFishCollision(t0, t1, t2, t3, sender)
				}
			}
		),
		912U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Char), ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toList()!!.map { it.toChar()!! }
				onHandleCrabCollision(t0, t1, sender)
				}
			}
		),
		913U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onPerformCrabCollision(t0, t1, sender)
				}
			}
		),
		914U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onSetTreasureDropped(t0, t1, sender)
				}
			}
		),
		915U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt16()!!
				onFishSpawn(t0, t1, t2, t3, sender)
				}
			}
		),
		916U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRemoveFish(it.toUInt32()!!, sender)
			}
		),
		917U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toInt8()!!
				onGetCrabMoving(t0, t1, t2, sender)
				}
			}
		),
		918U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt8()!!
				val t4 = values[4].toInt16()!!
				val t5 = values[5].toInt8()!!
				onSetCrabMoving(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		919U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTreasureRecovered(sender)
			}
		),
		920U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt16()!!
				onIncrementScore(t0, t1, t2, sender)
				}
			}
		),
	)

	fun pickupTreasure(arg0: UInt, ) {
		setField(908U.toFieldId(), arg0.toFieldValue())
	}

	fun setTreasureGrabbed(arg0: UInt, arg1: UInt, ) {
		setField(909U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun handleFishCollision(arg0: UInt, arg1: UInt, arg2: UInt, arg3: List<Char>, ) {
		setField(910U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Char, arg3.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun performFishCollision(arg0: UInt, arg1: UInt, arg2: UInt, arg3: Short, ) {
		setField(911U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun handleCrabCollision(arg0: UInt, arg1: List<Char>, ) {
		setField(912U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Char, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun performCrabCollision(arg0: UInt, arg1: Short, ) {
		setField(913U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setTreasureDropped(arg0: UInt, arg1: Short, ) {
		setField(914U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fishSpawn(arg0: Short, arg1: UInt, arg2: UInt, arg3: UShort, ) {
		setField(915U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun removeFish(arg0: UInt, ) {
		setField(916U.toFieldId(), arg0.toFieldValue())
	}

	fun getCrabMoving(arg0: UInt, arg1: Short, arg2: Byte, ) {
		setField(917U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setCrabMoving(arg0: UInt, arg1: Short, arg2: Byte, arg3: Byte, arg4: Short, arg5: Byte, ) {
		setField(918U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
				))
	}

	fun treasureRecovered() {
		setField(919U.toFieldId(), FieldValue.EmptyValue)
	}

	fun incrementScore(arg0: UInt, arg1: UInt, arg2: Short, ) {
		setField(920U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onPickupTreasure(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetTreasureGrabbed(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onHandleFishCollision(arg0: UInt, arg1: UInt, arg2: UInt, arg3: List<Char>, sender: ChannelId? = null) {}
	open fun onPerformFishCollision(arg0: UInt, arg1: UInt, arg2: UInt, arg3: Short, sender: ChannelId? = null) {}
	open fun onHandleCrabCollision(arg0: UInt, arg1: List<Char>, sender: ChannelId? = null) {}
	open fun onPerformCrabCollision(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetTreasureDropped(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onFishSpawn(arg0: Short, arg1: UInt, arg2: UInt, arg3: UShort, sender: ChannelId? = null) {}
	open fun onRemoveFish(arg0: UInt, sender: ChannelId? = null) {}
	open fun onGetCrabMoving(arg0: UInt, arg1: Short, arg2: Byte, sender: ChannelId? = null) {}
	open fun onSetCrabMoving(arg0: UInt, arg1: Short, arg2: Byte, arg3: Byte, arg4: Short, arg5: Byte, sender: ChannelId? = null) {}
	open fun onTreasureRecovered(sender: ChannelId? = null) {}
	open fun onIncrementScore(arg0: UInt, arg1: UInt, arg2: Short, sender: ChannelId? = null) {}
}

open class DistributedTargetGame(doId: DOId): DistributedObjectBase(doId, 133U.toDClassId()) {
	companion object {
		val dClassId = 133U.toDClassId()

		object Fields {
			val setTimeBase: FieldId = 921U.toFieldId()
			val setToonGotRing: FieldId = 922U.toFieldId()
			val setRingGroupResults: FieldId = 923U.toFieldId()
			val setPlayerDone: FieldId = 924U.toFieldId()
			val setScore: FieldId = 925U.toFieldId()
			val setTargetSeed: FieldId = 926U.toFieldId()
			val setRoundDone: FieldId = 927U.toFieldId()
			val setSingleScore: FieldId = 928U.toFieldId()
			val setGameDone: FieldId = 929U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		921U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTimeBase(it.toInt16()!!, sender)
			}
		),
		922U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetToonGotRing(it.toUInt8()!!, sender)
			}
		),
		923U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRingGroupResults(it.toUInt8()!!, sender)
			}
		),
		924U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetPlayerDone(sender)
			}
		),
		925U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toInt32()!!
				onSetScore(t0, t1, sender)
				}
			}
		),
		926U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTargetSeed(it.toUInt32()!!, sender)
			}
		),
		927U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoundDone(sender)
			}
		),
		928U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt32()!!
				onSetSingleScore(t0, t1, sender)
				}
			}
		),
		929U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGameDone(sender)
			}
		),
	)

	fun setTimeBase(arg0: Short, ) {
		setField(921U.toFieldId(), arg0.toFieldValue())
	}

	fun setToonGotRing(arg0: UByte, ) {
		setField(922U.toFieldId(), arg0.toFieldValue())
	}

	fun setRingGroupResults(arg0: UByte, ) {
		setField(923U.toFieldId(), arg0.toFieldValue())
	}

	fun setPlayerDone() {
		setField(924U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setScore(arg0: Int, arg1: Int, ) {
		setField(925U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setTargetSeed(arg0: UInt, ) {
		setField(926U.toFieldId(), arg0.toFieldValue())
	}

	fun setRoundDone() {
		setField(927U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setSingleScore(arg0: UShort, arg1: UInt, ) {
		setField(928U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setGameDone() {
		setField(929U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetTimeBase(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetToonGotRing(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetRingGroupResults(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetPlayerDone(sender: ChannelId? = null) {}
	open fun onSetScore(arg0: Int, arg1: Int, sender: ChannelId? = null) {}
	open fun onSetTargetSeed(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetRoundDone(sender: ChannelId? = null) {}
	open fun onSetSingleScore(arg0: UShort, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetGameDone(sender: ChannelId? = null) {}
}

open class EstateManager(doId: DOId): DistributedObjectBase(doId, 134U.toDClassId()) {
	companion object {
		val dClassId = 134U.toDClassId()

		object Fields {
			val startAprilFools: FieldId = 930U.toFieldId()
			val stopAprilFools: FieldId = 931U.toFieldId()
			val getEstateZone: FieldId = 932U.toFieldId()
			val setEstateZone: FieldId = 933U.toFieldId()
			val setAvHouseId: FieldId = 934U.toFieldId()
			val sendAvToPlayground: FieldId = 935U.toFieldId()
			val exitEstate: FieldId = 936U.toFieldId()
			val removeFriend: FieldId = 937U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		930U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onStartAprilFools(sender)
			}
		),
		931U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onStopAprilFools(sender)
			}
		),
		932U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Char), ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toList()!!.map { it.toChar()!! }
				onGetEstateZone(t0, t1, sender)
				}
			}
		),
		933U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetEstateZone(t0, t1, sender)
				}
			}
		),
		934U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onSetAvHouseId(t0, t1, sender)
				}
			}
		),
		935U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onSendAvToPlayground(t0, t1, sender)
				}
			}
		),
		936U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onExitEstate(sender)
			}
		),
		937U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRemoveFriend(t0, t1, sender)
				}
			}
		),
	)

	fun startAprilFools() {
		setField(930U.toFieldId(), FieldValue.EmptyValue)
	}

	fun stopAprilFools() {
		setField(931U.toFieldId(), FieldValue.EmptyValue)
	}

	fun getEstateZone(arg0: UInt, arg1: List<Char>, ) {
		setField(932U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Char, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setEstateZone(arg0: UInt, arg1: UInt, ) {
		setField(933U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setAvHouseId(arg0: UInt, arg1: List<UInt>, ) {
		setField(934U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun sendAvToPlayground(arg0: UInt, arg1: UByte, ) {
		setField(935U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun exitEstate() {
		setField(936U.toFieldId(), FieldValue.EmptyValue)
	}

	fun removeFriend(arg0: UInt, arg1: UInt, ) {
		setField(937U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onStartAprilFools(sender: ChannelId? = null) {}
	open fun onStopAprilFools(sender: ChannelId? = null) {}
	open fun onGetEstateZone(arg0: UInt, arg1: List<Char>, sender: ChannelId? = null) {}
	open fun onSetEstateZone(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetAvHouseId(arg0: UInt, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onSendAvToPlayground(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onExitEstate(sender: ChannelId? = null) {}
	open fun onRemoveFriend(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
}

open class DistributedEstate(doId: DOId): DistributedObjectBase(doId, 137U.toDClassId()) {
	companion object {
		val dClassId = 137U.toDClassId()

		object Fields {
			val DcObjectType: FieldId = 946U.toFieldId()
			val setEstateReady: FieldId = 947U.toFieldId()
			val setClientReady: FieldId = 948U.toFieldId()
			val setEstateType: FieldId = 949U.toFieldId()
			val setClosestHouse: FieldId = 950U.toFieldId()
			val setTreasureIds: FieldId = 951U.toFieldId()
			val requestServerTime: FieldId = 952U.toFieldId()
			val setServerTime: FieldId = 953U.toFieldId()
			val setDawnTime: FieldId = 954U.toFieldId()
			val placeOnGround: FieldId = 955U.toFieldId()
			val setDecorData: FieldId = 956U.toFieldId()
			val setLastEpochTimeStamp: FieldId = 957U.toFieldId()
			val setRentalTimeStamp: FieldId = 958U.toFieldId()
			val setRentalType: FieldId = 959U.toFieldId()
			val setSlot0ToonId: FieldId = 960U.toFieldId()
			val setSlot0Items: FieldId = 961U.toFieldId()
			val setSlot1ToonId: FieldId = 962U.toFieldId()
			val setSlot1Items: FieldId = 963U.toFieldId()
			val setSlot2ToonId: FieldId = 964U.toFieldId()
			val setSlot2Items: FieldId = 965U.toFieldId()
			val setSlot3ToonId: FieldId = 966U.toFieldId()
			val setSlot3Items: FieldId = 967U.toFieldId()
			val setSlot4ToonId: FieldId = 968U.toFieldId()
			val setSlot4Items: FieldId = 969U.toFieldId()
			val setSlot5ToonId: FieldId = 970U.toFieldId()
			val setSlot5Items: FieldId = 971U.toFieldId()
			val setIdList: FieldId = 972U.toFieldId()
			val completeFlowerSale: FieldId = 973U.toFieldId()
			val awardedTrophy: FieldId = 974U.toFieldId()
			val setClouds: FieldId = 975U.toFieldId()
			val cannonsOver: FieldId = 976U.toFieldId()
			val gameTableOver: FieldId = 977U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		946U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetDcObjectType(it.toStringValue()!!, sender)
			}
		),
		947U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEstateReady(sender)
			}
		),
		948U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetClientReady(sender)
			}
		),
		949U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEstateType(it.toUInt8()!!, sender)
			}
		),
		950U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetClosestHouse(it.toUInt8()!!, sender)
			}
		),
		951U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTreasureIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		952U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestServerTime(sender)
			}
		),
		953U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetServerTime(it.toUInt32()!!, sender)
			}
		),
		954U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDawnTime(it.toUInt32()!!, sender)
			}
		),
		955U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPlaceOnGround(it.toUInt32()!!, sender)
			}
		),
		956U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, )),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetDecorData(with(lawnItem) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		957U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetLastEpochTimeStamp(it.toUInt32()!!, sender)
			}
		),
		958U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetRentalTimeStamp(it.toUInt32()!!, sender)
			}
		),
		959U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetRentalType(it.toUInt8()!!, sender)
			}
		),
		960U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot0ToonId(it.toUInt32()!!, sender)
			}
		),
		961U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, )),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot0Items(with(lawnItem) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		962U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot1ToonId(it.toUInt32()!!, sender)
			}
		),
		963U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, )),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot1Items(with(lawnItem) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		964U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot2ToonId(it.toUInt32()!!, sender)
			}
		),
		965U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, )),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot2Items(with(lawnItem) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		966U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot3ToonId(it.toUInt32()!!, sender)
			}
		),
		967U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, )),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot3Items(with(lawnItem) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		968U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot4ToonId(it.toUInt32()!!, sender)
			}
		),
		969U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, )),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot4Items(with(lawnItem) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		970U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot5ToonId(it.toUInt32()!!, sender)
			}
		),
		971U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, )),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onSetSlot5Items(with(lawnItem) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		972U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIdList(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		973U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onCompleteFlowerSale(it.toUInt8()!!, sender)
			}
		),
		974U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAwardedTrophy(it.toUInt32()!!, sender)
			}
		),
		975U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetClouds(it.toUInt8()!!, sender)
			}
		),
		976U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onCannonsOver(sender)
			}
		),
		977U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onGameTableOver(sender)
			}
		),
	)

	var DcObjectType: String
		get() = getField(946U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	fun setEstateReady() {
		setField(947U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setClientReady() {
		setField(948U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setEstateType(arg0: UByte, ) {
		setField(949U.toFieldId(), arg0.toFieldValue())
	}

	fun setClosestHouse(arg0: UByte, ) {
		setField(950U.toFieldId(), arg0.toFieldValue())
	}

	fun setTreasureIds(arg0: List<UInt>, ) {
		setField(951U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun requestServerTime() {
		setField(952U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setServerTime(arg0: UInt, ) {
		setField(953U.toFieldId(), arg0.toFieldValue())
	}

	fun setDawnTime(arg0: UInt, ) {
		setField(954U.toFieldId(), arg0.toFieldValue())
	}

	fun placeOnGround(arg0: UInt, ) {
		setField(955U.toFieldId(), arg0.toFieldValue())
	}

	fun setDecorData(arg0: List<lawnItem>, ) {
		setField(956U.toFieldId(), with(lawnItem) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setLastEpochTimeStamp(arg0: UInt, ) {
		setField(957U.toFieldId(), arg0.toFieldValue())
	}

	fun setRentalTimeStamp(arg0: UInt, ) {
		setField(958U.toFieldId(), arg0.toFieldValue())
	}

	fun setRentalType(arg0: UByte, ) {
		setField(959U.toFieldId(), arg0.toFieldValue())
	}

	fun setSlot0ToonId(arg0: UInt, ) {
		setField(960U.toFieldId(), arg0.toFieldValue())
	}

	fun setSlot0Items(arg0: List<lawnItem>, ) {
		setField(961U.toFieldId(), with(lawnItem) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setSlot1ToonId(arg0: UInt, ) {
		setField(962U.toFieldId(), arg0.toFieldValue())
	}

	fun setSlot1Items(arg0: List<lawnItem>, ) {
		setField(963U.toFieldId(), with(lawnItem) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setSlot2ToonId(arg0: UInt, ) {
		setField(964U.toFieldId(), arg0.toFieldValue())
	}

	fun setSlot2Items(arg0: List<lawnItem>, ) {
		setField(965U.toFieldId(), with(lawnItem) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setSlot3ToonId(arg0: UInt, ) {
		setField(966U.toFieldId(), arg0.toFieldValue())
	}

	fun setSlot3Items(arg0: List<lawnItem>, ) {
		setField(967U.toFieldId(), with(lawnItem) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setSlot4ToonId(arg0: UInt, ) {
		setField(968U.toFieldId(), arg0.toFieldValue())
	}

	fun setSlot4Items(arg0: List<lawnItem>, ) {
		setField(969U.toFieldId(), with(lawnItem) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setSlot5ToonId(arg0: UInt, ) {
		setField(970U.toFieldId(), arg0.toFieldValue())
	}

	fun setSlot5Items(arg0: List<lawnItem>, ) {
		setField(971U.toFieldId(), with(lawnItem) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setIdList(arg0: List<UInt>, ) {
		setField(972U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun completeFlowerSale(arg0: UByte, ) {
		setField(973U.toFieldId(), arg0.toFieldValue())
	}

	fun awardedTrophy(arg0: UInt, ) {
		setField(974U.toFieldId(), arg0.toFieldValue())
	}

	fun setClouds(arg0: UByte, ) {
		setField(975U.toFieldId(), arg0.toFieldValue())
	}

	fun cannonsOver() {
		setField(976U.toFieldId(), FieldValue.EmptyValue)
	}

	fun gameTableOver() {
		setField(977U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetDcObjectType(DcObjectType: String, sender: ChannelId? = null) {}
	open fun onSetEstateReady(sender: ChannelId? = null) {}
	open fun onSetClientReady(sender: ChannelId? = null) {}
	open fun onSetEstateType(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetClosestHouse(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetTreasureIds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onRequestServerTime(sender: ChannelId? = null) {}
	open fun onSetServerTime(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDawnTime(arg0: UInt, sender: ChannelId? = null) {}
	open fun onPlaceOnGround(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDecorData(arg0: List<lawnItem>, sender: ChannelId? = null) {}
	open fun onSetLastEpochTimeStamp(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetRentalTimeStamp(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetRentalType(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetSlot0ToonId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetSlot0Items(arg0: List<lawnItem>, sender: ChannelId? = null) {}
	open fun onSetSlot1ToonId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetSlot1Items(arg0: List<lawnItem>, sender: ChannelId? = null) {}
	open fun onSetSlot2ToonId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetSlot2Items(arg0: List<lawnItem>, sender: ChannelId? = null) {}
	open fun onSetSlot3ToonId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetSlot3Items(arg0: List<lawnItem>, sender: ChannelId? = null) {}
	open fun onSetSlot4ToonId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetSlot4Items(arg0: List<lawnItem>, sender: ChannelId? = null) {}
	open fun onSetSlot5ToonId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetSlot5Items(arg0: List<lawnItem>, sender: ChannelId? = null) {}
	open fun onSetIdList(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onCompleteFlowerSale(arg0: UByte, sender: ChannelId? = null) {}
	open fun onAwardedTrophy(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetClouds(arg0: UByte, sender: ChannelId? = null) {}
	open fun onCannonsOver(sender: ChannelId? = null) {}
	open fun onGameTableOver(sender: ChannelId? = null) {}
}

open class DistributedHouse(doId: DOId): DistributedObjectBase(doId, 138U.toDClassId()) {
	companion object {
		val dClassId = 138U.toDClassId()

		object Fields {
			val DcObjectType: FieldId = 978U.toFieldId()
			val setHousePos: FieldId = 979U.toFieldId()
			val setHouseType: FieldId = 980U.toFieldId()
			val setGardenPos: FieldId = 981U.toFieldId()
			val setAvatarId: FieldId = 982U.toFieldId()
			val setName: FieldId = 983U.toFieldId()
			val setColor: FieldId = 984U.toFieldId()
			val setAtticItems: FieldId = 985U.toFieldId()
			val setInteriorItems: FieldId = 986U.toFieldId()
			val setAtticWallpaper: FieldId = 987U.toFieldId()
			val setInteriorWallpaper: FieldId = 988U.toFieldId()
			val setAtticWindows: FieldId = 989U.toFieldId()
			val setInteriorWindows: FieldId = 990U.toFieldId()
			val setDeletedItems: FieldId = 991U.toFieldId()
			val setCannonEnabled: FieldId = 992U.toFieldId()
			val setHouseReady: FieldId = 993U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		978U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetDcObjectType(it.toStringValue()!!, sender)
			}
		),
		979U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHousePos(it.toUInt8()!!, sender)
			}
		),
		980U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHouseType(it.toUInt8()!!, sender)
			}
		),
		981U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGardenPos(it.toUInt8()!!, sender)
			}
		),
		982U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarId(it.toUInt32()!!, sender)
			}
		),
		983U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetName(it.toStringValue()!!, sender)
			}
		),
		984U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetColor(it.toUInt8()!!, sender)
			}
		),
		985U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetAtticItems(it.toBlob()!!, sender)
			}
		),
		986U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetInteriorItems(it.toBlob()!!, sender)
			}
		),
		987U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetAtticWallpaper(it.toBlob()!!, sender)
			}
		),
		988U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetInteriorWallpaper(it.toBlob()!!, sender)
			}
		),
		989U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetAtticWindows(it.toBlob()!!, sender)
			}
		),
		990U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetInteriorWindows(it.toBlob()!!, sender)
			}
		),
		991U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetDeletedItems(it.toBlob()!!, sender)
			}
		),
		992U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
				)
			),
			onChange = { it, sender ->
				onSetCannonEnabled(it.toUInt8()!!, sender)
			}
		),
		993U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHouseReady(sender)
			}
		),
	)

	var DcObjectType: String
		get() = getField(978U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	fun setHousePos(arg0: UByte, ) {
		setField(979U.toFieldId(), arg0.toFieldValue())
	}

	fun setHouseType(arg0: UByte, ) {
		setField(980U.toFieldId(), arg0.toFieldValue())
	}

	fun setGardenPos(arg0: UByte, ) {
		setField(981U.toFieldId(), arg0.toFieldValue())
	}

	fun setAvatarId(arg0: UInt, ) {
		setField(982U.toFieldId(), arg0.toFieldValue())
	}

	fun setName(arg0: String, ) {
		setField(983U.toFieldId(), arg0.toFieldValue())
	}

	fun setColor(arg0: UByte, ) {
		setField(984U.toFieldId(), arg0.toFieldValue())
	}

	fun setAtticItems(arg0: ByteArray, ) {
		setField(985U.toFieldId(), arg0.toFieldValue())
	}

	fun setInteriorItems(arg0: ByteArray, ) {
		setField(986U.toFieldId(), arg0.toFieldValue())
	}

	fun setAtticWallpaper(arg0: ByteArray, ) {
		setField(987U.toFieldId(), arg0.toFieldValue())
	}

	fun setInteriorWallpaper(arg0: ByteArray, ) {
		setField(988U.toFieldId(), arg0.toFieldValue())
	}

	fun setAtticWindows(arg0: ByteArray, ) {
		setField(989U.toFieldId(), arg0.toFieldValue())
	}

	fun setInteriorWindows(arg0: ByteArray, ) {
		setField(990U.toFieldId(), arg0.toFieldValue())
	}

	fun setDeletedItems(arg0: ByteArray, ) {
		setField(991U.toFieldId(), arg0.toFieldValue())
	}

	fun setCannonEnabled(arg0: UByte, ) {
		setField(992U.toFieldId(), arg0.toFieldValue())
	}

	fun setHouseReady() {
		setField(993U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetDcObjectType(DcObjectType: String, sender: ChannelId? = null) {}
	open fun onSetHousePos(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetHouseType(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetGardenPos(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetAvatarId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetName(arg0: String, sender: ChannelId? = null) {}
	open fun onSetColor(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetAtticItems(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetInteriorItems(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetAtticWallpaper(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetInteriorWallpaper(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetAtticWindows(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetInteriorWindows(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetDeletedItems(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetCannonEnabled(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetHouseReady(sender: ChannelId? = null) {}
}

open class DistributedHouseInterior(doId: DOId): DistributedObjectBase(doId, 139U.toDClassId()) {
	companion object {
		val dClassId = 139U.toDClassId()

		object Fields {
			val setHouseId: FieldId = 994U.toFieldId()
			val setHouseIndex: FieldId = 995U.toFieldId()
			val setWallpaper: FieldId = 996U.toFieldId()
			val setWindows: FieldId = 997U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		994U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHouseId(it.toUInt32()!!, sender)
			}
		),
		995U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHouseIndex(it.toUInt8()!!, sender)
			}
		),
		996U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetWallpaper(it.toBlob()!!, sender)
			}
		),
		997U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetWindows(it.toBlob()!!, sender)
			}
		),
	)

	fun setHouseId(arg0: UInt, ) {
		setField(994U.toFieldId(), arg0.toFieldValue())
	}

	fun setHouseIndex(arg0: UByte, ) {
		setField(995U.toFieldId(), arg0.toFieldValue())
	}

	fun setWallpaper(arg0: ByteArray, ) {
		setField(996U.toFieldId(), arg0.toFieldValue())
	}

	fun setWindows(arg0: ByteArray, ) {
		setField(997U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetHouseId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetHouseIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetWallpaper(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetWindows(arg0: ByteArray, sender: ChannelId? = null) {}
}

open class DistributedGarden(doId: DOId): DistributedObjectBase(doId, 140U.toDClassId()) {
	companion object {
		val dClassId = 140U.toDClassId()

		object Fields {
			val sendNewProp: FieldId = 998U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		998U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				onSendNewProp(t0, t1, t2, t3, sender)
				}
			}
		),
	)

	fun sendNewProp(arg0: UByte, arg1: Double, arg2: Double, arg3: Double, ) {
		setField(998U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	open fun onSendNewProp(arg0: UByte, arg1: Double, arg2: Double, arg3: Double, sender: ChannelId? = null) {}
}

open class DistributedParty(doId: DOId): DistributedObjectBase(doId, 141U.toDClassId()) {
	companion object {
		val dClassId = 141U.toDClassId()

		object Fields {
			val setPartyClockInfo: FieldId = 999U.toFieldId()
			val setInviteeIds: FieldId = 1000U.toFieldId()
			val setPartyState: FieldId = 1001U.toFieldId()
			val setPartyInfoTuple: FieldId = 1002U.toFieldId()
			val setAvIdsAtParty: FieldId = 1003U.toFieldId()
			val setPartyStartedTime: FieldId = 1004U.toFieldId()
			val setHostName: FieldId = 1005U.toFieldId()
			val avIdEnteredParty: FieldId = 1006U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		999U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				onSetPartyClockInfo(t0, t1, t2, sender)
				}
			}
		),
		1000U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetInviteeIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1001U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPartyState(with(bool) { fromFieldValue(it)}, sender)
			}
		),
		1002U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPartyInfoTuple(with(party) { fromFieldValue(it)}, sender)
			}
		),
		1003U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAvIdsAtParty(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1004U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPartyStartedTime(it.toStringValue()!!, sender)
			}
		),
		1005U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHostName(it.toStringValue()!!, sender)
			}
		),
		1006U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvIdEnteredParty(it.toUInt32()!!, sender)
			}
		),
	)

	fun setPartyClockInfo(arg0: UByte, arg1: UByte, arg2: UByte, ) {
		setField(999U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setInviteeIds(arg0: List<UInt>, ) {
		setField(1000U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setPartyState(arg0: bool, ) {
		setField(1001U.toFieldId(), with(bool) { arg0.toFieldValue()})
	}

	fun setPartyInfoTuple(arg0: party, ) {
		setField(1002U.toFieldId(), with(party) { arg0.toFieldValue()})
	}

	fun setAvIdsAtParty(arg0: List<UInt>, ) {
		setField(1003U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setPartyStartedTime(arg0: String, ) {
		setField(1004U.toFieldId(), arg0.toFieldValue())
	}

	fun setHostName(arg0: String, ) {
		setField(1005U.toFieldId(), arg0.toFieldValue())
	}

	fun avIdEnteredParty(arg0: UInt, ) {
		setField(1006U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetPartyClockInfo(arg0: UByte, arg1: UByte, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetInviteeIds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetPartyState(arg0: bool, sender: ChannelId? = null) {}
	open fun onSetPartyInfoTuple(arg0: party, sender: ChannelId? = null) {}
	open fun onSetAvIdsAtParty(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetPartyStartedTime(arg0: String, sender: ChannelId? = null) {}
	open fun onSetHostName(arg0: String, sender: ChannelId? = null) {}
	open fun onAvIdEnteredParty(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedPartyActivity(doId: DOId): DistributedObjectBase(doId, 142U.toDClassId()) {
	companion object {
		val dClassId = 142U.toDClassId()

		object Fields {
			val setX: FieldId = 1007U.toFieldId()
			val setY: FieldId = 1008U.toFieldId()
			val setH: FieldId = 1009U.toFieldId()
			val setPartyDoId: FieldId = 1010U.toFieldId()
			val toonJoinRequest: FieldId = 1011U.toFieldId()
			val toonExitRequest: FieldId = 1012U.toFieldId()
			val toonExitDemand: FieldId = 1013U.toFieldId()
			val toonReady: FieldId = 1014U.toFieldId()
			val joinRequestDenied: FieldId = 1015U.toFieldId()
			val exitRequestDenied: FieldId = 1016U.toFieldId()
			val setToonsPlaying: FieldId = 1017U.toFieldId()
			val setState: FieldId = 1018U.toFieldId()
			val showJellybeanReward: FieldId = 1019U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1007U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetX(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		1008U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetY(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		1009U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetH(it.toUInt16()!!.transform {
						divide(100.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		1010U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPartyDoId(it.toUInt32()!!, sender)
			}
		),
		1011U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonJoinRequest(sender)
			}
		),
		1012U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonExitRequest(sender)
			}
		),
		1013U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonExitDemand(sender)
			}
		),
		1014U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonReady(sender)
			}
		),
		1015U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onJoinRequestDenied(it.toUInt8()!!, sender)
			}
		),
		1016U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onExitRequestDenied(it.toUInt8()!!, sender)
			}
		),
		1017U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetToonsPlaying(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1018U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		1019U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toStringValue()!!
				onShowJellybeanReward(t0, t1, t2, sender)
				}
			}
		),
	)

	fun setX(arg0: Double, ) {
		setField(1007U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setY(arg0: Double, ) {
		setField(1008U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setH(arg0: Double, ) {
		setField(1009U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setPartyDoId(arg0: UInt, ) {
		setField(1010U.toFieldId(), arg0.toFieldValue())
	}

	fun toonJoinRequest() {
		setField(1011U.toFieldId(), FieldValue.EmptyValue)
	}

	fun toonExitRequest() {
		setField(1012U.toFieldId(), FieldValue.EmptyValue)
	}

	fun toonExitDemand() {
		setField(1013U.toFieldId(), FieldValue.EmptyValue)
	}

	fun toonReady() {
		setField(1014U.toFieldId(), FieldValue.EmptyValue)
	}

	fun joinRequestDenied(arg0: UByte, ) {
		setField(1015U.toFieldId(), arg0.toFieldValue())
	}

	fun exitRequestDenied(arg0: UByte, ) {
		setField(1016U.toFieldId(), arg0.toFieldValue())
	}

	fun setToonsPlaying(arg0: List<UInt>, ) {
		setField(1017U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setState(arg0: String, arg1: Short, ) {
		setField(1018U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun showJellybeanReward(arg0: UInt, arg1: UByte, arg2: String, ) {
		setField(1019U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onSetX(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetY(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetH(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetPartyDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onToonJoinRequest(sender: ChannelId? = null) {}
	open fun onToonExitRequest(sender: ChannelId? = null) {}
	open fun onToonExitDemand(sender: ChannelId? = null) {}
	open fun onToonReady(sender: ChannelId? = null) {}
	open fun onJoinRequestDenied(arg0: UByte, sender: ChannelId? = null) {}
	open fun onExitRequestDenied(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetToonsPlaying(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onShowJellybeanReward(arg0: UInt, arg1: UByte, arg2: String, sender: ChannelId? = null) {}
}

open class DistributedPartyTeamActivity(doId: DOId): DistributedObjectBase(doId, 143U.toDClassId()) {
	companion object {
		val dClassId = 143U.toDClassId()

		object Fields {
			val toonJoinRequest: FieldId = 1020U.toFieldId()
			val toonExitRequest: FieldId = 1021U.toFieldId()
			val toonSwitchTeamRequest: FieldId = 1022U.toFieldId()
			val setPlayersPerTeam: FieldId = 1023U.toFieldId()
			val setDuration: FieldId = 1024U.toFieldId()
			val setCanSwitchTeams: FieldId = 1025U.toFieldId()
			val setState: FieldId = 1026U.toFieldId()
			val setToonsPlaying: FieldId = 1027U.toFieldId()
			val setAdvantage: FieldId = 1028U.toFieldId()
			val switchTeamRequestDenied: FieldId = 1029U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1020U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonJoinRequest(it.toUInt8()!!.transform {
null
					}, sender)
			}
		),
		1021U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonExitRequest(it.toUInt8()!!.transform {
null
					}, sender)
			}
		),
		1022U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonSwitchTeamRequest(sender)
			}
		),
		1023U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onSetPlayersPerTeam(t0, t1, sender)
				}
			}
		),
		1024U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDuration(it.toUInt8()!!, sender)
			}
		),
		1025U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCanSwitchTeams(with(bool) { fromFieldValue(it)}, sender)
			}
		),
		1026U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toUInt32()!!
				onSetState(t0, t1, t2, sender)
				}
			}
		),
		1027U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onSetToonsPlaying(t0, t1, sender)
				}
			}
		),
		1028U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetAdvantage(it.toUInt16()!!.transform {
						divide(100.0f)
					}, sender)
			}
		),
		1029U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSwitchTeamRequestDenied(it.toUInt8()!!, sender)
			}
		),
	)

	fun toonJoinRequest(arg0: Double, ) {
		setField(1020U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt8) {
null
		}.toFieldValue())
	}

	fun toonExitRequest(arg0: Double, ) {
		setField(1021U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt8) {
null
		}.toFieldValue())
	}

	fun toonSwitchTeamRequest() {
		setField(1022U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setPlayersPerTeam(arg0: UByte, arg1: UByte, ) {
		setField(1023U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setDuration(arg0: UByte, ) {
		setField(1024U.toFieldId(), arg0.toFieldValue())
	}

	fun setCanSwitchTeams(arg0: bool, ) {
		setField(1025U.toFieldId(), with(bool) { arg0.toFieldValue()})
	}

	fun setState(arg0: String, arg1: Short, arg2: UInt, ) {
		setField(1026U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setToonsPlaying(arg0: List<UInt>, arg1: List<UInt>, ) {
		setField(1027U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setAdvantage(arg0: Double, ) {
		setField(1028U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
		}.toFieldValue())
	}

	fun switchTeamRequestDenied(arg0: UByte, ) {
		setField(1029U.toFieldId(), arg0.toFieldValue())
	}

	open fun onToonJoinRequest(arg0: Double, sender: ChannelId? = null) {}
	open fun onToonExitRequest(arg0: Double, sender: ChannelId? = null) {}
	open fun onToonSwitchTeamRequest(sender: ChannelId? = null) {}
	open fun onSetPlayersPerTeam(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetDuration(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetCanSwitchTeams(arg0: bool, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, arg2: UInt, sender: ChannelId? = null) {}
	open fun onSetToonsPlaying(arg0: List<UInt>, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetAdvantage(arg0: Double, sender: ChannelId? = null) {}
	open fun onSwitchTeamRequestDenied(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedPartyCatchActivity(doId: DOId): DistributedObjectBase(doId, 145U.toDClassId()) {
	companion object {
		val dClassId = 145U.toDClassId()

		object Fields {
			val setStartTimestamp: FieldId = 1033U.toFieldId()
			val setGenerations: FieldId = 1034U.toFieldId()
			val requestActivityStart: FieldId = 1035U.toFieldId()
			val startRequestResponse: FieldId = 1036U.toFieldId()
			val claimCatch: FieldId = 1037U.toFieldId()
			val setObjectCaught: FieldId = 1038U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1033U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetStartTimestamp(it.toUInt32()!!, sender)
			}
		),
		1034U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int8, )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGenerations(with(CatchGeneration) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		1035U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestActivityStart(sender)
			}
		),
		1036U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onStartRequestResponse(it.toUInt8()!!, sender)
			}
		),
		1037U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onClaimCatch(t0, t1, t2, sender)
				}
			}
		),
		1038U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onSetObjectCaught(t0, t1, t2, sender)
				}
			}
		),
	)

	fun setStartTimestamp(arg0: UInt, ) {
		setField(1033U.toFieldId(), arg0.toFieldValue())
	}

	fun setGenerations(arg0: List<CatchGeneration>, ) {
		setField(1034U.toFieldId(), with(CatchGeneration) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int8, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun requestActivityStart() {
		setField(1035U.toFieldId(), FieldValue.EmptyValue)
	}

	fun startRequestResponse(arg0: UByte, ) {
		setField(1036U.toFieldId(), arg0.toFieldValue())
	}

	fun claimCatch(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(1037U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setObjectCaught(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(1038U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onSetStartTimestamp(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetGenerations(arg0: List<CatchGeneration>, sender: ChannelId? = null) {}
	open fun onRequestActivityStart(sender: ChannelId? = null) {}
	open fun onStartRequestResponse(arg0: UByte, sender: ChannelId? = null) {}
	open fun onClaimCatch(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onSetObjectCaught(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
}

open class DistributedPartyWinterCatchActivity(doId: DOId): DistributedObjectBase(doId, 146U.toDClassId()) {
	companion object {
		val dClassId = 146U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyCogActivity(doId: DOId): DistributedObjectBase(doId, 147U.toDClassId()) {
	companion object {
		val dClassId = 147U.toDClassId()

		object Fields {
			val pieThrow: FieldId = 1039U.toFieldId()
			val pieHitsToon: FieldId = 1040U.toFieldId()
			val pieHitsCog: FieldId = 1041U.toFieldId()
			val setCogDistances: FieldId = 1042U.toFieldId()
			val setHighScore: FieldId = 1043U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1039U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toUInt8()!!
				onPieThrow(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		1040U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				onPieHitsToon(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1041U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt8()!!.transform {
null
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toInt32()!!
				val t7 = with(bool) { fromFieldValue(it)}
				onPieHitsCog(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		1042U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Int8),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCogDistances(it.toList()!!.map { it.toInt8()!!.transform {
						divide(100.0f)
					} }, sender)
			}
		),
		1043U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toUInt16()!!
				onSetHighScore(t0, t1, sender)
				}
			}
		),
	)

	fun pieThrow(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: UByte, ) {
		setField(1039U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.toFieldValue(), 
				))
	}

	fun pieHitsToon(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, ) {
		setField(1040U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun pieHitsCog(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Int, arg7: bool, ) {
		setField(1041U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int8) {
null
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.toFieldValue(), 
			with(bool) { arg7.toFieldValue()}, 
				))
	}

	fun setCogDistances(arg0: List<Double>, ) {
		setField(1042U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.Int8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setHighScore(arg0: String, arg1: UShort, ) {
		setField(1043U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onPieThrow(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: UByte, sender: ChannelId? = null) {}
	open fun onPieHitsToon(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, sender: ChannelId? = null) {}
	open fun onPieHitsCog(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Int, arg7: bool, sender: ChannelId? = null) {}
	open fun onSetCogDistances(arg0: List<Double>, sender: ChannelId? = null) {}
	open fun onSetHighScore(arg0: String, arg1: UShort, sender: ChannelId? = null) {}
}

open class DistributedPartyWinterCogActivity(doId: DOId): DistributedObjectBase(doId, 148U.toDClassId()) {
	companion object {
		val dClassId = 148U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyDanceActivityBase(doId: DOId): DistributedObjectBase(doId, 149U.toDClassId()) {
	companion object {
		val dClassId = 149U.toDClassId()

		object Fields {
			val updateDancingToon: FieldId = 1044U.toFieldId()
			val setToonsPlaying: FieldId = 1045U.toFieldId()
			val setDancingToonState: FieldId = 1046U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1044U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Char), ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toList()!!.map { it.toChar()!! }
				onUpdateDancingToon(t0, t1, sender)
				}
			}
		),
		1045U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt16), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt16()!!.transform {
						divide(100.0f)
						modulo(360.0f)
					} }
				onSetToonsPlaying(t0, t1, sender)
				}
			}
		),
		1046U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toStringValue()!!
				onSetDancingToonState(t0, t1, t2, sender)
				}
			}
		),
	)

	fun updateDancingToon(arg0: UByte, arg1: List<Char>, ) {
		setField(1044U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Char, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setToonsPlaying(arg0: List<UInt>, arg1: List<Double>, ) {
		setField(1045U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt16, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setDancingToonState(arg0: UInt, arg1: UByte, arg2: String, ) {
		setField(1046U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onUpdateDancingToon(arg0: UByte, arg1: List<Char>, sender: ChannelId? = null) {}
	open fun onSetToonsPlaying(arg0: List<UInt>, arg1: List<Double>, sender: ChannelId? = null) {}
	open fun onSetDancingToonState(arg0: UInt, arg1: UByte, arg2: String, sender: ChannelId? = null) {}
}

open class DistributedPartyDanceActivity(doId: DOId): DistributedObjectBase(doId, 150U.toDClassId()) {
	companion object {
		val dClassId = 150U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyDance20Activity(doId: DOId): DistributedObjectBase(doId, 151U.toDClassId()) {
	companion object {
		val dClassId = 151U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyValentineDanceActivity(doId: DOId): DistributedObjectBase(doId, 152U.toDClassId()) {
	companion object {
		val dClassId = 152U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyValentineDance20Activity(doId: DOId): DistributedObjectBase(doId, 153U.toDClassId()) {
	companion object {
		val dClassId = 153U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyJukeboxActivityBase(doId: DOId): DistributedObjectBase(doId, 154U.toDClassId()) {
	companion object {
		val dClassId = 154U.toDClassId()

		object Fields {
			val setNextSong: FieldId = 1047U.toFieldId()
			val setSongPlaying: FieldId = 1048U.toFieldId()
			val queuedSongsRequest: FieldId = 1049U.toFieldId()
			val queuedSongsResponse: FieldId = 1050U.toFieldId()
			val setSongInQueue: FieldId = 1051U.toFieldId()
			val moveHostSongToTopRequest: FieldId = 1052U.toFieldId()
			val moveHostSongToTop: FieldId = 1053U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1047U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetNextSong(with(jukeboxSongInfo) { fromFieldValue(it)}, sender)
			}
		),
		1048U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, ), FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = with(jukeboxSongInfo) { fromFieldValue(it)}
				val t1 = values[1].toUInt32()!!
				onSetSongPlaying(t0, t1, sender)
				}
			}
		),
		1049U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onQueuedSongsRequest(sender)
			}
		),
		1050U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, )), FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = with(jukeboxSongInfo) { values[0].toList()!!.map { fromFieldValue(it) }}
				val t1 = values[1].toInt16()!!
				onQueuedSongsResponse(t0, t1, sender)
				}
			}
		),
		1051U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetSongInQueue(with(jukeboxSongInfo) { fromFieldValue(it)}, sender)
			}
		),
		1052U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onMoveHostSongToTopRequest(sender)
			}
		),
		1053U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onMoveHostSongToTop(sender)
			}
		),
	)

	fun setNextSong(arg0: jukeboxSongInfo, ) {
		setField(1047U.toFieldId(), with(jukeboxSongInfo) { arg0.toFieldValue()})
	}

	fun setSongPlaying(arg0: jukeboxSongInfo, arg1: UInt, ) {
		setField(1048U.toFieldId(), FieldValue.TupleValue(
			with(jukeboxSongInfo) { arg0.toFieldValue()}, 
			arg1.toFieldValue(), 
				))
	}

	fun queuedSongsRequest() {
		setField(1049U.toFieldId(), FieldValue.EmptyValue)
	}

	fun queuedSongsResponse(arg0: List<jukeboxSongInfo>, arg1: Short, ) {
		setField(1050U.toFieldId(), FieldValue.TupleValue(
			with(jukeboxSongInfo) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, ), arg0.map { it.toFieldValue() }).toFieldValue()}, 
			arg1.toFieldValue(), 
				))
	}

	fun setSongInQueue(arg0: jukeboxSongInfo, ) {
		setField(1051U.toFieldId(), with(jukeboxSongInfo) { arg0.toFieldValue()})
	}

	fun moveHostSongToTopRequest() {
		setField(1052U.toFieldId(), FieldValue.EmptyValue)
	}

	fun moveHostSongToTop() {
		setField(1053U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetNextSong(arg0: jukeboxSongInfo, sender: ChannelId? = null) {}
	open fun onSetSongPlaying(arg0: jukeboxSongInfo, arg1: UInt, sender: ChannelId? = null) {}
	open fun onQueuedSongsRequest(sender: ChannelId? = null) {}
	open fun onQueuedSongsResponse(arg0: List<jukeboxSongInfo>, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetSongInQueue(arg0: jukeboxSongInfo, sender: ChannelId? = null) {}
	open fun onMoveHostSongToTopRequest(sender: ChannelId? = null) {}
	open fun onMoveHostSongToTop(sender: ChannelId? = null) {}
}

open class DistributedPartyJukeboxActivity(doId: DOId): DistributedObjectBase(doId, 155U.toDClassId()) {
	companion object {
		val dClassId = 155U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyJukebox40Activity(doId: DOId): DistributedObjectBase(doId, 156U.toDClassId()) {
	companion object {
		val dClassId = 156U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyValentineJukeboxActivity(doId: DOId): DistributedObjectBase(doId, 157U.toDClassId()) {
	companion object {
		val dClassId = 157U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyValentineJukebox40Activity(doId: DOId): DistributedObjectBase(doId, 158U.toDClassId()) {
	companion object {
		val dClassId = 158U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyCannonActivity(doId: DOId): DistributedObjectBase(doId, 159U.toDClassId()) {
	companion object {
		val dClassId = 159U.toDClassId()

		object Fields {
			val setMovie: FieldId = 1054U.toFieldId()
			val setLanded: FieldId = 1055U.toFieldId()
			val setCannonWillFire: FieldId = 1056U.toFieldId()
			val cloudsColorRequest: FieldId = 1057U.toFieldId()
			val cloudsColorResponse: FieldId = 1058U.toFieldId()
			val requestCloudHit: FieldId = 1059U.toFieldId()
			val setCloudHit: FieldId = 1060U.toFieldId()
			val setToonTrajectoryAi: FieldId = 1061U.toFieldId()
			val setToonTrajectory: FieldId = 1062U.toFieldId()
			val updateToonTrajectoryStartVelAi: FieldId = 1063U.toFieldId()
			val updateToonTrajectoryStartVel: FieldId = 1064U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1054U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onSetMovie(t0, t1, sender)
				}
			}
		),
		1055U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetLanded(it.toUInt32()!!, sender)
			}
		),
		1056U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toUInt32()!!.transform {
						divide(100.0f)
					}
				onSetCannonWillFire(t0, t1, t2, sender)
				}
			}
		),
		1057U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onCloudsColorRequest(sender)
			}
		),
		1058U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onCloudsColorResponse(with(partyCloudColor) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		1059U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toUInt8()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toUInt8()!!.transform {
						divide(100.0f)
					}
				onRequestCloudHit(t0, t1, t2, t3, sender)
				}
			}
		),
		1060U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toUInt8()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toUInt8()!!.transform {
						divide(100.0f)
					}
				onSetCloudHit(t0, t1, t2, t3, sender)
				}
			}
		),
		1061U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(100.0f)
					}
				val t7 = values[7].toInt32()!!.transform {
						divide(100.0f)
					}
				val t8 = values[8].toInt32()!!.transform {
						divide(100.0f)
					}
				val t9 = values[9].toInt32()!!.transform {
						divide(100.0f)
					}
				onSetToonTrajectoryAi(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, sender)
				}
			}
		),
		1062U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(100.0f)
					}
				val t7 = values[7].toInt32()!!.transform {
						divide(100.0f)
					}
				val t8 = values[8].toInt32()!!.transform {
						divide(100.0f)
					}
				val t9 = values[9].toInt32()!!.transform {
						divide(100.0f)
					}
				val t10 = values[10].toInt32()!!.transform {
						divide(100.0f)
					}
				onSetToonTrajectory(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, sender)
				}
			}
		),
		1063U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(100.0f)
					}
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				onUpdateToonTrajectoryStartVelAi(t0, t1, t2, sender)
				}
			}
		),
		1064U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				onUpdateToonTrajectoryStartVel(t0, t1, t2, t3, sender)
				}
			}
		),
	)

	fun setMovie(arg0: UByte, arg1: UInt, ) {
		setField(1054U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setLanded(arg0: UInt, ) {
		setField(1055U.toFieldId(), arg0.toFieldValue())
	}

	fun setCannonWillFire(arg0: UInt, arg1: Double, arg2: Double, ) {
		setField(1056U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun cloudsColorRequest() {
		setField(1057U.toFieldId(), FieldValue.EmptyValue)
	}

	fun cloudsColorResponse(arg0: List<partyCloudColor>, ) {
		setField(1058U.toFieldId(), with(partyCloudColor) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun requestCloudHit(arg0: UShort, arg1: Double, arg2: Double, arg3: Double, ) {
		setField(1059U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt8) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt8) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.UInt8) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setCloudHit(arg0: UShort, arg1: Double, arg2: Double, arg3: Double, ) {
		setField(1060U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt8) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt8) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.UInt8) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setToonTrajectoryAi(arg0: Int, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Double, arg9: Double, ) {
		setField(1061U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg7.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg8.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg9.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setToonTrajectory(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Double, arg9: Double, arg10: Double, ) {
		setField(1062U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg7.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg8.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg9.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg10.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun updateToonTrajectoryStartVelAi(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(1063U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun updateToonTrajectoryStartVel(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, ) {
		setField(1064U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	open fun onSetMovie(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetLanded(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetCannonWillFire(arg0: UInt, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onCloudsColorRequest(sender: ChannelId? = null) {}
	open fun onCloudsColorResponse(arg0: List<partyCloudColor>, sender: ChannelId? = null) {}
	open fun onRequestCloudHit(arg0: UShort, arg1: Double, arg2: Double, arg3: Double, sender: ChannelId? = null) {}
	open fun onSetCloudHit(arg0: UShort, arg1: Double, arg2: Double, arg3: Double, sender: ChannelId? = null) {}
	open fun onSetToonTrajectoryAi(arg0: Int, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Double, arg9: Double, sender: ChannelId? = null) {}
	open fun onSetToonTrajectory(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Double, arg9: Double, arg10: Double, sender: ChannelId? = null) {}
	open fun onUpdateToonTrajectoryStartVelAi(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onUpdateToonTrajectoryStartVel(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, sender: ChannelId? = null) {}
}

open class DistributedPartyCannon(doId: DOId): DistributedObjectBase(doId, 160U.toDClassId()) {
	companion object {
		val dClassId = 160U.toDClassId()

		object Fields {
			val setActivityDoId: FieldId = 1065U.toFieldId()
			val setPosHpr: FieldId = 1066U.toFieldId()
			val requestEnter: FieldId = 1067U.toFieldId()
			val requestExit: FieldId = 1068U.toFieldId()
			val setMovie: FieldId = 1069U.toFieldId()
			val setCannonPosition: FieldId = 1070U.toFieldId()
			val setCannonLit: FieldId = 1071U.toFieldId()
			val setFired: FieldId = 1072U.toFieldId()
			val setLanded: FieldId = 1073U.toFieldId()
			val updateCannonPosition: FieldId = 1074U.toFieldId()
			val setCannonExit: FieldId = 1075U.toFieldId()
			val setTimeout: FieldId = 1076U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1065U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt64,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetActivityDoId(it.toUInt64()!!, sender)
			}
		),
		1066U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		1067U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestEnter(sender)
			}
		),
		1068U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		1069U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onSetMovie(t0, t1, sender)
				}
			}
		),
		1070U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(100.0f)
					}
				val t1 = values[1].toUInt32()!!.transform {
						divide(100.0f)
					}
				onSetCannonPosition(t0, t1, sender)
				}
			}
		),
		1071U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(100.0f)
					}
				val t1 = values[1].toUInt32()!!.transform {
						divide(100.0f)
					}
				onSetCannonLit(t0, t1, sender)
				}
			}
		),
		1072U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetFired(sender)
			}
		),
		1073U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetLanded(it.toUInt32()!!, sender)
			}
		),
		1074U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toUInt32()!!.transform {
						divide(100.0f)
					}
				onUpdateCannonPosition(t0, t1, t2, sender)
				}
			}
		),
		1075U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCannonExit(it.toUInt32()!!, sender)
			}
		),
		1076U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetTimeout(sender)
			}
		),
	)

	fun setActivityDoId(arg0: ULong, ) {
		setField(1065U.toFieldId(), arg0.toFieldValue())
	}

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(1066U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun requestEnter() {
		setField(1067U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestExit() {
		setField(1068U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setMovie(arg0: UByte, arg1: UInt, ) {
		setField(1069U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setCannonPosition(arg0: Double, arg1: Double, ) {
		setField(1070U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setCannonLit(arg0: Double, arg1: Double, ) {
		setField(1071U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setFired() {
		setField(1072U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setLanded(arg0: UInt, ) {
		setField(1073U.toFieldId(), arg0.toFieldValue())
	}

	fun updateCannonPosition(arg0: UInt, arg1: Double, arg2: Double, ) {
		setField(1074U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setCannonExit(arg0: UInt, ) {
		setField(1075U.toFieldId(), arg0.toFieldValue())
	}

	fun setTimeout() {
		setField(1076U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetActivityDoId(arg0: ULong, sender: ChannelId? = null) {}
	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onRequestEnter(sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetCannonPosition(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetCannonLit(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetFired(sender: ChannelId? = null) {}
	open fun onSetLanded(arg0: UInt, sender: ChannelId? = null) {}
	open fun onUpdateCannonPosition(arg0: UInt, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetCannonExit(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetTimeout(sender: ChannelId? = null) {}
}

open class DistributedPartyFireworksActivity(doId: DOId): DistributedObjectBase(doId, 161U.toDClassId()) {
	companion object {
		val dClassId = 161U.toDClassId()

		object Fields {
			val setEventId: FieldId = 1077U.toFieldId()
			val setShowStyle: FieldId = 1078U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1077U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEventId(it.toUInt8()!!, sender)
			}
		),
		1078U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetShowStyle(it.toUInt8()!!, sender)
			}
		),
	)

	fun setEventId(arg0: UByte, ) {
		setField(1077U.toFieldId(), arg0.toFieldValue())
	}

	fun setShowStyle(arg0: UByte, ) {
		setField(1078U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetEventId(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetShowStyle(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedPartyTrampolineActivity(doId: DOId): DistributedObjectBase(doId, 162U.toDClassId()) {
	companion object {
		val dClassId = 162U.toDClassId()

		object Fields {
			val awardBeans: FieldId = 1079U.toFieldId()
			val setBestHeightInfo: FieldId = 1080U.toFieldId()
			val reportHeightInformation: FieldId = 1081U.toFieldId()
			val leaveTrampoline: FieldId = 1082U.toFieldId()
			val requestAnim: FieldId = 1083U.toFieldId()
			val requestAnimEcho: FieldId = 1084U.toFieldId()
			val removeBeans: FieldId = 1085U.toFieldId()
			val removeBeansEcho: FieldId = 1086U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1079U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt16()!!
				onAwardBeans(t0, t1, sender)
				}
			}
		),
		1080U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toUInt16()!!
				onSetBestHeightInfo(t0, t1, sender)
				}
			}
		),
		1081U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReportHeightInformation(it.toUInt16()!!, sender)
			}
		),
		1082U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onLeaveTrampoline(sender)
			}
		),
		1083U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Char),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestAnim(it.toList()!!.map { it.toChar()!! }, sender)
			}
		),
		1084U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onRequestAnimEcho(it.toStringValue()!!, sender)
			}
		),
		1085U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Int8),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRemoveBeans(it.toList()!!.map { it.toInt8()!! }, sender)
			}
		),
		1086U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Int8),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onRemoveBeansEcho(it.toList()!!.map { it.toInt8()!! }, sender)
			}
		),
	)

	fun awardBeans(arg0: UByte, arg1: UShort, ) {
		setField(1079U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setBestHeightInfo(arg0: String, arg1: UShort, ) {
		setField(1080U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun reportHeightInformation(arg0: UShort, ) {
		setField(1081U.toFieldId(), arg0.toFieldValue())
	}

	fun leaveTrampoline() {
		setField(1082U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestAnim(arg0: List<Char>, ) {
		setField(1083U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.Char, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun requestAnimEcho(arg0: String, ) {
		setField(1084U.toFieldId(), arg0.toFieldValue())
	}

	fun removeBeans(arg0: List<Byte>, ) {
		setField(1085U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.Int8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun removeBeansEcho(arg0: List<Byte>, ) {
		setField(1086U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.Int8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	open fun onAwardBeans(arg0: UByte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetBestHeightInfo(arg0: String, arg1: UShort, sender: ChannelId? = null) {}
	open fun onReportHeightInformation(arg0: UShort, sender: ChannelId? = null) {}
	open fun onLeaveTrampoline(sender: ChannelId? = null) {}
	open fun onRequestAnim(arg0: List<Char>, sender: ChannelId? = null) {}
	open fun onRequestAnimEcho(arg0: String, sender: ChannelId? = null) {}
	open fun onRemoveBeans(arg0: List<Byte>, sender: ChannelId? = null) {}
	open fun onRemoveBeansEcho(arg0: List<Byte>, sender: ChannelId? = null) {}
}

open class DistributedPartyValentineTrampolineActivity(doId: DOId): DistributedObjectBase(doId, 163U.toDClassId()) {
	companion object {
		val dClassId = 163U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyVictoryTrampolineActivity(doId: DOId): DistributedObjectBase(doId, 164U.toDClassId()) {
	companion object {
		val dClassId = 164U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyWinterTrampolineActivity(doId: DOId): DistributedObjectBase(doId, 165U.toDClassId()) {
	companion object {
		val dClassId = 165U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedPartyTugOfWarActivity(doId: DOId): DistributedObjectBase(doId, 166U.toDClassId()) {
	companion object {
		val dClassId = 166U.toDClassId()

		object Fields {
			val reportKeyRateForce: FieldId = 1087U.toFieldId()
			val reportFallIn: FieldId = 1088U.toFieldId()
			val setToonsPlaying: FieldId = 1089U.toFieldId()
			val updateToonKeyRate: FieldId = 1090U.toFieldId()
			val updateToonPositions: FieldId = 1091U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1087U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(100.0f)
					}
				onReportKeyRateForce(t0, t1, sender)
				}
			}
		),
		1088U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReportFallIn(it.toUInt8()!!, sender)
			}
		),
		1089U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onSetToonsPlaying(t0, t1, sender)
				}
			}
		),
		1090U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onUpdateToonKeyRate(t0, t1, sender)
				}
			}
		),
		1091U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onUpdateToonPositions(it.toInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
	)

	fun reportKeyRateForce(arg0: UInt, arg1: Double, ) {
		setField(1087U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun reportFallIn(arg0: UByte, ) {
		setField(1088U.toFieldId(), arg0.toFieldValue())
	}

	fun setToonsPlaying(arg0: List<UInt>, arg1: List<UInt>, ) {
		setField(1089U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun updateToonKeyRate(arg0: UInt, arg1: UInt, ) {
		setField(1090U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun updateToonPositions(arg0: Double, ) {
		setField(1091U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	open fun onReportKeyRateForce(arg0: UInt, arg1: Double, sender: ChannelId? = null) {}
	open fun onReportFallIn(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetToonsPlaying(arg0: List<UInt>, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onUpdateToonKeyRate(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onUpdateToonPositions(arg0: Double, sender: ChannelId? = null) {}
}

open class DeleteManager(doId: DOId): DistributedObjectBase(doId, 167U.toDClassId()) {
	companion object {
		val dClassId = 167U.toDClassId()

		object Fields {
			val setInventory: FieldId = 1092U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1092U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetInventory(it.toBlob()!!, sender)
			}
		),
	)

	fun setInventory(arg0: ByteArray, ) {
		setField(1092U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetInventory(arg0: ByteArray, sender: ChannelId? = null) {}
}

open class ToontownMagicWordManager(doId: DOId): DistributedObjectBase(doId, 168U.toDClassId()) {
	companion object {
		val dClassId = 168U.toDClassId()

		object Fields {
			val requestExecuteMagicWord: FieldId = 1093U.toFieldId()
			val executeMagicWord: FieldId = 1094U.toFieldId()
			val generateResponse: FieldId = 1095U.toFieldId()
			val teleportResponse: FieldId = 1096U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1093U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toStringValue()!!
				onRequestExecuteMagicWord(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1094U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Blob, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				val t3 = values[3].toBlob()!!
				val t4 = values[4].toInt8()!!
				val t5 = values[5].toInt8()!!
				val t6 = values[6].toInt16()!!
				val t7 = values[7].toUInt32()!!
				onExecuteMagicWord(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		1095U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Blob, FieldValue.Type.String, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toBlob()!!
				val t3 = values[3].toStringValue()!!
				val t4 = values[4].toInt8()!!
				val t5 = values[5].toInt8()!!
				val t6 = values[6].toInt16()!!
				val t7 = values[7].toUInt32()!!
				val t8 = values[8].toStringValue()!!
				onGenerateResponse(t0, t1, t2, t3, t4, t5, t6, t7, t8, sender)
				}
			}
		),
		1096U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt32()!!
				val t5 = values[5].toUInt32()!!
				onTeleportResponse(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
	)

	fun requestExecuteMagicWord(arg0: Byte, arg1: Byte, arg2: Short, arg3: UInt, arg4: String, ) {
		setField(1093U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun executeMagicWord(arg0: String, arg1: String, arg2: List<UInt>, arg3: ByteArray, arg4: Byte, arg5: Byte, arg6: Short, arg7: UInt, ) {
		setField(1094U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
			arg7.toFieldValue(), 
				))
	}

	fun generateResponse(arg0: String, arg1: String, arg2: ByteArray, arg3: String, arg4: Byte, arg5: Byte, arg6: Short, arg7: UInt, arg8: String, ) {
		setField(1095U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
			arg7.toFieldValue(), 
			arg8.toFieldValue(), 
				))
	}

	fun teleportResponse(loaderId: String, whereId: String, how: String, hoodId: UInt, zoneId: UInt, avId: UInt, ) {
		setField(1096U.toFieldId(), FieldValue.TupleValue(
			loaderId.toFieldValue(), 
			whereId.toFieldValue(), 
			how.toFieldValue(), 
			hoodId.toFieldValue(), 
			zoneId.toFieldValue(), 
			avId.toFieldValue(), 
				))
	}

	open fun onRequestExecuteMagicWord(arg0: Byte, arg1: Byte, arg2: Short, arg3: UInt, arg4: String, sender: ChannelId? = null) {}
	open fun onExecuteMagicWord(arg0: String, arg1: String, arg2: List<UInt>, arg3: ByteArray, arg4: Byte, arg5: Byte, arg6: Short, arg7: UInt, sender: ChannelId? = null) {}
	open fun onGenerateResponse(arg0: String, arg1: String, arg2: ByteArray, arg3: String, arg4: Byte, arg5: Byte, arg6: Short, arg7: UInt, arg8: String, sender: ChannelId? = null) {}
	open fun onTeleportResponse(loaderId: String, whereId: String, how: String, hoodId: UInt, zoneId: UInt, avId: UInt, sender: ChannelId? = null) {}
}

open class NewsManager(doId: DOId): DistributedObjectBase(doId, 175U.toDClassId()) {
	companion object {
		val dClassId = 175U.toDClassId()

		object Fields {
			val setPopulation: FieldId = 1112U.toFieldId()
			val setBingoWin: FieldId = 1113U.toFieldId()
			val setBingoStart: FieldId = 1114U.toFieldId()
			val setBingoEnd: FieldId = 1115U.toFieldId()
			val setCircuitRaceStart: FieldId = 1116U.toFieldId()
			val setCircuitRaceEnd: FieldId = 1117U.toFieldId()
			val setTrolleyHolidayStart: FieldId = 1118U.toFieldId()
			val setTrolleyHolidayEnd: FieldId = 1119U.toFieldId()
			val setTrolleyWeekendStart: FieldId = 1120U.toFieldId()
			val setTrolleyWeekendEnd: FieldId = 1121U.toFieldId()
			val setRoamingTrialerWeekendStart: FieldId = 1122U.toFieldId()
			val setRoamingTrialerWeekendEnd: FieldId = 1123U.toFieldId()
			val setInvasionStatus: FieldId = 1124U.toFieldId()
			val setHolidayIdList: FieldId = 1125U.toFieldId()
			val holidayNotify: FieldId = 1126U.toFieldId()
			val setWeeklyCalendarHolidays: FieldId = 1127U.toFieldId()
			val setYearlyCalendarHolidays: FieldId = 1128U.toFieldId()
			val setOncelyCalendarHolidays: FieldId = 1129U.toFieldId()
			val setRelativelyCalendarHolidays: FieldId = 1130U.toFieldId()
			val setMultipleStartHolidays: FieldId = 1131U.toFieldId()
			val sendSystemMessage: FieldId = 1132U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1112U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPopulation(it.toUInt32()!!, sender)
			}
		),
		1113U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBingoWin(it.toUInt32()!!, sender)
			}
		),
		1114U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBingoStart(sender)
			}
		),
		1115U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBingoEnd(sender)
			}
		),
		1116U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCircuitRaceStart(sender)
			}
		),
		1117U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCircuitRaceEnd(sender)
			}
		),
		1118U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTrolleyHolidayStart(sender)
			}
		),
		1119U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTrolleyHolidayEnd(sender)
			}
		),
		1120U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTrolleyWeekendStart(sender)
			}
		),
		1121U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTrolleyWeekendEnd(sender)
			}
		),
		1122U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoamingTrialerWeekendStart(sender)
			}
		),
		1123U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoamingTrialerWeekendEnd(sender)
			}
		),
		1124U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt8()!!
				onSetInvasionStatus(t0, t1, t2, t3, sender)
				}
			}
		),
		1125U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHolidayIdList(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1126U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onHolidayNotify(sender)
			}
		),
		1127U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetWeeklyCalendarHolidays(with(weeklyCalendarHoliday) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		1128U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetYearlyCalendarHolidays(with(yearlyCalendarHoliday) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		1129U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOncelyCalendarHolidays(with(oncelyCalendarHoliday) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		1130U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRelativelyCalendarHolidays(with(relativelyCalendarHoliday) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		1131U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), )), )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMultipleStartHolidays(with(multipleStartHoliday) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		1132U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toUInt8()!!
				onSendSystemMessage(t0, t1, sender)
				}
			}
		),
	)

	fun setPopulation(arg0: UInt, ) {
		setField(1112U.toFieldId(), arg0.toFieldValue())
	}

	fun setBingoWin(arg0: UInt, ) {
		setField(1113U.toFieldId(), arg0.toFieldValue())
	}

	fun setBingoStart() {
		setField(1114U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setBingoEnd() {
		setField(1115U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setCircuitRaceStart() {
		setField(1116U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setCircuitRaceEnd() {
		setField(1117U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setTrolleyHolidayStart() {
		setField(1118U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setTrolleyHolidayEnd() {
		setField(1119U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setTrolleyWeekendStart() {
		setField(1120U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setTrolleyWeekendEnd() {
		setField(1121U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setRoamingTrialerWeekendStart() {
		setField(1122U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setRoamingTrialerWeekendEnd() {
		setField(1123U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setInvasionStatus(arg0: UByte, arg1: String, arg2: UInt, arg3: UByte, ) {
		setField(1124U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setHolidayIdList(arg0: List<UInt>, ) {
		setField(1125U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun holidayNotify() {
		setField(1126U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setWeeklyCalendarHolidays(arg0: List<weeklyCalendarHoliday>, ) {
		setField(1127U.toFieldId(), with(weeklyCalendarHoliday) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setYearlyCalendarHolidays(arg0: List<yearlyCalendarHoliday>, ) {
		setField(1128U.toFieldId(), with(yearlyCalendarHoliday) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setOncelyCalendarHolidays(arg0: List<oncelyCalendarHoliday>, ) {
		setField(1129U.toFieldId(), with(oncelyCalendarHoliday) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setRelativelyCalendarHolidays(arg0: List<relativelyCalendarHoliday>, ) {
		setField(1130U.toFieldId(), with(relativelyCalendarHoliday) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setMultipleStartHolidays(arg0: List<multipleStartHoliday>, ) {
		setField(1131U.toFieldId(), with(multipleStartHoliday) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), )), ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun sendSystemMessage(arg0: String, arg1: UByte, ) {
		setField(1132U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetPopulation(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBingoWin(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBingoStart(sender: ChannelId? = null) {}
	open fun onSetBingoEnd(sender: ChannelId? = null) {}
	open fun onSetCircuitRaceStart(sender: ChannelId? = null) {}
	open fun onSetCircuitRaceEnd(sender: ChannelId? = null) {}
	open fun onSetTrolleyHolidayStart(sender: ChannelId? = null) {}
	open fun onSetTrolleyHolidayEnd(sender: ChannelId? = null) {}
	open fun onSetTrolleyWeekendStart(sender: ChannelId? = null) {}
	open fun onSetTrolleyWeekendEnd(sender: ChannelId? = null) {}
	open fun onSetRoamingTrialerWeekendStart(sender: ChannelId? = null) {}
	open fun onSetRoamingTrialerWeekendEnd(sender: ChannelId? = null) {}
	open fun onSetInvasionStatus(arg0: UByte, arg1: String, arg2: UInt, arg3: UByte, sender: ChannelId? = null) {}
	open fun onSetHolidayIdList(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onHolidayNotify(sender: ChannelId? = null) {}
	open fun onSetWeeklyCalendarHolidays(arg0: List<weeklyCalendarHoliday>, sender: ChannelId? = null) {}
	open fun onSetYearlyCalendarHolidays(arg0: List<yearlyCalendarHoliday>, sender: ChannelId? = null) {}
	open fun onSetOncelyCalendarHolidays(arg0: List<oncelyCalendarHoliday>, sender: ChannelId? = null) {}
	open fun onSetRelativelyCalendarHolidays(arg0: List<relativelyCalendarHoliday>, sender: ChannelId? = null) {}
	open fun onSetMultipleStartHolidays(arg0: List<multipleStartHoliday>, sender: ChannelId? = null) {}
	open fun onSendSystemMessage(arg0: String, arg1: UByte, sender: ChannelId? = null) {}
}

open class PurchaseManager(doId: DOId): DistributedObjectBase(doId, 176U.toDClassId()) {
	companion object {
		val dClassId = 176U.toDClassId()

		object Fields {
			val setPlayerIds: FieldId = 1133U.toFieldId()
			val setNewbieIds: FieldId = 1134U.toFieldId()
			val setMinigamePoints: FieldId = 1135U.toFieldId()
			val setPlayerMoney: FieldId = 1136U.toFieldId()
			val setPlayerStates: FieldId = 1137U.toFieldId()
			val setCountdown: FieldId = 1138U.toFieldId()
			val setMetagameRound: FieldId = 1139U.toFieldId()
			val setVotesArray: FieldId = 1140U.toFieldId()
			val requestExit: FieldId = 1141U.toFieldId()
			val requestPlayAgain: FieldId = 1142U.toFieldId()
			val setInventory: FieldId = 1143U.toFieldId()
			val setPurchaseExit: FieldId = 1144U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1133U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				onSetPlayerIds(t0, t1, t2, t3, sender)
				}
			}
		),
		1134U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetNewbieIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1135U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				onSetMinigamePoints(t0, t1, t2, t3, sender)
				}
			}
		),
		1136U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				onSetPlayerMoney(t0, t1, t2, t3, sender)
				}
			}
		),
		1137U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				onSetPlayerStates(t0, t1, t2, t3, sender)
				}
			}
		),
		1138U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCountdown(it.toInt16()!!, sender)
			}
		),
		1139U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMetagameRound(it.toInt8()!!, sender)
			}
		),
		1140U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Int16),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetVotesArray(it.toList()!!.map { it.toInt16()!! }, sender)
			}
		),
		1141U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		1142U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestPlayAgain(sender)
			}
		),
		1143U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.Int16, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toUInt8()!!
				onSetInventory(t0, t1, t2, sender)
				}
			}
		),
		1144U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPurchaseExit(sender)
			}
		),
	)

	fun setPlayerIds(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, ) {
		setField(1133U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setNewbieIds(arg0: List<UInt>, ) {
		setField(1134U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setMinigamePoints(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, ) {
		setField(1135U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setPlayerMoney(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, ) {
		setField(1136U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setPlayerStates(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, ) {
		setField(1137U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setCountdown(arg0: Short, ) {
		setField(1138U.toFieldId(), arg0.toFieldValue())
	}

	fun setMetagameRound(arg0: Byte, ) {
		setField(1139U.toFieldId(), arg0.toFieldValue())
	}

	fun setVotesArray(arg0: List<Short>, ) {
		setField(1140U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.Int16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun requestExit() {
		setField(1141U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestPlayAgain() {
		setField(1142U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setInventory(arg0: ByteArray, arg1: Short, arg2: UByte, ) {
		setField(1143U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setPurchaseExit() {
		setField(1144U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetPlayerIds(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, sender: ChannelId? = null) {}
	open fun onSetNewbieIds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetMinigamePoints(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, sender: ChannelId? = null) {}
	open fun onSetPlayerMoney(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, sender: ChannelId? = null) {}
	open fun onSetPlayerStates(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, sender: ChannelId? = null) {}
	open fun onSetCountdown(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetMetagameRound(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetVotesArray(arg0: List<Short>, sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onRequestPlayAgain(sender: ChannelId? = null) {}
	open fun onSetInventory(arg0: ByteArray, arg1: Short, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetPurchaseExit(sender: ChannelId? = null) {}
}

open class NewbiePurchaseManager(doId: DOId): DistributedObjectBase(doId, 177U.toDClassId()) {
	companion object {
		val dClassId = 177U.toDClassId()

		object Fields {
			val setOwnedNewbieId: FieldId = 1145U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1145U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOwnedNewbieId(it.toUInt32()!!, sender)
			}
		),
	)

	fun setOwnedNewbieId(arg0: UInt, ) {
		setField(1145U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetOwnedNewbieId(arg0: UInt, sender: ChannelId? = null) {}
}

open class SafeZoneManager(doId: DOId): DistributedObjectBase(doId, 178U.toDClassId()) {
	companion object {
		val dClassId = 178U.toDClassId()

		object Fields {
			val enterSafeZone: FieldId = 1146U.toFieldId()
			val exitSafeZone: FieldId = 1147U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1146U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onEnterSafeZone(sender)
			}
		),
		1147U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onExitSafeZone(sender)
			}
		),
	)

	fun enterSafeZone() {
		setField(1146U.toFieldId(), FieldValue.EmptyValue)
	}

	fun exitSafeZone() {
		setField(1147U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onEnterSafeZone(sender: ChannelId? = null) {}
	open fun onExitSafeZone(sender: ChannelId? = null) {}
}

open class TutorialManager(doId: DOId): DistributedObjectBase(doId, 179U.toDClassId()) {
	companion object {
		val dClassId = 179U.toDClassId()

		object Fields {
			val requestTutorial: FieldId = 1148U.toFieldId()
			val rejectTutorial: FieldId = 1149U.toFieldId()
			val requestSkipTutorial: FieldId = 1150U.toFieldId()
			val skipTutorialResponse: FieldId = 1151U.toFieldId()
			val enterTutorial: FieldId = 1152U.toFieldId()
			val allDone: FieldId = 1153U.toFieldId()
			val toonArrived: FieldId = 1154U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1148U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestTutorial(sender)
			}
		),
		1149U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRejectTutorial(sender)
			}
		),
		1150U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestSkipTutorial(sender)
			}
		),
		1151U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSkipTutorialResponse(it.toUInt8()!!, sender)
			}
		),
		1152U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				onEnterTutorial(t0, t1, t2, t3, sender)
				}
			}
		),
		1153U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAllDone(sender)
			}
		),
		1154U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonArrived(sender)
			}
		),
	)

	fun requestTutorial() {
		setField(1148U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rejectTutorial() {
		setField(1149U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestSkipTutorial() {
		setField(1150U.toFieldId(), FieldValue.EmptyValue)
	}

	fun skipTutorialResponse(arg0: UByte, ) {
		setField(1151U.toFieldId(), arg0.toFieldValue())
	}

	fun enterTutorial(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, ) {
		setField(1152U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun allDone() {
		setField(1153U.toFieldId(), FieldValue.EmptyValue)
	}

	fun toonArrived() {
		setField(1154U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onRequestTutorial(sender: ChannelId? = null) {}
	open fun onRejectTutorial(sender: ChannelId? = null) {}
	open fun onRequestSkipTutorial(sender: ChannelId? = null) {}
	open fun onSkipTutorialResponse(arg0: UByte, sender: ChannelId? = null) {}
	open fun onEnterTutorial(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, sender: ChannelId? = null) {}
	open fun onAllDone(sender: ChannelId? = null) {}
	open fun onToonArrived(sender: ChannelId? = null) {}
}

open class CatalogManager(doId: DOId): DistributedObjectBase(doId, 180U.toDClassId()) {
	companion object {
		val dClassId = 180U.toDClassId()

		object Fields {
			val startCatalog: FieldId = 1155U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1155U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onStartCatalog(sender)
			}
		),
	)

	fun startCatalog() {
		setField(1155U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onStartCatalog(sender: ChannelId? = null) {}
}

open class DistributedMyTest(doId: DOId): DistributedObjectBase(doId, 181U.toDClassId()) {
	companion object {
		val dClassId = 181U.toDClassId()

		object Fields {
			val setMyTest: FieldId = 1156U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1156U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMyTest(it.toUInt16()!!, sender)
			}
		),
	)

	fun setMyTest(arg0: UShort, ) {
		setField(1156U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetMyTest(arg0: UShort, sender: ChannelId? = null) {}
}

open class DistributedTreasure(doId: DOId): DistributedObjectBase(doId, 182U.toDClassId()) {
	companion object {
		val dClassId = 182U.toDClassId()

		object Fields {
			val setPosition: FieldId = 1157U.toFieldId()
			val requestGrab: FieldId = 1158U.toFieldId()
			val setGrab: FieldId = 1159U.toFieldId()
			val setReject: FieldId = 1160U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1157U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosition(t0, t1, t2, sender)
				}
			}
		),
		1158U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestGrab(sender)
			}
		),
		1159U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGrab(it.toUInt32()!!, sender)
			}
		),
		1160U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetReject(sender)
			}
		),
	)

	fun setPosition(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(1157U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun requestGrab() {
		setField(1158U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setGrab(arg0: UInt, ) {
		setField(1159U.toFieldId(), arg0.toFieldValue())
	}

	fun setReject() {
		setField(1160U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetPosition(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onRequestGrab(sender: ChannelId? = null) {}
	open fun onSetGrab(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetReject(sender: ChannelId? = null) {}
}

open class DistributedDDTreasure(doId: DOId): DistributedObjectBase(doId, 183U.toDClassId()) {
	companion object {
		val dClassId = 183U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedDGTreasure(doId: DOId): DistributedObjectBase(doId, 184U.toDClassId()) {
	companion object {
		val dClassId = 184U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedDLTreasure(doId: DOId): DistributedObjectBase(doId, 185U.toDClassId()) {
	companion object {
		val dClassId = 185U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedTTTreasure(doId: DOId): DistributedObjectBase(doId, 186U.toDClassId()) {
	companion object {
		val dClassId = 186U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedBRTreasure(doId: DOId): DistributedObjectBase(doId, 187U.toDClassId()) {
	companion object {
		val dClassId = 187U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedMMTreasure(doId: DOId): DistributedObjectBase(doId, 188U.toDClassId()) {
	companion object {
		val dClassId = 188U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedOZTreasure(doId: DOId): DistributedObjectBase(doId, 189U.toDClassId()) {
	companion object {
		val dClassId = 189U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedETreasure(doId: DOId): DistributedObjectBase(doId, 190U.toDClassId()) {
	companion object {
		val dClassId = 190U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedEFlyingTreasure(doId: DOId): DistributedObjectBase(doId, 191U.toDClassId()) {
	companion object {
		val dClassId = 191U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedTagTreasure(doId: DOId): DistributedObjectBase(doId, 192U.toDClassId()) {
	companion object {
		val dClassId = 192U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedCashbotBossTreasure(doId: DOId): DistributedObjectBase(doId, 193U.toDClassId()) {
	companion object {
		val dClassId = 193U.toDClassId()

		object Fields {
			val setGoonId: FieldId = 1161U.toFieldId()
			val setFinalPosition: FieldId = 1162U.toFieldId()
			val setStyle: FieldId = 1163U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1161U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGoonId(it.toUInt32()!!, sender)
			}
		),
		1162U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetFinalPosition(t0, t1, t2, sender)
				}
			}
		),
		1163U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetStyle(it.toUInt16()!!, sender)
			}
		),
	)

	fun setGoonId(arg0: UInt, ) {
		setField(1161U.toFieldId(), arg0.toFieldValue())
	}

	fun setFinalPosition(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(1162U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setStyle(arg0: UShort, ) {
		setField(1163U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetGoonId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetFinalPosition(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetStyle(arg0: UShort, sender: ChannelId? = null) {}
}

open class DistributedLargeBlobSender(doId: DOId): DistributedObjectBase(doId, 194U.toDClassId()) {
	companion object {
		val dClassId = 194U.toDClassId()

		object Fields {
			val setMode: FieldId = 1164U.toFieldId()
			val setTargetAvId: FieldId = 1165U.toFieldId()
			val setChunk: FieldId = 1166U.toFieldId()
			val setFilename: FieldId = 1167U.toFieldId()
			val setAck: FieldId = 1168U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1164U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMode(it.toUInt8()!!, sender)
			}
		),
		1165U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTargetAvId(it.toUInt32()!!, sender)
			}
		),
		1166U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetChunk(it.toBlob()!!, sender)
			}
		),
		1167U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetFilename(it.toStringValue()!!, sender)
			}
		),
		1168U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAck(sender)
			}
		),
	)

	fun setMode(arg0: UByte, ) {
		setField(1164U.toFieldId(), arg0.toFieldValue())
	}

	fun setTargetAvId(arg0: UInt, ) {
		setField(1165U.toFieldId(), arg0.toFieldValue())
	}

	fun setChunk(arg0: ByteArray, ) {
		setField(1166U.toFieldId(), arg0.toFieldValue())
	}

	fun setFilename(arg0: String, ) {
		setField(1167U.toFieldId(), arg0.toFieldValue())
	}

	fun setAck() {
		setField(1168U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetMode(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetTargetAvId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetChunk(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetFilename(arg0: String, sender: ChannelId? = null) {}
	open fun onSetAck(sender: ChannelId? = null) {}
}

open class DistributedLevel(doId: DOId): DistributedObjectBase(doId, 195U.toDClassId()) {
	companion object {
		val dClassId = 195U.toDClassId()

		object Fields {
			val setLevelZoneId: FieldId = 1169U.toFieldId()
			val setPlayerIds: FieldId = 1170U.toFieldId()
			val setEntranceId: FieldId = 1171U.toFieldId()
			val setZoneIds: FieldId = 1172U.toFieldId()
			val setStartTimestamp: FieldId = 1173U.toFieldId()
			val setOuch: FieldId = 1174U.toFieldId()
			val requestCurrentLevelSpec: FieldId = 1175U.toFieldId()
			val setSpecDeny: FieldId = 1176U.toFieldId()
			val setSpecSenderDoId: FieldId = 1177U.toFieldId()
			val setAttribChange: FieldId = 1178U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1169U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLevelZoneId(it.toUInt32()!!, sender)
			}
		),
		1170U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPlayerIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1171U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEntranceId(it.toUInt8()!!, sender)
			}
		),
		1172U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetZoneIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1173U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetStartTimestamp(it.toInt32()!!, sender)
			}
		),
		1174U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetOuch(it.toUInt8()!!, sender)
			}
		),
		1175U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toStringValue()!!
				onRequestCurrentLevelSpec(t0, t1, sender)
				}
			}
		),
		1176U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetSpecDeny(it.toBlob()!!, sender)
			}
		),
		1177U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetSpecSenderDoId(it.toUInt32()!!, sender)
			}
		),
		1178U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, FieldValue.Type.Blob, FieldValue.Type.Blob, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toBlob()!!
				val t2 = values[2].toBlob()!!
				val t3 = values[3].toBlob()!!
				onSetAttribChange(t0, t1, t2, t3, sender)
				}
			}
		),
	)

	fun setLevelZoneId(arg0: UInt, ) {
		setField(1169U.toFieldId(), arg0.toFieldValue())
	}

	fun setPlayerIds(arg0: List<UInt>, ) {
		setField(1170U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setEntranceId(arg0: UByte, ) {
		setField(1171U.toFieldId(), arg0.toFieldValue())
	}

	fun setZoneIds(arg0: List<UInt>, ) {
		setField(1172U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setStartTimestamp(arg0: Int, ) {
		setField(1173U.toFieldId(), arg0.toFieldValue())
	}

	fun setOuch(arg0: UByte, ) {
		setField(1174U.toFieldId(), arg0.toFieldValue())
	}

	fun requestCurrentLevelSpec(arg0: String, arg1: String, ) {
		setField(1175U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setSpecDeny(arg0: ByteArray, ) {
		setField(1176U.toFieldId(), arg0.toFieldValue())
	}

	fun setSpecSenderDoId(arg0: UInt, ) {
		setField(1177U.toFieldId(), arg0.toFieldValue())
	}

	fun setAttribChange(arg0: UInt, arg1: ByteArray, arg2: ByteArray, arg3: ByteArray, ) {
		setField(1178U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	open fun onSetLevelZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetPlayerIds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetEntranceId(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetZoneIds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetStartTimestamp(arg0: Int, sender: ChannelId? = null) {}
	open fun onSetOuch(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestCurrentLevelSpec(arg0: String, arg1: String, sender: ChannelId? = null) {}
	open fun onSetSpecDeny(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetSpecSenderDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetAttribChange(arg0: UInt, arg1: ByteArray, arg2: ByteArray, arg3: ByteArray, sender: ChannelId? = null) {}
}

open class DistributedEntity(doId: DOId): DistributedObjectBase(doId, 196U.toDClassId()) {
	companion object {
		val dClassId = 196U.toDClassId()

		object Fields {
			val setLevelDoId: FieldId = 1179U.toFieldId()
			val setEntId: FieldId = 1180U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1179U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLevelDoId(it.toUInt32()!!, sender)
			}
		),
		1180U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEntId(it.toUInt32()!!, sender)
			}
		),
	)

	fun setLevelDoId(arg0: UInt, ) {
		setField(1179U.toFieldId(), arg0.toFieldValue())
	}

	fun setEntId(arg0: UInt, ) {
		setField(1180U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetLevelDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetEntId(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedInteractiveEntity(doId: DOId): DistributedObjectBase(doId, 197U.toDClassId()) {
	companion object {
		val dClassId = 197U.toDClassId()

		object Fields {
			val setAvatarInteract: FieldId = 1181U.toFieldId()
			val requestInteract: FieldId = 1182U.toFieldId()
			val rejectInteract: FieldId = 1183U.toFieldId()
			val requestExit: FieldId = 1184U.toFieldId()
			val avatarExit: FieldId = 1185U.toFieldId()
			val setState: FieldId = 1186U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1181U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarInteract(it.toUInt32()!!, sender)
			}
		),
		1182U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestInteract(sender)
			}
		),
		1183U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectInteract(sender)
			}
		),
		1184U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		1185U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAvatarExit(it.toUInt32()!!, sender)
			}
		),
		1186U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt32()!!
				onSetState(t0, t1, sender)
				}
			}
		),
	)

	fun setAvatarInteract(arg0: UInt, ) {
		setField(1181U.toFieldId(), arg0.toFieldValue())
	}

	fun requestInteract() {
		setField(1182U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rejectInteract() {
		setField(1183U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestExit() {
		setField(1184U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarExit(arg0: UInt, ) {
		setField(1185U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: String, arg1: Int, ) {
		setField(1186U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetAvatarInteract(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestInteract(sender: ChannelId? = null) {}
	open fun onRejectInteract(sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onAvatarExit(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Int, sender: ChannelId? = null) {}
}

open class DistributedTrophyMgr(doId: DOId): DistributedObjectBase(doId, 198U.toDClassId()) {
	companion object {
		val dClassId = 198U.toDClassId()

		object Fields {
			val requestTrophyScore: FieldId = 1187U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1187U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestTrophyScore(sender)
			}
		),
	)

	fun requestTrophyScore() {
		setField(1187U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onRequestTrophyScore(sender: ChannelId? = null) {}
}

open class DistributedBuilding(doId: DOId): DistributedObjectBase(doId, 199U.toDClassId()) {
	companion object {
		val dClassId = 199U.toDClassId()

		object Fields {
			val setBlock: FieldId = 1188U.toFieldId()
			val setSuitData: FieldId = 1189U.toFieldId()
			val setVictorList: FieldId = 1190U.toFieldId()
			val setState: FieldId = 1191U.toFieldId()
			val setVictorReady: FieldId = 1192U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1188U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt32()!!
				onSetBlock(t0, t1, sender)
				}
			}
		),
		1189U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				onSetSuitData(t0, t1, t2, sender)
				}
			}
		),
		1190U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetVictorList(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1191U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		1192U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetVictorReady(sender)
			}
		),
	)

	fun setBlock(arg0: UShort, arg1: UInt, ) {
		setField(1188U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setSuitData(arg0: Byte, arg1: Byte, arg2: Byte, ) {
		setField(1189U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setVictorList(arg0: List<UInt>, ) {
		setField(1190U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setState(arg0: String, arg1: Short, ) {
		setField(1191U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setVictorReady() {
		setField(1192U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetBlock(arg0: UShort, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetSuitData(arg0: Byte, arg1: Byte, arg2: Byte, sender: ChannelId? = null) {}
	open fun onSetVictorList(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetVictorReady(sender: ChannelId? = null) {}
}

open class DistributedAnimBuilding(doId: DOId): DistributedObjectBase(doId, 200U.toDClassId()) {
	companion object {
		val dClassId = 200U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedToonInterior(doId: DOId): DistributedObjectBase(doId, 202U.toDClassId()) {
	companion object {
		val dClassId = 202U.toDClassId()

		object Fields {
			val setZoneIdAndBlock: FieldId = 1196U.toFieldId()
			val setSavedBy: FieldId = 1197U.toFieldId()
			val setState: FieldId = 1198U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1196U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetZoneIdAndBlock(t0, t1, sender)
				}
			}
		),
		1197U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Blob, )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSavedBy(with(savedBy) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		1198U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
	)

	fun setZoneIdAndBlock(arg0: UInt, arg1: UShort, ) {
		setField(1196U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setSavedBy(arg0: List<savedBy>, ) {
		setField(1197U.toFieldId(), with(savedBy) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Blob, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setState(arg0: String, arg1: Short, ) {
		setField(1198U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetZoneIdAndBlock(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetSavedBy(arg0: List<savedBy>, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
}

open class DistributedToonHallInterior(doId: DOId): DistributedObjectBase(doId, 203U.toDClassId()) {
	companion object {
		val dClassId = 203U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedSuitInterior(doId: DOId): DistributedObjectBase(doId, 204U.toDClassId()) {
	companion object {
		val dClassId = 204U.toDClassId()

		object Fields {
			val setZoneId: FieldId = 1199U.toFieldId()
			val setExtZoneId: FieldId = 1200U.toFieldId()
			val setDistBldgDoId: FieldId = 1201U.toFieldId()
			val setNumFloors: FieldId = 1202U.toFieldId()
			val setToons: FieldId = 1203U.toFieldId()
			val setSuits: FieldId = 1204U.toFieldId()
			val setState: FieldId = 1205U.toFieldId()
			val setAvatarJoined: FieldId = 1206U.toFieldId()
			val elevatorDone: FieldId = 1207U.toFieldId()
			val reserveJoinDone: FieldId = 1208U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1199U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetZoneId(it.toUInt32()!!, sender)
			}
		),
		1200U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetExtZoneId(it.toUInt32()!!, sender)
			}
		),
		1201U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDistBldgDoId(it.toUInt32()!!, sender)
			}
		),
		1202U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetNumFloors(it.toInt8()!!, sender)
			}
		),
		1203U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toUInt16()!!
				onSetToons(t0, t1, sender)
				}
			}
		),
		1204U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt16), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				val t2 = values[2].toList()!!.map { it.toUInt16()!! }
				onSetSuits(t0, t1, t2, sender)
				}
			}
		),
		1205U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		1206U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarJoined(sender)
			}
		),
		1207U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onElevatorDone(sender)
			}
		),
		1208U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReserveJoinDone(sender)
			}
		),
	)

	fun setZoneId(arg0: UInt, ) {
		setField(1199U.toFieldId(), arg0.toFieldValue())
	}

	fun setExtZoneId(arg0: UInt, ) {
		setField(1200U.toFieldId(), arg0.toFieldValue())
	}

	fun setDistBldgDoId(arg0: UInt, ) {
		setField(1201U.toFieldId(), arg0.toFieldValue())
	}

	fun setNumFloors(arg0: Byte, ) {
		setField(1202U.toFieldId(), arg0.toFieldValue())
	}

	fun setToons(arg0: List<UInt>, arg1: UShort, ) {
		setField(1203U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setSuits(arg0: List<UInt>, arg1: List<UInt>, arg2: List<UShort>, ) {
		setField(1204U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt16, arg2.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setState(arg0: String, arg1: Short, ) {
		setField(1205U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setAvatarJoined() {
		setField(1206U.toFieldId(), FieldValue.EmptyValue)
	}

	fun elevatorDone() {
		setField(1207U.toFieldId(), FieldValue.EmptyValue)
	}

	fun reserveJoinDone() {
		setField(1208U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetExtZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDistBldgDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetNumFloors(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetToons(arg0: List<UInt>, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetSuits(arg0: List<UInt>, arg1: List<UInt>, arg2: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetAvatarJoined(sender: ChannelId? = null) {}
	open fun onElevatorDone(sender: ChannelId? = null) {}
	open fun onReserveJoinDone(sender: ChannelId? = null) {}
}

open class DistributedCogdoBarrel(doId: DOId): DistributedObjectBase(doId, 205U.toDClassId()) {
	companion object {
		val dClassId = 205U.toDClassId()

		object Fields {
			val requestGrab: FieldId = 1209U.toFieldId()
			val setIndex: FieldId = 1210U.toFieldId()
			val setState: FieldId = 1211U.toFieldId()
			val setGrab: FieldId = 1212U.toFieldId()
			val setReject: FieldId = 1213U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1209U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestGrab(sender)
			}
		),
		1210U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIndex(it.toUInt32()!!, sender)
			}
		),
		1211U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetState(it.toUInt32()!!, sender)
			}
		),
		1212U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGrab(it.toUInt32()!!, sender)
			}
		),
		1213U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetReject(sender)
			}
		),
	)

	fun requestGrab() {
		setField(1209U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setIndex(arg0: UInt, ) {
		setField(1210U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: UInt, ) {
		setField(1211U.toFieldId(), arg0.toFieldValue())
	}

	fun setGrab(arg0: UInt, ) {
		setField(1212U.toFieldId(), arg0.toFieldValue())
	}

	fun setReject() {
		setField(1213U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onRequestGrab(sender: ChannelId? = null) {}
	open fun onSetIndex(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetState(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetGrab(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetReject(sender: ChannelId? = null) {}
}

open class DistributedCogdoInterior(doId: DOId): DistributedObjectBase(doId, 206U.toDClassId()) {
	companion object {
		val dClassId = 206U.toDClassId()

		object Fields {
			val setZoneId: FieldId = 1214U.toFieldId()
			val setExtZoneId: FieldId = 1215U.toFieldId()
			val setDistBldgDoId: FieldId = 1216U.toFieldId()
			val setNumFloors: FieldId = 1217U.toFieldId()
			val setShopOwnerNpcId: FieldId = 1218U.toFieldId()
			val setSOSNpcId: FieldId = 1219U.toFieldId()
			val setFOType: FieldId = 1220U.toFieldId()
			val setToons: FieldId = 1221U.toFieldId()
			val setSuits: FieldId = 1222U.toFieldId()
			val setState: FieldId = 1223U.toFieldId()
			val setAvatarJoined: FieldId = 1224U.toFieldId()
			val elevatorDone: FieldId = 1225U.toFieldId()
			val reserveJoinDone: FieldId = 1226U.toFieldId()
			val toonLeftBarrelRoom: FieldId = 1227U.toFieldId()
			val toonBarrelRoomIntroDone: FieldId = 1228U.toFieldId()
			val setBarrelRoomReward: FieldId = 1229U.toFieldId()
			val toonBarrelRoomRewardDone: FieldId = 1230U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1214U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetZoneId(it.toUInt32()!!, sender)
			}
		),
		1215U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetExtZoneId(it.toUInt32()!!, sender)
			}
		),
		1216U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDistBldgDoId(it.toUInt32()!!, sender)
			}
		),
		1217U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetNumFloors(it.toInt8()!!, sender)
			}
		),
		1218U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetShopOwnerNpcId(it.toUInt32()!!, sender)
			}
		),
		1219U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSOSNpcId(it.toUInt32()!!, sender)
			}
		),
		1220U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFOType(it.toInt8()!!, sender)
			}
		),
		1221U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toUInt16()!!
				onSetToons(t0, t1, sender)
				}
			}
		),
		1222U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt16), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				val t2 = values[2].toList()!!.map { it.toUInt16()!! }
				onSetSuits(t0, t1, t2, sender)
				}
			}
		),
		1223U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		1224U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarJoined(sender)
			}
		),
		1225U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onElevatorDone(sender)
			}
		),
		1226U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReserveJoinDone(sender)
			}
		),
		1227U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonLeftBarrelRoom(sender)
			}
		),
		1228U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonBarrelRoomIntroDone(sender)
			}
		),
		1229U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt8), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				onSetBarrelRoomReward(t0, t1, sender)
				}
			}
		),
		1230U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onToonBarrelRoomRewardDone(sender)
			}
		),
	)

	fun setZoneId(arg0: UInt, ) {
		setField(1214U.toFieldId(), arg0.toFieldValue())
	}

	fun setExtZoneId(arg0: UInt, ) {
		setField(1215U.toFieldId(), arg0.toFieldValue())
	}

	fun setDistBldgDoId(arg0: UInt, ) {
		setField(1216U.toFieldId(), arg0.toFieldValue())
	}

	fun setNumFloors(arg0: Byte, ) {
		setField(1217U.toFieldId(), arg0.toFieldValue())
	}

	fun setShopOwnerNpcId(arg0: UInt, ) {
		setField(1218U.toFieldId(), arg0.toFieldValue())
	}

	fun setSOSNpcId(arg0: UInt, ) {
		setField(1219U.toFieldId(), arg0.toFieldValue())
	}

	fun setFOType(arg0: Byte, ) {
		setField(1220U.toFieldId(), arg0.toFieldValue())
	}

	fun setToons(arg0: List<UInt>, arg1: UShort, ) {
		setField(1221U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setSuits(arg0: List<UInt>, arg1: List<UInt>, arg2: List<UShort>, ) {
		setField(1222U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt16, arg2.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setState(arg0: String, arg1: Short, ) {
		setField(1223U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setAvatarJoined() {
		setField(1224U.toFieldId(), FieldValue.EmptyValue)
	}

	fun elevatorDone() {
		setField(1225U.toFieldId(), FieldValue.EmptyValue)
	}

	fun reserveJoinDone() {
		setField(1226U.toFieldId(), FieldValue.EmptyValue)
	}

	fun toonLeftBarrelRoom() {
		setField(1227U.toFieldId(), FieldValue.EmptyValue)
	}

	fun toonBarrelRoomIntroDone() {
		setField(1228U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setBarrelRoomReward(arg0: List<UInt>, arg1: List<UByte>, ) {
		setField(1229U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun toonBarrelRoomRewardDone() {
		setField(1230U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetExtZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDistBldgDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetNumFloors(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetShopOwnerNpcId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetSOSNpcId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetFOType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetToons(arg0: List<UInt>, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetSuits(arg0: List<UInt>, arg1: List<UInt>, arg2: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetAvatarJoined(sender: ChannelId? = null) {}
	open fun onElevatorDone(sender: ChannelId? = null) {}
	open fun onReserveJoinDone(sender: ChannelId? = null) {}
	open fun onToonLeftBarrelRoom(sender: ChannelId? = null) {}
	open fun onToonBarrelRoomIntroDone(sender: ChannelId? = null) {}
	open fun onSetBarrelRoomReward(arg0: List<UInt>, arg1: List<UByte>, sender: ChannelId? = null) {}
	open fun onToonBarrelRoomRewardDone(sender: ChannelId? = null) {}
}

open class DistributedCogdoBattleBldg(doId: DOId): DistributedObjectBase(doId, 207U.toDClassId()) {
	companion object {
		val dClassId = 207U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistCogdoGame(doId: DOId): DistributedObjectBase(doId, 208U.toDClassId()) {
	companion object {
		val dClassId = 208U.toDClassId()

		object Fields {
			val setInteriorId: FieldId = 1231U.toFieldId()
			val setExteriorZone: FieldId = 1232U.toFieldId()
			val setDifficultyOverrides: FieldId = 1233U.toFieldId()
			val setVisible: FieldId = 1234U.toFieldId()
			val setIntroStart: FieldId = 1235U.toFieldId()
			val setToonSad: FieldId = 1236U.toFieldId()
			val setToonDisconnect: FieldId = 1237U.toFieldId()
			val setAvatarReady: FieldId = 1238U.toFieldId()
			val setGameStart: FieldId = 1239U.toFieldId()
			val setGameFinish: FieldId = 1240U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1231U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetInteriorId(it.toUInt32()!!, sender)
			}
		),
		1232U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetExteriorZone(it.toUInt32()!!, sender)
			}
		),
		1233U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toInt32()!!
				onSetDifficultyOverrides(t0, t1, sender)
				}
			}
		),
		1234U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetVisible(sender)
			}
		),
		1235U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIntroStart(sender)
			}
		),
		1236U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetToonSad(it.toUInt32()!!, sender)
			}
		),
		1237U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetToonDisconnect(it.toUInt32()!!, sender)
			}
		),
		1238U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarReady(sender)
			}
		),
		1239U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGameStart(it.toInt16()!!, sender)
			}
		),
		1240U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGameFinish(it.toInt16()!!, sender)
			}
		),
	)

	fun setInteriorId(arg0: UInt, ) {
		setField(1231U.toFieldId(), arg0.toFieldValue())
	}

	fun setExteriorZone(arg0: UInt, ) {
		setField(1232U.toFieldId(), arg0.toFieldValue())
	}

	fun setDifficultyOverrides(arg0: Int, arg1: Int, ) {
		setField(1233U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setVisible() {
		setField(1234U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setIntroStart() {
		setField(1235U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setToonSad(arg0: UInt, ) {
		setField(1236U.toFieldId(), arg0.toFieldValue())
	}

	fun setToonDisconnect(arg0: UInt, ) {
		setField(1237U.toFieldId(), arg0.toFieldValue())
	}

	fun setAvatarReady() {
		setField(1238U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setGameStart(arg0: Short, ) {
		setField(1239U.toFieldId(), arg0.toFieldValue())
	}

	fun setGameFinish(arg0: Short, ) {
		setField(1240U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetInteriorId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetExteriorZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDifficultyOverrides(arg0: Int, arg1: Int, sender: ChannelId? = null) {}
	open fun onSetVisible(sender: ChannelId? = null) {}
	open fun onSetIntroStart(sender: ChannelId? = null) {}
	open fun onSetToonSad(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetToonDisconnect(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetAvatarReady(sender: ChannelId? = null) {}
	open fun onSetGameStart(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetGameFinish(arg0: Short, sender: ChannelId? = null) {}
}

open class DistCogdoLevelGame(doId: DOId): DistributedObjectBase(doId, 209U.toDClassId()) {
	companion object {
		val dClassId = 209U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistCogdoMazeGame(doId: DOId): DistributedObjectBase(doId, 210U.toDClassId()) {
	companion object {
		val dClassId = 210U.toDClassId()

		object Fields {
			val requestAction: FieldId = 1241U.toFieldId()
			val doAction: FieldId = 1242U.toFieldId()
			val setNumSuits: FieldId = 1243U.toFieldId()
			val requestUseGag: FieldId = 1244U.toFieldId()
			val toonUsedGag: FieldId = 1245U.toFieldId()
			val requestSuitHitByGag: FieldId = 1246U.toFieldId()
			val suitHitByGag: FieldId = 1247U.toFieldId()
			val requestHitBySuit: FieldId = 1248U.toFieldId()
			val toonHitBySuit: FieldId = 1249U.toFieldId()
			val requestHitByDrop: FieldId = 1250U.toFieldId()
			val toonHitByDrop: FieldId = 1251U.toFieldId()
			val requestPickUp: FieldId = 1252U.toFieldId()
			val pickUp: FieldId = 1253U.toFieldId()
			val requestGag: FieldId = 1254U.toFieldId()
			val hasGag: FieldId = 1255U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1241U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onRequestAction(t0, t1, sender)
				}
			}
		),
		1242U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt16()!!
				onDoAction(t0, t1, t2, sender)
				}
			}
		),
		1243U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetNumSuits(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		1244U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!
				onRequestUseGag(t0, t1, t2, t3, sender)
				}
			}
		),
		1245U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!
				onToonUsedGag(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1246U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onRequestSuitHitByGag(t0, t1, sender)
				}
			}
		),
		1247U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				onSuitHitByGag(t0, t1, t2, sender)
				}
			}
		),
		1248U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toInt16()!!
				onRequestHitBySuit(t0, t1, t2, sender)
				}
			}
		),
		1249U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toInt16()!!
				onToonHitBySuit(t0, t1, t2, t3, sender)
				}
			}
		),
		1250U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestHitByDrop(sender)
			}
		),
		1251U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onToonHitByDrop(it.toUInt32()!!, sender)
			}
		),
		1252U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestPickUp(it.toUInt8()!!, sender)
			}
		),
		1253U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toInt16()!!
				onPickUp(t0, t1, t2, sender)
				}
			}
		),
		1254U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestGag(it.toUInt8()!!, sender)
			}
		),
		1255U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onHasGag(t0, t1, sender)
				}
			}
		),
	)

	fun requestAction(arg0: UByte, arg1: UInt, ) {
		setField(1241U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun doAction(arg0: UByte, arg1: UInt, arg2: Short, ) {
		setField(1242U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setNumSuits(arg0: List<UByte>, ) {
		setField(1243U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun requestUseGag(arg0: Double, arg1: Double, arg2: Double, arg3: Short, ) {
		setField(1244U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun toonUsedGag(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, arg4: Short, ) {
		setField(1245U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun requestSuitHitByGag(arg0: UByte, arg1: UByte, ) {
		setField(1246U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun suitHitByGag(arg0: UInt, arg1: UByte, arg2: UByte, ) {
		setField(1247U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestHitBySuit(arg0: UByte, arg1: UByte, arg2: Short, ) {
		setField(1248U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun toonHitBySuit(arg0: UInt, arg1: UByte, arg2: UByte, arg3: Short, ) {
		setField(1249U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun requestHitByDrop() {
		setField(1250U.toFieldId(), FieldValue.EmptyValue)
	}

	fun toonHitByDrop(arg0: UInt, ) {
		setField(1251U.toFieldId(), arg0.toFieldValue())
	}

	fun requestPickUp(arg0: UByte, ) {
		setField(1252U.toFieldId(), arg0.toFieldValue())
	}

	fun pickUp(arg0: UInt, arg1: UByte, arg2: Short, ) {
		setField(1253U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestGag(arg0: UByte, ) {
		setField(1254U.toFieldId(), arg0.toFieldValue())
	}

	fun hasGag(arg0: UInt, arg1: Short, ) {
		setField(1255U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onRequestAction(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
	open fun onDoAction(arg0: UByte, arg1: UInt, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetNumSuits(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onRequestUseGag(arg0: Double, arg1: Double, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onToonUsedGag(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, arg4: Short, sender: ChannelId? = null) {}
	open fun onRequestSuitHitByGag(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSuitHitByGag(arg0: UInt, arg1: UByte, arg2: UByte, sender: ChannelId? = null) {}
	open fun onRequestHitBySuit(arg0: UByte, arg1: UByte, arg2: Short, sender: ChannelId? = null) {}
	open fun onToonHitBySuit(arg0: UInt, arg1: UByte, arg2: UByte, arg3: Short, sender: ChannelId? = null) {}
	open fun onRequestHitByDrop(sender: ChannelId? = null) {}
	open fun onToonHitByDrop(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestPickUp(arg0: UByte, sender: ChannelId? = null) {}
	open fun onPickUp(arg0: UInt, arg1: UByte, arg2: Short, sender: ChannelId? = null) {}
	open fun onRequestGag(arg0: UByte, sender: ChannelId? = null) {}
	open fun onHasGag(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
}

open class DistCogdoFlyingGame(doId: DOId): DistributedObjectBase(doId, 211U.toDClassId()) {
	companion object {
		val dClassId = 211U.toDClassId()

		object Fields {
			val requestAction: FieldId = 1256U.toFieldId()
			val requestPickUp: FieldId = 1257U.toFieldId()
			val pickUp: FieldId = 1258U.toFieldId()
			val debuffPowerup: FieldId = 1259U.toFieldId()
			val doAction: FieldId = 1260U.toFieldId()
			val eagleExitCooldown: FieldId = 1261U.toFieldId()
			val toonSetAsEagleTarget: FieldId = 1262U.toFieldId()
			val toonClearAsEagleTarget: FieldId = 1263U.toFieldId()
			val toonDied: FieldId = 1264U.toFieldId()
			val toonSpawn: FieldId = 1265U.toFieldId()
			val toonSetBlades: FieldId = 1266U.toFieldId()
			val toonBladeLost: FieldId = 1267U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1256U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onRequestAction(t0, t1, sender)
				}
			}
		),
		1257U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!
				onRequestPickUp(t0, t1, sender)
				}
			}
		),
		1258U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toInt16()!!
				onPickUp(t0, t1, t2, sender)
				}
			}
		),
		1259U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toInt16()!!
				onDebuffPowerup(t0, t1, t2, sender)
				}
			}
		),
		1260U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onDoAction(t0, t1, sender)
				}
			}
		),
		1261U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEagleExitCooldown(t0, t1, sender)
				}
			}
		),
		1262U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toInt16()!!
				onToonSetAsEagleTarget(t0, t1, t2, sender)
				}
			}
		),
		1263U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toInt16()!!
				onToonClearAsEagleTarget(t0, t1, t2, sender)
				}
			}
		),
		1264U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				onToonDied(t0, t1, sender)
				}
			}
		),
		1265U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				onToonSpawn(t0, t1, sender)
				}
			}
		),
		1266U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				onToonSetBlades(t0, t1, sender)
				}
			}
		),
		1267U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onToonBladeLost(it.toUInt32()!!, sender)
			}
		),
	)

	fun requestAction(arg0: UByte, arg1: UByte, ) {
		setField(1256U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestPickUp(arg0: UShort, arg1: UByte, ) {
		setField(1257U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun pickUp(arg0: UInt, arg1: UShort, arg2: Short, ) {
		setField(1258U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun debuffPowerup(arg0: UInt, arg1: UShort, arg2: Short, ) {
		setField(1259U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun doAction(arg0: UByte, arg1: UInt, ) {
		setField(1260U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun eagleExitCooldown(arg0: UInt, arg1: Short, ) {
		setField(1261U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun toonSetAsEagleTarget(arg0: UInt, arg1: UByte, arg2: Short, ) {
		setField(1262U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun toonClearAsEagleTarget(arg0: UInt, arg1: UByte, arg2: Short, ) {
		setField(1263U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun toonDied(arg0: UInt, arg1: Int, ) {
		setField(1264U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun toonSpawn(arg0: UInt, arg1: Int, ) {
		setField(1265U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun toonSetBlades(arg0: UInt, arg1: Int, ) {
		setField(1266U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun toonBladeLost(arg0: UInt, ) {
		setField(1267U.toFieldId(), arg0.toFieldValue())
	}

	open fun onRequestAction(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onRequestPickUp(arg0: UShort, arg1: UByte, sender: ChannelId? = null) {}
	open fun onPickUp(arg0: UInt, arg1: UShort, arg2: Short, sender: ChannelId? = null) {}
	open fun onDebuffPowerup(arg0: UInt, arg1: UShort, arg2: Short, sender: ChannelId? = null) {}
	open fun onDoAction(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
	open fun onEagleExitCooldown(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onToonSetAsEagleTarget(arg0: UInt, arg1: UByte, arg2: Short, sender: ChannelId? = null) {}
	open fun onToonClearAsEagleTarget(arg0: UInt, arg1: UByte, arg2: Short, sender: ChannelId? = null) {}
	open fun onToonDied(arg0: UInt, arg1: Int, sender: ChannelId? = null) {}
	open fun onToonSpawn(arg0: UInt, arg1: Int, sender: ChannelId? = null) {}
	open fun onToonSetBlades(arg0: UInt, arg1: Int, sender: ChannelId? = null) {}
	open fun onToonBladeLost(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistCogdoBoardroomGame(doId: DOId): DistributedObjectBase(doId, 212U.toDClassId()) {
	companion object {
		val dClassId = 212U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistCogdoCraneGame(doId: DOId): DistributedObjectBase(doId, 213U.toDClassId()) {
	companion object {
		val dClassId = 213U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistCogdoCrane(doId: DOId): DistributedObjectBase(doId, 214U.toDClassId()) {
	companion object {
		val dClassId = 214U.toDClassId()

		object Fields {
			val setCraneGameId: FieldId = 1268U.toFieldId()
			val setIndex: FieldId = 1269U.toFieldId()
			val setState: FieldId = 1270U.toFieldId()
			val clearSmoothing: FieldId = 1271U.toFieldId()
			val setCablePos: FieldId = 1272U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1268U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCraneGameId(it.toUInt32()!!, sender)
			}
		),
		1269U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIndex(it.toUInt8()!!, sender)
			}
		),
		1270U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toChar()!!
				val t1 = values[1].toUInt32()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		1271U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onClearSmoothing(it.toInt8()!!, sender)
			}
		),
		1272U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )), FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toUInt16()!!.transform {
						divide(100.0f)
						modulo(360.0f)
					}
				val t3 = with(LinkPosition) { values[3].toList()!!.map { fromFieldValue(it) }}
				val t4 = values[4].toInt16()!!
				onSetCablePos(t0, t1, t2, t3, t4, sender)
				}
			}
		),
	)

	fun setCraneGameId(arg0: UInt, ) {
		setField(1268U.toFieldId(), arg0.toFieldValue())
	}

	fun setIndex(arg0: UByte, ) {
		setField(1269U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: Char, arg1: UInt, ) {
		setField(1270U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun clearSmoothing(arg0: Byte, ) {
		setField(1271U.toFieldId(), arg0.toFieldValue())
	}

	fun setCablePos(arg0: UByte, arg1: Double, arg2: Double, arg3: List<LinkPosition>, arg4: Short, ) {
		setField(1272U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
			modulo(360.0f)
		}.toFieldValue(), 
			with(LinkPosition) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ), arg3.map { it.toFieldValue() }).toFieldValue()}, 
			arg4.toFieldValue(), 
				))
	}

	open fun onSetCraneGameId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetState(arg0: Char, arg1: UInt, sender: ChannelId? = null) {}
	open fun onClearSmoothing(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetCablePos(arg0: UByte, arg1: Double, arg2: Double, arg3: List<LinkPosition>, arg4: Short, sender: ChannelId? = null) {}
}

open class DistCogdoCraneObject(doId: DOId): DistributedObjectBase(doId, 215U.toDClassId()) {
	companion object {
		val dClassId = 215U.toDClassId()

		object Fields {
			val setCraneGameId: FieldId = 1273U.toFieldId()
			val setObjectState: FieldId = 1274U.toFieldId()
			val requestGrab: FieldId = 1275U.toFieldId()
			val rejectGrab: FieldId = 1276U.toFieldId()
			val requestDrop: FieldId = 1277U.toFieldId()
			val hitFloor: FieldId = 1278U.toFieldId()
			val requestFree: FieldId = 1279U.toFieldId()
			val hitBoss: FieldId = 1280U.toFieldId()
			val setX: FieldId = 1281U.toFieldId()
			val setY: FieldId = 1282U.toFieldId()
			val setZ: FieldId = 1283U.toFieldId()
			val setH: FieldId = 1284U.toFieldId()
			val setP: FieldId = 1285U.toFieldId()
			val setR: FieldId = 1286U.toFieldId()
			val setPos: FieldId = 1287U.toFieldId()
			val setHpr: FieldId = 1288U.toFieldId()
			val setPosHpr: FieldId = 1289U.toFieldId()
			val setXY: FieldId = 1290U.toFieldId()
			val setXZ: FieldId = 1291U.toFieldId()
			val setXYH: FieldId = 1292U.toFieldId()
			val setXYZH: FieldId = 1293U.toFieldId()
			val setComponentL: FieldId = 1294U.toFieldId()
			val setComponentX: FieldId = 1295U.toFieldId()
			val setComponentY: FieldId = 1296U.toFieldId()
			val setComponentZ: FieldId = 1297U.toFieldId()
			val setComponentH: FieldId = 1298U.toFieldId()
			val setComponentP: FieldId = 1299U.toFieldId()
			val setComponentR: FieldId = 1300U.toFieldId()
			val setComponentT: FieldId = 1301U.toFieldId()
			val setSmStop: FieldId = 1302U.toFieldId()
			val setSmH: FieldId = 1303U.toFieldId()
			val setSmZ: FieldId = 1304U.toFieldId()
			val setSmXY: FieldId = 1305U.toFieldId()
			val setSmXZ: FieldId = 1306U.toFieldId()
			val setSmPos: FieldId = 1307U.toFieldId()
			val setSmHpr: FieldId = 1308U.toFieldId()
			val setSmXYH: FieldId = 1309U.toFieldId()
			val setSmXYZH: FieldId = 1310U.toFieldId()
			val setSmPosHpr: FieldId = 1311U.toFieldId()
			val setSmPosHprL: FieldId = 1312U.toFieldId()
			val clearSmoothing: FieldId = 1313U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1273U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCraneGameId(it.toUInt32()!!, sender)
			}
		),
		1274U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toChar()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onSetObjectState(t0, t1, t2, sender)
				}
			}
		),
		1275U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestGrab(sender)
			}
		),
		1276U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectGrab(sender)
			}
		),
		1277U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestDrop(sender)
			}
		),
		1278U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitFloor(sender)
			}
		),
		1279U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toUInt16()!!.transform {
						divide(100.0f)
						modulo(360.0f)
					}
				onRequestFree(t0, t1, t2, t3, sender)
				}
			}
		),
		1280U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitBoss(it.toUInt16()!!.transform {
						divide(255.0f)
					}, sender)
			}
		),
		1281U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetX(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		1282U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetY(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		1283U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetZ(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		1284U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetH(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		1285U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetP(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		1286U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetR(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		1287U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPos(t0, t1, t2, sender)
				}
			}
		),
		1288U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetHpr(t0, t1, t2, sender)
				}
			}
		),
		1289U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		1290U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetXY(t0, t1, sender)
				}
			}
		),
		1291U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetXZ(t0, t1, sender)
				}
			}
		),
		1292U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetXYH(t0, t1, t2, sender)
				}
			}
		),
		1293U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				onSetXYZH(t0, t1, t2, t3, sender)
				}
			}
		),
		1294U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt64,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentL(it.toUInt64()!!, sender)
			}
		),
		1295U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentX(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		1296U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentY(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		1297U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentZ(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		1298U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentH(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		1299U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentP(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		1300U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentR(it.toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}, sender)
			}
		),
		1301U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetComponentT(it.toInt16()!!, sender)
			}
		),
		1302U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetSmStop(it.toInt16()!!, sender)
			}
		),
		1303U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t1 = values[1].toInt16()!!
				onSetSmH(t0, t1, sender)
				}
			}
		),
		1304U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!
				onSetSmZ(t0, t1, sender)
				}
			}
		),
		1305U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetSmXY(t0, t1, t2, sender)
				}
			}
		),
		1306U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetSmXZ(t0, t1, t2, sender)
				}
			}
		),
		1307U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!
				onSetSmPos(t0, t1, t2, t3, sender)
				}
			}
		),
		1308U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t3 = values[3].toInt16()!!
				onSetSmHpr(t0, t1, t2, t3, sender)
				}
			}
		),
		1309U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t3 = values[3].toInt16()!!
				onSetSmXYH(t0, t1, t2, t3, sender)
				}
			}
		),
		1310U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t4 = values[4].toInt16()!!
				onSetSmXYZH(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1311U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t6 = values[6].toInt16()!!
				onSetSmPosHpr(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		1312U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt64()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t6 = values[6].toInt16()!!.transform {
						divide(10.0f)
						modulo(360.0f)
					}
				val t7 = values[7].toInt16()!!
				onSetSmPosHprL(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		1313U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onClearSmoothing(it.toInt8()!!, sender)
			}
		),
	)

	fun setCraneGameId(arg0: UInt, ) {
		setField(1273U.toFieldId(), arg0.toFieldValue())
	}

	fun setObjectState(arg0: Char, arg1: UInt, arg2: UInt, ) {
		setField(1274U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestGrab() {
		setField(1275U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rejectGrab() {
		setField(1276U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestDrop() {
		setField(1277U.toFieldId(), FieldValue.EmptyValue)
	}

	fun hitFloor() {
		setField(1278U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestFree(arg0: Double, arg1: Double, arg2: Double, arg3: Double, ) {
		setField(1279U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
			modulo(360.0f)
		}.toFieldValue(), 
				))
	}

	fun hitBoss(arg0: Double, ) {
		setField(1280U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(255.0f)
		}.toFieldValue())
	}

	fun setX(arg0: Double, ) {
		setField(1281U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setY(arg0: Double, ) {
		setField(1282U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setZ(arg0: Double, ) {
		setField(1283U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setH(arg0: Double, ) {
		setField(1284U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setP(arg0: Double, ) {
		setField(1285U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setR(arg0: Double, ) {
		setField(1286U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setPos(arg0: Double, arg1: Double, arg2: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()

		setField(1287U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setHpr(arg0: Double, arg1: Double, arg2: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(1288U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg4Value = arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg5Value = arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(1289U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, ))
	}

	fun setXY(arg0: Double, arg1: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()

		setField(1290U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setXZ(arg0: Double, arg1: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()

		setField(1291U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setXYH(arg0: Double, arg1: Double, arg2: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(1292U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()

		setField(1293U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	fun setComponentL(arg0: ULong, ) {
		setField(1294U.toFieldId(), arg0.toFieldValue())
	}

	fun setComponentX(arg0: Double, ) {
		setField(1295U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setComponentY(arg0: Double, ) {
		setField(1296U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setComponentZ(arg0: Double, ) {
		setField(1297U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setComponentH(arg0: Double, ) {
		setField(1298U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setComponentP(arg0: Double, ) {
		setField(1299U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setComponentR(arg0: Double, ) {
		setField(1300U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue())
	}

	fun setComponentT(arg0: Short, ) {
		setField(1301U.toFieldId(), arg0.toFieldValue())
	}

	fun setSmStop(arg0: Short, ) {
		val arg0Value = arg0.toFieldValue()

		setField(1302U.toFieldId(), FieldValue.TupleValue(arg0Value, ))
	}

	fun setSmH(arg0: Double, arg1: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg1Value = arg1.toFieldValue()

		setField(1303U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setSmZ(arg0: Double, arg1: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.toFieldValue()

		setField(1304U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, ))
	}

	fun setSmXY(arg0: Double, arg1: Double, arg2: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.toFieldValue()

		setField(1305U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setSmXZ(arg0: Double, arg1: Double, arg2: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.toFieldValue()

		setField(1306U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, ))
	}

	fun setSmPos(arg0: Double, arg1: Double, arg2: Double, arg3: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.toFieldValue()

		setField(1307U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	fun setSmHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg3Value = arg3.toFieldValue()

		setField(1308U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	fun setSmXYH(arg0: Double, arg1: Double, arg2: Double, arg3: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg3Value = arg3.toFieldValue()

		setField(1309U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, ))
	}

	fun setSmXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg4Value = arg4.toFieldValue()

		setField(1310U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, ))
	}

	fun setSmPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Short, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg4Value = arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg5Value = arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg6Value = arg6.toFieldValue()

		setField(1311U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, arg6Value, ))
	}

	fun setSmPosHprL(arg0: ULong, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Short, ) {
		val arg0Value = arg0.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue()
		val arg4Value = arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg5Value = arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg6Value = arg6.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
			modulo(360.0f)
		}.toFieldValue()
		val arg7Value = arg7.toFieldValue()

		setField(1312U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, arg6Value, arg7Value, ))
	}

	fun clearSmoothing(arg0: Byte, ) {
		setField(1313U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetCraneGameId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetObjectState(arg0: Char, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onRequestGrab(sender: ChannelId? = null) {}
	open fun onRejectGrab(sender: ChannelId? = null) {}
	open fun onRequestDrop(sender: ChannelId? = null) {}
	open fun onHitFloor(sender: ChannelId? = null) {}
	open fun onRequestFree(arg0: Double, arg1: Double, arg2: Double, arg3: Double, sender: ChannelId? = null) {}
	open fun onHitBoss(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetX(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetY(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetZ(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetH(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetP(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetR(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetPos(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetHpr(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetXY(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetXZ(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetXYH(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, sender: ChannelId? = null) {}
	open fun onSetComponentL(arg0: ULong, sender: ChannelId? = null) {}
	open fun onSetComponentX(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentY(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentZ(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentH(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentP(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentR(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetComponentT(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetSmStop(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetSmH(arg0: Double, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetSmZ(arg0: Double, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetSmXY(arg0: Double, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetSmXZ(arg0: Double, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetSmPos(arg0: Double, arg1: Double, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onSetSmHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onSetSmXYH(arg0: Double, arg1: Double, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onSetSmXYZH(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Short, sender: ChannelId? = null) {}
	open fun onSetSmPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Short, sender: ChannelId? = null) {}
	open fun onSetSmPosHprL(arg0: ULong, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Short, sender: ChannelId? = null) {}
	open fun onClearSmoothing(arg0: Byte, sender: ChannelId? = null) {}
}

open class DistCogdoCraneMoneyBag(doId: DOId): DistributedObjectBase(doId, 216U.toDClassId()) {
	companion object {
		val dClassId = 216U.toDClassId()

		object Fields {
			val setIndex: FieldId = 1314U.toFieldId()
			val requestInitial: FieldId = 1315U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1314U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIndex(it.toUInt8()!!, sender)
			}
		),
		1315U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestInitial(sender)
			}
		),
	)

	fun setIndex(arg0: UByte, ) {
		setField(1314U.toFieldId(), arg0.toFieldValue())
	}

	fun requestInitial() {
		setField(1315U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestInitial(sender: ChannelId? = null) {}
}

open class DistCogdoCraneCog(doId: DOId): DistributedObjectBase(doId, 217U.toDClassId()) {
	companion object {
		val dClassId = 217U.toDClassId()

		object Fields {
			val setGameId: FieldId = 1316U.toFieldId()
			val setDNAString: FieldId = 1317U.toFieldId()
			val setSpawnInfo: FieldId = 1318U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1316U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGameId(it.toUInt32()!!, sender)
			}
		),
		1317U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDNAString(it.toBlob()!!, sender)
			}
		),
		1318U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt16()!!
				onSetSpawnInfo(t0, t1, sender)
				}
			}
		),
	)

	fun setGameId(arg0: UInt, ) {
		setField(1316U.toFieldId(), arg0.toFieldValue())
	}

	fun setDNAString(arg0: ByteArray, ) {
		setField(1317U.toFieldId(), arg0.toFieldValue())
	}

	fun setSpawnInfo(arg0: UByte, arg1: Short, ) {
		setField(1318U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetGameId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDNAString(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetSpawnInfo(arg0: UByte, arg1: Short, sender: ChannelId? = null) {}
}

open class DistributedHQInterior(doId: DOId): DistributedObjectBase(doId, 218U.toDClassId()) {
	companion object {
		val dClassId = 218U.toDClassId()

		object Fields {
			val setZoneIdAndBlock: FieldId = 1319U.toFieldId()
			val setLeaderBoard: FieldId = 1320U.toFieldId()
			val setTutorial: FieldId = 1321U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1319U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetZoneIdAndBlock(t0, t1, sender)
				}
			}
		),
		1320U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLeaderBoard(it.toBlob()!!, sender)
			}
		),
		1321U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTutorial(it.toUInt8()!!, sender)
			}
		),
	)

	fun setZoneIdAndBlock(arg0: UInt, arg1: UShort, ) {
		setField(1319U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setLeaderBoard(arg0: ByteArray, ) {
		setField(1320U.toFieldId(), arg0.toFieldValue())
	}

	fun setTutorial(arg0: UByte, ) {
		setField(1321U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetZoneIdAndBlock(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetLeaderBoard(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetTutorial(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedGagshopInterior(doId: DOId): DistributedObjectBase(doId, 219U.toDClassId()) {
	companion object {
		val dClassId = 219U.toDClassId()

		object Fields {
			val setZoneIdAndBlock: FieldId = 1322U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1322U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetZoneIdAndBlock(t0, t1, sender)
				}
			}
		),
	)

	fun setZoneIdAndBlock(arg0: UInt, arg1: UShort, ) {
		setField(1322U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetZoneIdAndBlock(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
}

open class DistributedPetshopInterior(doId: DOId): DistributedObjectBase(doId, 220U.toDClassId()) {
	companion object {
		val dClassId = 220U.toDClassId()

		object Fields {
			val setZoneIdAndBlock: FieldId = 1323U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1323U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetZoneIdAndBlock(t0, t1, sender)
				}
			}
		),
	)

	fun setZoneIdAndBlock(arg0: UInt, arg1: UShort, ) {
		setField(1323U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetZoneIdAndBlock(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
}

open class DistributedKartShopInterior(doId: DOId): DistributedObjectBase(doId, 221U.toDClassId()) {
	companion object {
		val dClassId = 221U.toDClassId()

		object Fields {
			val setZoneIdAndBlock: FieldId = 1324U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1324U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetZoneIdAndBlock(t0, t1, sender)
				}
			}
		),
	)

	fun setZoneIdAndBlock(arg0: UInt, arg1: UShort, ) {
		setField(1324U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetZoneIdAndBlock(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
}

open class DistributedDoor(doId: DOId): DistributedObjectBase(doId, 222U.toDClassId()) {
	companion object {
		val dClassId = 222U.toDClassId()

		object Fields {
			val setZoneIdAndBlock: FieldId = 1325U.toFieldId()
			val setSwing: FieldId = 1326U.toFieldId()
			val setDoorType: FieldId = 1327U.toFieldId()
			val setDoorIndex: FieldId = 1328U.toFieldId()
			val setOtherZoneIdAndDoId: FieldId = 1329U.toFieldId()
			val requestEnter: FieldId = 1330U.toFieldId()
			val requestExit: FieldId = 1331U.toFieldId()
			val rejectEnter: FieldId = 1332U.toFieldId()
			val avatarEnter: FieldId = 1333U.toFieldId()
			val avatarExit: FieldId = 1334U.toFieldId()
			val setState: FieldId = 1335U.toFieldId()
			val setExitDoorState: FieldId = 1336U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1325U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetZoneIdAndBlock(t0, t1, sender)
				}
			}
		),
		1326U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSwing(it.toInt8()!!, sender)
			}
		),
		1327U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDoorType(it.toUInt8()!!, sender)
			}
		),
		1328U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDoorIndex(it.toUInt8()!!, sender)
			}
		),
		1329U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetOtherZoneIdAndDoId(t0, t1, sender)
				}
			}
		),
		1330U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestEnter(sender)
			}
		),
		1331U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		1332U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectEnter(it.toInt8()!!, sender)
			}
		),
		1333U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAvatarEnter(it.toUInt32()!!, sender)
			}
		),
		1334U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAvatarExit(it.toUInt32()!!, sender)
			}
		),
		1335U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		1336U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetExitDoorState(t0, t1, sender)
				}
			}
		),
	)

	fun setZoneIdAndBlock(arg0: UInt, arg1: UInt, ) {
		setField(1325U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setSwing(arg0: Byte, ) {
		setField(1326U.toFieldId(), arg0.toFieldValue())
	}

	fun setDoorType(arg0: UByte, ) {
		setField(1327U.toFieldId(), arg0.toFieldValue())
	}

	fun setDoorIndex(arg0: UByte, ) {
		setField(1328U.toFieldId(), arg0.toFieldValue())
	}

	fun setOtherZoneIdAndDoId(arg0: UInt, arg1: UInt, ) {
		setField(1329U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestEnter() {
		setField(1330U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestExit() {
		setField(1331U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rejectEnter(arg0: Byte, ) {
		setField(1332U.toFieldId(), arg0.toFieldValue())
	}

	fun avatarEnter(arg0: UInt, ) {
		setField(1333U.toFieldId(), arg0.toFieldValue())
	}

	fun avatarExit(arg0: UInt, ) {
		setField(1334U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: String, arg1: Short, ) {
		setField(1335U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setExitDoorState(arg0: String, arg1: Short, ) {
		setField(1336U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetZoneIdAndBlock(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetSwing(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetDoorType(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetDoorIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetOtherZoneIdAndDoId(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onRequestEnter(sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onRejectEnter(arg0: Byte, sender: ChannelId? = null) {}
	open fun onAvatarEnter(arg0: UInt, sender: ChannelId? = null) {}
	open fun onAvatarExit(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetExitDoorState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
}

open class DistributedAnimDoor(doId: DOId): DistributedObjectBase(doId, 223U.toDClassId()) {
	companion object {
		val dClassId = 223U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedHouseDoor(doId: DOId): DistributedObjectBase(doId, 224U.toDClassId()) {
	companion object {
		val dClassId = 224U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedCogHQDoor(doId: DOId): DistributedObjectBase(doId, 225U.toDClassId()) {
	companion object {
		val dClassId = 225U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedSellbotHQDoor(doId: DOId): DistributedObjectBase(doId, 226U.toDClassId()) {
	companion object {
		val dClassId = 226U.toDClassId()

		object Fields {
			val informPlayer: FieldId = 1337U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1337U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onInformPlayer(it.toUInt8()!!, sender)
			}
		),
	)

	fun informPlayer(arg0: UByte, ) {
		setField(1337U.toFieldId(), arg0.toFieldValue())
	}

	open fun onInformPlayer(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedNPCToonBase(doId: DOId): DistributedObjectBase(doId, 227U.toDClassId()) {
	companion object {
		val dClassId = 227U.toDClassId()

		object Fields {
			val setName: FieldId = 1338U.toFieldId()
			val setDNAString: FieldId = 1339U.toFieldId()
			val setPositionIndex: FieldId = 1340U.toFieldId()
			val setAnimState: FieldId = 1341U.toFieldId()
			val setPageNumber: FieldId = 1342U.toFieldId()
			val avatarEnter: FieldId = 1343U.toFieldId()
			val freeAvatar: FieldId = 1344U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1338U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetName(it.toStringValue()!!, sender)
			}
		),
		1339U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDNAString(it.toBlob()!!, sender)
			}
		),
		1340U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPositionIndex(it.toUInt8()!!, sender)
			}
		),
		1341U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetAnimState(t0, t1, t2, sender)
				}
			}
		),
		1342U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				onSetPageNumber(t0, t1, t2, sender)
				}
			}
		),
		1343U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarEnter(sender)
			}
		),
		1344U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onFreeAvatar(sender)
			}
		),
	)

	fun setName(arg0: String, ) {
		setField(1338U.toFieldId(), arg0.toFieldValue())
	}

	fun setDNAString(arg0: ByteArray, ) {
		setField(1339U.toFieldId(), arg0.toFieldValue())
	}

	fun setPositionIndex(arg0: UByte, ) {
		setField(1340U.toFieldId(), arg0.toFieldValue())
	}

	fun setAnimState(arg0: String, arg1: Double, arg2: Short, ) {
		setField(1341U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setPageNumber(arg0: Short, arg1: Byte, arg2: Short, ) {
		setField(1342U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun avatarEnter() {
		setField(1343U.toFieldId(), FieldValue.EmptyValue)
	}

	fun freeAvatar() {
		setField(1344U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetName(arg0: String, sender: ChannelId? = null) {}
	open fun onSetDNAString(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetPositionIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetAnimState(arg0: String, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetPageNumber(arg0: Short, arg1: Byte, arg2: Short, sender: ChannelId? = null) {}
	open fun onAvatarEnter(sender: ChannelId? = null) {}
	open fun onFreeAvatar(sender: ChannelId? = null) {}
}

open class DistributedNPCToon(doId: DOId): DistributedObjectBase(doId, 228U.toDClassId()) {
	companion object {
		val dClassId = 228U.toDClassId()

		object Fields {
			val setMovie: FieldId = 1345U.toFieldId()
			val setMovieDone: FieldId = 1346U.toFieldId()
			val chooseQuest: FieldId = 1347U.toFieldId()
			val chooseTrack: FieldId = 1348U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1345U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toList()!!.map { it.toUInt16()!! }
				val t4 = values[4].toInt16()!!
				onSetMovie(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1346U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetMovieDone(sender)
			}
		),
		1347U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChooseQuest(it.toUInt16()!!, sender)
			}
		),
		1348U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChooseTrack(it.toInt8()!!, sender)
			}
		),
	)

	fun setMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UShort>, arg4: Short, ) {
		setField(1345U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt16, arg3.map { it.toFieldValue() }).toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun setMovieDone() {
		setField(1346U.toFieldId(), FieldValue.EmptyValue)
	}

	fun chooseQuest(arg0: UShort, ) {
		setField(1347U.toFieldId(), arg0.toFieldValue())
	}

	fun chooseTrack(arg0: Byte, ) {
		setField(1348U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UShort>, arg4: Short, sender: ChannelId? = null) {}
	open fun onSetMovieDone(sender: ChannelId? = null) {}
	open fun onChooseQuest(arg0: UShort, sender: ChannelId? = null) {}
	open fun onChooseTrack(arg0: Byte, sender: ChannelId? = null) {}
}

open class DistributedNPCSpecialQuestGiver(doId: DOId): DistributedObjectBase(doId, 229U.toDClassId()) {
	companion object {
		val dClassId = 229U.toDClassId()

		object Fields {
			val setMovie: FieldId = 1349U.toFieldId()
			val setMovieDone: FieldId = 1350U.toFieldId()
			val chooseQuest: FieldId = 1351U.toFieldId()
			val chooseTrack: FieldId = 1352U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1349U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toList()!!.map { it.toUInt16()!! }
				val t4 = values[4].toInt16()!!
				onSetMovie(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1350U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetMovieDone(sender)
			}
		),
		1351U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChooseQuest(it.toUInt16()!!, sender)
			}
		),
		1352U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onChooseTrack(it.toInt8()!!, sender)
			}
		),
	)

	fun setMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UShort>, arg4: Short, ) {
		setField(1349U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt16, arg3.map { it.toFieldValue() }).toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun setMovieDone() {
		setField(1350U.toFieldId(), FieldValue.EmptyValue)
	}

	fun chooseQuest(arg0: UShort, ) {
		setField(1351U.toFieldId(), arg0.toFieldValue())
	}

	fun chooseTrack(arg0: Byte, ) {
		setField(1352U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UShort>, arg4: Short, sender: ChannelId? = null) {}
	open fun onSetMovieDone(sender: ChannelId? = null) {}
	open fun onChooseQuest(arg0: UShort, sender: ChannelId? = null) {}
	open fun onChooseTrack(arg0: Byte, sender: ChannelId? = null) {}
}

open class DistributedNPCFlippyInToonHall(doId: DOId): DistributedObjectBase(doId, 230U.toDClassId()) {
	companion object {
		val dClassId = 230U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedNPCScientist(doId: DOId): DistributedObjectBase(doId, 231U.toDClassId()) {
	companion object {
		val dClassId = 231U.toDClassId()

		object Fields {
			val setChat: FieldId = 1353U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1353U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toChar()!! }
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt8()!!
				val t4 = values[4].toUInt8()!!
				onSetChat(t0, t1, t2, t3, t4, sender)
				}
			}
		),
	)

	fun setChat(arg0: List<Char>, arg1: UByte, arg2: UInt, arg3: UByte, arg4: UByte, ) {
		setField(1353U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.Char, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	open fun onSetChat(arg0: List<Char>, arg1: UByte, arg2: UInt, arg3: UByte, arg4: UByte, sender: ChannelId? = null) {}
}

open class DistributedNPCClerk(doId: DOId): DistributedObjectBase(doId, 232U.toDClassId()) {
	companion object {
		val dClassId = 232U.toDClassId()

		object Fields {
			val setMovie: FieldId = 1354U.toFieldId()
			val setInventory: FieldId = 1355U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1354U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toInt16()!!
				onSetMovie(t0, t1, t2, t3, sender)
				}
			}
		),
		1355U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.Int16, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toUInt8()!!
				onSetInventory(t0, t1, t2, sender)
				}
			}
		),
	)

	fun setMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: Short, ) {
		setField(1354U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setInventory(arg0: ByteArray, arg1: Short, arg2: UByte, ) {
		setField(1355U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: Short, sender: ChannelId? = null) {}
	open fun onSetInventory(arg0: ByteArray, arg1: Short, arg2: UByte, sender: ChannelId? = null) {}
}

open class DistributedNPCTailor(doId: DOId): DistributedObjectBase(doId, 233U.toDClassId()) {
	companion object {
		val dClassId = 233U.toDClassId()

		object Fields {
			val setMovie: FieldId = 1356U.toFieldId()
			val setDNA: FieldId = 1357U.toFieldId()
			val setCustomerDNA: FieldId = 1358U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1356U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toInt16()!!
				onSetMovie(t0, t1, t2, t3, sender)
				}
			}
		),
		1357U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.Int8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt8()!!
				onSetDNA(t0, t1, t2, sender)
				}
			}
		),
		1358U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toBlob()!!
				onSetCustomerDNA(t0, t1, sender)
				}
			}
		),
	)

	fun setMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: Short, ) {
		setField(1356U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setDNA(arg0: ByteArray, arg1: Byte, arg2: UByte, ) {
		setField(1357U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setCustomerDNA(arg0: UInt, arg1: ByteArray, ) {
		setField(1358U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: Short, sender: ChannelId? = null) {}
	open fun onSetDNA(arg0: ByteArray, arg1: Byte, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetCustomerDNA(arg0: UInt, arg1: ByteArray, sender: ChannelId? = null) {}
}

open class DistributedNPCBlocker(doId: DOId): DistributedObjectBase(doId, 234U.toDClassId()) {
	companion object {
		val dClassId = 234U.toDClassId()

		object Fields {
			val setMovie: FieldId = 1359U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1359U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toInt16()!!
				onSetMovie(t0, t1, t2, t3, sender)
				}
			}
		),
	)

	fun setMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: Short, ) {
		setField(1359U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: Short, sender: ChannelId? = null) {}
}

open class DistributedNPCFisherman(doId: DOId): DistributedObjectBase(doId, 235U.toDClassId()) {
	companion object {
		val dClassId = 235U.toDClassId()

		object Fields {
			val setMovie: FieldId = 1360U.toFieldId()
			val completeSale: FieldId = 1361U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1360U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toList()!!.map { it.toUInt32()!! }
				val t4 = values[4].toInt16()!!
				onSetMovie(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1361U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onCompleteSale(it.toUInt8()!!, sender)
			}
		),
	)

	fun setMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UInt>, arg4: Short, ) {
		setField(1360U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg3.map { it.toFieldValue() }).toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun completeSale(arg0: UByte, ) {
		setField(1361U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UInt>, arg4: Short, sender: ChannelId? = null) {}
	open fun onCompleteSale(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedNPCPartyPerson(doId: DOId): DistributedObjectBase(doId, 236U.toDClassId()) {
	companion object {
		val dClassId = 236U.toDClassId()

		object Fields {
			val setMovie: FieldId = 1362U.toFieldId()
			val answer: FieldId = 1363U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1362U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toList()!!.map { it.toUInt32()!! }
				val t4 = values[4].toInt16()!!
				onSetMovie(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1363U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAnswer(it.toUInt8()!!, sender)
			}
		),
	)

	fun setMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UInt>, arg4: Short, ) {
		setField(1362U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg3.map { it.toFieldValue() }).toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun answer(arg0: UByte, ) {
		setField(1363U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UInt>, arg4: Short, sender: ChannelId? = null) {}
	open fun onAnswer(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedNPCPetclerk(doId: DOId): DistributedObjectBase(doId, 237U.toDClassId()) {
	companion object {
		val dClassId = 237U.toDClassId()

		object Fields {
			val setMovie: FieldId = 1364U.toFieldId()
			val setPetSeeds: FieldId = 1365U.toFieldId()
			val petAdopted: FieldId = 1366U.toFieldId()
			val petReturned: FieldId = 1367U.toFieldId()
			val fishSold: FieldId = 1368U.toFieldId()
			val transactionDone: FieldId = 1369U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1364U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toList()!!.map { it.toUInt32()!! }
				val t4 = values[4].toInt16()!!
				onSetMovie(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1365U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetPetSeeds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1366U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onPetAdopted(t0, t1, sender)
				}
			}
		),
		1367U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onPetReturned(sender)
			}
		),
		1368U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onFishSold(sender)
			}
		),
		1369U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTransactionDone(sender)
			}
		),
	)

	fun setMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UInt>, arg4: Short, ) {
		setField(1364U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg3.map { it.toFieldValue() }).toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun setPetSeeds(arg0: List<UInt>, ) {
		setField(1365U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun petAdopted(arg0: UByte, arg1: UInt, ) {
		setField(1366U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun petReturned() {
		setField(1367U.toFieldId(), FieldValue.EmptyValue)
	}

	fun fishSold() {
		setField(1368U.toFieldId(), FieldValue.EmptyValue)
	}

	fun transactionDone() {
		setField(1369U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UInt>, arg4: Short, sender: ChannelId? = null) {}
	open fun onSetPetSeeds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onPetAdopted(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
	open fun onPetReturned(sender: ChannelId? = null) {}
	open fun onFishSold(sender: ChannelId? = null) {}
	open fun onTransactionDone(sender: ChannelId? = null) {}
}

open class DistributedNPCKartClerk(doId: DOId): DistributedObjectBase(doId, 238U.toDClassId()) {
	companion object {
		val dClassId = 238U.toDClassId()

		object Fields {
			val setMovie: FieldId = 1370U.toFieldId()
			val buyKart: FieldId = 1371U.toFieldId()
			val buyAccessory: FieldId = 1372U.toFieldId()
			val transactionDone: FieldId = 1373U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1370U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toList()!!.map { it.toUInt32()!! }
				val t4 = values[4].toInt16()!!
				onSetMovie(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1371U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onBuyKart(it.toUInt8()!!, sender)
			}
		),
		1372U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onBuyAccessory(it.toUInt8()!!, sender)
			}
		),
		1373U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTransactionDone(sender)
			}
		),
	)

	fun setMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UInt>, arg4: Short, ) {
		setField(1370U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg3.map { it.toFieldValue() }).toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun buyKart(arg0: UByte, ) {
		setField(1371U.toFieldId(), arg0.toFieldValue())
	}

	fun buyAccessory(arg0: UByte, ) {
		setField(1372U.toFieldId(), arg0.toFieldValue())
	}

	fun transactionDone() {
		setField(1373U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: UInt, arg3: List<UInt>, arg4: Short, sender: ChannelId? = null) {}
	open fun onBuyKart(arg0: UByte, sender: ChannelId? = null) {}
	open fun onBuyAccessory(arg0: UByte, sender: ChannelId? = null) {}
	open fun onTransactionDone(sender: ChannelId? = null) {}
}

open class DistributedKnockKnockDoor(doId: DOId): DistributedObjectBase(doId, 239U.toDClassId()) {
	companion object {
		val dClassId = 239U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedElevator(doId: DOId): DistributedObjectBase(doId, 240U.toDClassId()) {
	companion object {
		val dClassId = 240U.toDClassId()

		object Fields {
			val setBldgDoId: FieldId = 1374U.toFieldId()
			val setState: FieldId = 1375U.toFieldId()
			val fillSlot0: FieldId = 1376U.toFieldId()
			val fillSlot1: FieldId = 1377U.toFieldId()
			val fillSlot2: FieldId = 1378U.toFieldId()
			val fillSlot3: FieldId = 1379U.toFieldId()
			val fillSlot4: FieldId = 1380U.toFieldId()
			val fillSlot5: FieldId = 1381U.toFieldId()
			val fillSlot6: FieldId = 1382U.toFieldId()
			val fillSlot7: FieldId = 1383U.toFieldId()
			val emptySlot0: FieldId = 1384U.toFieldId()
			val emptySlot1: FieldId = 1385U.toFieldId()
			val emptySlot2: FieldId = 1386U.toFieldId()
			val emptySlot3: FieldId = 1387U.toFieldId()
			val emptySlot4: FieldId = 1388U.toFieldId()
			val emptySlot5: FieldId = 1389U.toFieldId()
			val emptySlot6: FieldId = 1390U.toFieldId()
			val emptySlot7: FieldId = 1391U.toFieldId()
			val requestBoard: FieldId = 1392U.toFieldId()
			val rejectBoard: FieldId = 1393U.toFieldId()
			val requestExit: FieldId = 1394U.toFieldId()
			val setElevatorTripId: FieldId = 1395U.toFieldId()
			val setAntiShuffle: FieldId = 1396U.toFieldId()
			val setMinLaff: FieldId = 1397U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1374U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBldgDoId(it.toUInt32()!!, sender)
			}
		),
		1375U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		1376U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onFillSlot0(t0, t1, sender)
				}
			}
		),
		1377U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onFillSlot1(t0, t1, sender)
				}
			}
		),
		1378U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onFillSlot2(t0, t1, sender)
				}
			}
		),
		1379U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onFillSlot3(t0, t1, sender)
				}
			}
		),
		1380U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onFillSlot4(t0, t1, sender)
				}
			}
		),
		1381U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onFillSlot5(t0, t1, sender)
				}
			}
		),
		1382U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onFillSlot6(t0, t1, sender)
				}
			}
		),
		1383U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onFillSlot7(t0, t1, sender)
				}
			}
		),
		1384U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toInt16()!!
				onEmptySlot0(t0, t1, t2, t3, sender)
				}
			}
		),
		1385U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toInt16()!!
				onEmptySlot1(t0, t1, t2, t3, sender)
				}
			}
		),
		1386U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toInt16()!!
				onEmptySlot2(t0, t1, t2, t3, sender)
				}
			}
		),
		1387U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toInt16()!!
				onEmptySlot3(t0, t1, t2, t3, sender)
				}
			}
		),
		1388U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toInt16()!!
				onEmptySlot4(t0, t1, t2, t3, sender)
				}
			}
		),
		1389U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toInt16()!!
				onEmptySlot5(t0, t1, t2, t3, sender)
				}
			}
		),
		1390U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toInt16()!!
				onEmptySlot6(t0, t1, t2, t3, sender)
				}
			}
		),
		1391U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toInt16()!!
				onEmptySlot7(t0, t1, t2, t3, sender)
				}
			}
		),
		1392U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBoard(sender)
			}
		),
		1393U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onRejectBoard(t0, t1, sender)
				}
			}
		),
		1394U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		1395U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetElevatorTripId(it.toUInt32()!!, sender)
			}
		),
		1396U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAntiShuffle(it.toUInt8()!!, sender)
			}
		),
		1397U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMinLaff(it.toUInt8()!!, sender)
			}
		),
	)

	fun setBldgDoId(arg0: UInt, ) {
		setField(1374U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: String, arg1: Short, ) {
		setField(1375U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fillSlot0(arg0: UInt, arg1: UByte, ) {
		setField(1376U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fillSlot1(arg0: UInt, arg1: UByte, ) {
		setField(1377U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fillSlot2(arg0: UInt, arg1: UByte, ) {
		setField(1378U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fillSlot3(arg0: UInt, arg1: UByte, ) {
		setField(1379U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fillSlot4(arg0: UInt, arg1: UByte, ) {
		setField(1380U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fillSlot5(arg0: UInt, arg1: UByte, ) {
		setField(1381U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fillSlot6(arg0: UInt, arg1: UByte, ) {
		setField(1382U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fillSlot7(arg0: UInt, arg1: UByte, ) {
		setField(1383U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun emptySlot0(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, ) {
		setField(1384U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun emptySlot1(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, ) {
		setField(1385U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun emptySlot2(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, ) {
		setField(1386U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun emptySlot3(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, ) {
		setField(1387U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun emptySlot4(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, ) {
		setField(1388U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun emptySlot5(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, ) {
		setField(1389U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun emptySlot6(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, ) {
		setField(1390U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun emptySlot7(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, ) {
		setField(1391U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun requestBoard() {
		setField(1392U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rejectBoard(arg0: UInt, arg1: UByte, ) {
		setField(1393U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestExit() {
		setField(1394U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setElevatorTripId(arg0: UInt, ) {
		setField(1395U.toFieldId(), arg0.toFieldValue())
	}

	fun setAntiShuffle(arg0: UByte, ) {
		setField(1396U.toFieldId(), arg0.toFieldValue())
	}

	fun setMinLaff(arg0: UByte, ) {
		setField(1397U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetBldgDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onFillSlot0(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onFillSlot1(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onFillSlot2(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onFillSlot3(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onFillSlot4(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onFillSlot5(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onFillSlot6(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onFillSlot7(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onEmptySlot0(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot1(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot2(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot3(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot4(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot5(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot6(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot7(arg0: UInt, arg1: Byte, arg2: Short, arg3: Short, sender: ChannelId? = null) {}
	open fun onRequestBoard(sender: ChannelId? = null) {}
	open fun onRejectBoard(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onSetElevatorTripId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetAntiShuffle(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetMinLaff(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedElevatorFSM(doId: DOId): DistributedObjectBase(doId, 241U.toDClassId()) {
	companion object {
		val dClassId = 241U.toDClassId()

		object Fields {
			val setBldgDoId: FieldId = 1398U.toFieldId()
			val setState: FieldId = 1399U.toFieldId()
			val fillSlot0: FieldId = 1400U.toFieldId()
			val fillSlot1: FieldId = 1401U.toFieldId()
			val fillSlot2: FieldId = 1402U.toFieldId()
			val fillSlot3: FieldId = 1403U.toFieldId()
			val fillSlot4: FieldId = 1404U.toFieldId()
			val fillSlot5: FieldId = 1405U.toFieldId()
			val fillSlot6: FieldId = 1406U.toFieldId()
			val fillSlot7: FieldId = 1407U.toFieldId()
			val emptySlot0: FieldId = 1408U.toFieldId()
			val emptySlot1: FieldId = 1409U.toFieldId()
			val emptySlot2: FieldId = 1410U.toFieldId()
			val emptySlot3: FieldId = 1411U.toFieldId()
			val emptySlot4: FieldId = 1412U.toFieldId()
			val emptySlot5: FieldId = 1413U.toFieldId()
			val emptySlot6: FieldId = 1414U.toFieldId()
			val emptySlot7: FieldId = 1415U.toFieldId()
			val requestBoard: FieldId = 1416U.toFieldId()
			val rejectBoard: FieldId = 1417U.toFieldId()
			val requestExit: FieldId = 1418U.toFieldId()
			val setElevatorTripId: FieldId = 1419U.toFieldId()
			val setAntiShuffle: FieldId = 1420U.toFieldId()
			val setMinLaff: FieldId = 1421U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1398U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBldgDoId(it.toUInt32()!!, sender)
			}
		),
		1399U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		1400U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot0(it.toUInt32()!!, sender)
			}
		),
		1401U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot1(it.toUInt32()!!, sender)
			}
		),
		1402U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot2(it.toUInt32()!!, sender)
			}
		),
		1403U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot3(it.toUInt32()!!, sender)
			}
		),
		1404U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot4(it.toUInt32()!!, sender)
			}
		),
		1405U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot5(it.toUInt32()!!, sender)
			}
		),
		1406U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot6(it.toUInt32()!!, sender)
			}
		),
		1407U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot7(it.toUInt32()!!, sender)
			}
		),
		1408U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				onEmptySlot0(t0, t1, t2, sender)
				}
			}
		),
		1409U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				onEmptySlot1(t0, t1, t2, sender)
				}
			}
		),
		1410U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				onEmptySlot2(t0, t1, t2, sender)
				}
			}
		),
		1411U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				onEmptySlot3(t0, t1, t2, sender)
				}
			}
		),
		1412U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				onEmptySlot4(t0, t1, t2, sender)
				}
			}
		),
		1413U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				onEmptySlot5(t0, t1, t2, sender)
				}
			}
		),
		1414U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				onEmptySlot6(t0, t1, t2, sender)
				}
			}
		),
		1415U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt16()!!
				onEmptySlot7(t0, t1, t2, sender)
				}
			}
		),
		1416U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBoard(sender)
			}
		),
		1417U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onRejectBoard(t0, t1, sender)
				}
			}
		),
		1418U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		1419U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetElevatorTripId(it.toUInt32()!!, sender)
			}
		),
		1420U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAntiShuffle(it.toUInt8()!!, sender)
			}
		),
		1421U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMinLaff(it.toUInt8()!!, sender)
			}
		),
	)

	fun setBldgDoId(arg0: UInt, ) {
		setField(1398U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: String, arg1: Short, ) {
		setField(1399U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fillSlot0(arg0: UInt, ) {
		setField(1400U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot1(arg0: UInt, ) {
		setField(1401U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot2(arg0: UInt, ) {
		setField(1402U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot3(arg0: UInt, ) {
		setField(1403U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot4(arg0: UInt, ) {
		setField(1404U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot5(arg0: UInt, ) {
		setField(1405U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot6(arg0: UInt, ) {
		setField(1406U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot7(arg0: UInt, ) {
		setField(1407U.toFieldId(), arg0.toFieldValue())
	}

	fun emptySlot0(arg0: UInt, arg1: Byte, arg2: Short, ) {
		setField(1408U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun emptySlot1(arg0: UInt, arg1: Byte, arg2: Short, ) {
		setField(1409U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun emptySlot2(arg0: UInt, arg1: Byte, arg2: Short, ) {
		setField(1410U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun emptySlot3(arg0: UInt, arg1: Byte, arg2: Short, ) {
		setField(1411U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun emptySlot4(arg0: UInt, arg1: Byte, arg2: Short, ) {
		setField(1412U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun emptySlot5(arg0: UInt, arg1: Byte, arg2: Short, ) {
		setField(1413U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun emptySlot6(arg0: UInt, arg1: Byte, arg2: Short, ) {
		setField(1414U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun emptySlot7(arg0: UInt, arg1: Byte, arg2: Short, ) {
		setField(1415U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestBoard() {
		setField(1416U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rejectBoard(arg0: UInt, arg1: UByte, ) {
		setField(1417U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestExit() {
		setField(1418U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setElevatorTripId(arg0: UInt, ) {
		setField(1419U.toFieldId(), arg0.toFieldValue())
	}

	fun setAntiShuffle(arg0: UByte, ) {
		setField(1420U.toFieldId(), arg0.toFieldValue())
	}

	fun setMinLaff(arg0: UByte, ) {
		setField(1421U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetBldgDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onFillSlot0(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot1(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot2(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot3(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot4(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot5(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot6(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot7(arg0: UInt, sender: ChannelId? = null) {}
	open fun onEmptySlot0(arg0: UInt, arg1: Byte, arg2: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot1(arg0: UInt, arg1: Byte, arg2: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot2(arg0: UInt, arg1: Byte, arg2: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot3(arg0: UInt, arg1: Byte, arg2: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot4(arg0: UInt, arg1: Byte, arg2: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot5(arg0: UInt, arg1: Byte, arg2: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot6(arg0: UInt, arg1: Byte, arg2: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot7(arg0: UInt, arg1: Byte, arg2: Short, sender: ChannelId? = null) {}
	open fun onRequestBoard(sender: ChannelId? = null) {}
	open fun onRejectBoard(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onSetElevatorTripId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetAntiShuffle(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetMinLaff(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedElevatorFloor(doId: DOId): DistributedObjectBase(doId, 242U.toDClassId()) {
	companion object {
		val dClassId = 242U.toDClassId()

		object Fields {
			val setFloor: FieldId = 1422U.toFieldId()
			val setLocked: FieldId = 1423U.toFieldId()
			val setEntering: FieldId = 1424U.toFieldId()
			val kickToonsOut: FieldId = 1425U.toFieldId()
			val setLatch: FieldId = 1426U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1422U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFloor(it.toInt8()!!, sender)
			}
		),
		1423U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLocked(it.toUInt16()!!, sender)
			}
		),
		1424U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEntering(it.toUInt16()!!, sender)
			}
		),
		1425U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onKickToonsOut(sender)
			}
		),
		1426U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLatch(it.toUInt32()!!, sender)
			}
		),
	)

	fun setFloor(arg0: Byte, ) {
		setField(1422U.toFieldId(), arg0.toFieldValue())
	}

	fun setLocked(arg0: UShort, ) {
		setField(1423U.toFieldId(), arg0.toFieldValue())
	}

	fun setEntering(arg0: UShort, ) {
		setField(1424U.toFieldId(), arg0.toFieldValue())
	}

	fun kickToonsOut() {
		setField(1425U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setLatch(arg0: UInt, ) {
		setField(1426U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetFloor(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetLocked(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetEntering(arg0: UShort, sender: ChannelId? = null) {}
	open fun onKickToonsOut(sender: ChannelId? = null) {}
	open fun onSetLatch(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedElevatorExt(doId: DOId): DistributedObjectBase(doId, 243U.toDClassId()) {
	companion object {
		val dClassId = 243U.toDClassId()

		object Fields {
			val setFloor: FieldId = 1427U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1427U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFloor(it.toInt8()!!, sender)
			}
		),
	)

	fun setFloor(arg0: Byte, ) {
		setField(1427U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetFloor(arg0: Byte, sender: ChannelId? = null) {}
}

open class DistributedLawOfficeElevatorExt(doId: DOId): DistributedObjectBase(doId, 244U.toDClassId()) {
	companion object {
		val dClassId = 244U.toDClassId()

		object Fields {
			val setEntranceId: FieldId = 1428U.toFieldId()
			val setLawOfficeInteriorZone: FieldId = 1429U.toFieldId()
			val setLawOfficeInteriorZoneForce: FieldId = 1430U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1428U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEntranceId(it.toUInt8()!!, sender)
			}
		),
		1429U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetLawOfficeInteriorZone(it.toUInt32()!!, sender)
			}
		),
		1430U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetLawOfficeInteriorZoneForce(it.toUInt32()!!, sender)
			}
		),
	)

	fun setEntranceId(arg0: UByte, ) {
		setField(1428U.toFieldId(), arg0.toFieldValue())
	}

	fun setLawOfficeInteriorZone(arg0: UInt, ) {
		setField(1429U.toFieldId(), arg0.toFieldValue())
	}

	fun setLawOfficeInteriorZoneForce(arg0: UInt, ) {
		setField(1430U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetEntranceId(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetLawOfficeInteriorZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetLawOfficeInteriorZoneForce(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedElevatorInt(doId: DOId): DistributedObjectBase(doId, 245U.toDClassId()) {
	companion object {
		val dClassId = 245U.toDClassId()

		object Fields {
			val requestBuildingExit: FieldId = 1431U.toFieldId()
			val forcedExit: FieldId = 1432U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1431U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBuildingExit(sender)
			}
		),
		1432U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onForcedExit(it.toUInt32()!!, sender)
			}
		),
	)

	fun requestBuildingExit() {
		setField(1431U.toFieldId(), FieldValue.EmptyValue)
	}

	fun forcedExit(arg0: UInt, ) {
		setField(1432U.toFieldId(), arg0.toFieldValue())
	}

	open fun onRequestBuildingExit(sender: ChannelId? = null) {}
	open fun onForcedExit(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedFactoryElevatorExt(doId: DOId): DistributedObjectBase(doId, 246U.toDClassId()) {
	companion object {
		val dClassId = 246U.toDClassId()

		object Fields {
			val setEntranceId: FieldId = 1433U.toFieldId()
			val setFactoryInteriorZone: FieldId = 1434U.toFieldId()
			val setFactoryInteriorZoneForce: FieldId = 1435U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1433U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEntranceId(it.toUInt8()!!, sender)
			}
		),
		1434U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetFactoryInteriorZone(it.toUInt32()!!, sender)
			}
		),
		1435U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetFactoryInteriorZoneForce(it.toUInt32()!!, sender)
			}
		),
	)

	fun setEntranceId(arg0: UByte, ) {
		setField(1433U.toFieldId(), arg0.toFieldValue())
	}

	fun setFactoryInteriorZone(arg0: UInt, ) {
		setField(1434U.toFieldId(), arg0.toFieldValue())
	}

	fun setFactoryInteriorZoneForce(arg0: UInt, ) {
		setField(1435U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetEntranceId(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetFactoryInteriorZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetFactoryInteriorZoneForce(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedMintElevatorExt(doId: DOId): DistributedObjectBase(doId, 247U.toDClassId()) {
	companion object {
		val dClassId = 247U.toDClassId()

		object Fields {
			val setMintId: FieldId = 1436U.toFieldId()
			val setMintInteriorZone: FieldId = 1437U.toFieldId()
			val setMintInteriorZoneForce: FieldId = 1438U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1436U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMintId(it.toUInt16()!!, sender)
			}
		),
		1437U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetMintInteriorZone(it.toUInt32()!!, sender)
			}
		),
		1438U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetMintInteriorZoneForce(it.toUInt32()!!, sender)
			}
		),
	)

	fun setMintId(arg0: UShort, ) {
		setField(1436U.toFieldId(), arg0.toFieldValue())
	}

	fun setMintInteriorZone(arg0: UInt, ) {
		setField(1437U.toFieldId(), arg0.toFieldValue())
	}

	fun setMintInteriorZoneForce(arg0: UInt, ) {
		setField(1438U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetMintId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetMintInteriorZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetMintInteriorZoneForce(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedCogdoElevatorExt(doId: DOId): DistributedObjectBase(doId, 248U.toDClassId()) {
	companion object {
		val dClassId = 248U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedLawOfficeElevatorInt(doId: DOId): DistributedObjectBase(doId, 249U.toDClassId()) {
	companion object {
		val dClassId = 249U.toDClassId()

		object Fields {
			val setLawOfficeInteriorZone: FieldId = 1439U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1439U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetLawOfficeInteriorZone(it.toUInt32()!!, sender)
			}
		),
	)

	fun setLawOfficeInteriorZone(arg0: UInt, ) {
		setField(1439U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetLawOfficeInteriorZone(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedCogdoElevatorInt(doId: DOId): DistributedObjectBase(doId, 250U.toDClassId()) {
	companion object {
		val dClassId = 250U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedBossElevator(doId: DOId): DistributedObjectBase(doId, 251U.toDClassId()) {
	companion object {
		val dClassId = 251U.toDClassId()

		object Fields {
			val setBossOfficeZone: FieldId = 1440U.toFieldId()
			val setBossOfficeZoneForce: FieldId = 1441U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1440U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetBossOfficeZone(it.toUInt32()!!, sender)
			}
		),
		1441U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetBossOfficeZoneForce(it.toUInt32()!!, sender)
			}
		),
	)

	fun setBossOfficeZone(arg0: UInt, ) {
		setField(1440U.toFieldId(), arg0.toFieldValue())
	}

	fun setBossOfficeZoneForce(arg0: UInt, ) {
		setField(1441U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetBossOfficeZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBossOfficeZoneForce(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedVPElevator(doId: DOId): DistributedObjectBase(doId, 252U.toDClassId()) {
	companion object {
		val dClassId = 252U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedCFOElevator(doId: DOId): DistributedObjectBase(doId, 253U.toDClassId()) {
	companion object {
		val dClassId = 253U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedCJElevator(doId: DOId): DistributedObjectBase(doId, 254U.toDClassId()) {
	companion object {
		val dClassId = 254U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedBBElevator(doId: DOId): DistributedObjectBase(doId, 255U.toDClassId()) {
	companion object {
		val dClassId = 255U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedBoardingParty(doId: DOId): DistributedObjectBase(doId, 256U.toDClassId()) {
	companion object {
		val dClassId = 256U.toDClassId()

		object Fields {
			val postGroupInfo: FieldId = 1442U.toFieldId()
			val informDestinationInfo: FieldId = 1443U.toFieldId()
			val postDestinationInfo: FieldId = 1444U.toFieldId()
			val postInvite: FieldId = 1445U.toFieldId()
			val postInviteCanceled: FieldId = 1446U.toFieldId()
			val postKick: FieldId = 1447U.toFieldId()
			val postKickReject: FieldId = 1448U.toFieldId()
			val postSizeReject: FieldId = 1449U.toFieldId()
			val postInviteAccepted: FieldId = 1450U.toFieldId()
			val postInviteDelcined: FieldId = 1451U.toFieldId()
			val postInviteNotQualify: FieldId = 1452U.toFieldId()
			val postAlreadyInGroup: FieldId = 1453U.toFieldId()
			val postGroupDissolve: FieldId = 1454U.toFieldId()
			val postMessageAcceptanceFailed: FieldId = 1455U.toFieldId()
			val postGroupAlreadyFull: FieldId = 1456U.toFieldId()
			val postSomethingMissing: FieldId = 1457U.toFieldId()
			val postRejectBoard: FieldId = 1458U.toFieldId()
			val postRejectGoto: FieldId = 1459U.toFieldId()
			val postMessageInvited: FieldId = 1460U.toFieldId()
			val postMessageInvitationFailed: FieldId = 1461U.toFieldId()
			val acceptGoToFirstTime: FieldId = 1462U.toFieldId()
			val acceptGoToSecondTime: FieldId = 1463U.toFieldId()
			val rejectGoToRequest: FieldId = 1464U.toFieldId()
			val requestInvite: FieldId = 1465U.toFieldId()
			val requestCancelInvite: FieldId = 1466U.toFieldId()
			val requestAcceptInvite: FieldId = 1467U.toFieldId()
			val requestRejectInvite: FieldId = 1468U.toFieldId()
			val requestKick: FieldId = 1469U.toFieldId()
			val requestLeave: FieldId = 1470U.toFieldId()
			val requestBoard: FieldId = 1471U.toFieldId()
			val requestGoToFirstTime: FieldId = 1472U.toFieldId()
			val requestGoToSecondTime: FieldId = 1473U.toFieldId()
			val setElevatorIdList: FieldId = 1474U.toFieldId()
			val setGroupSize: FieldId = 1475U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1442U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				val t3 = values[3].toList()!!.map { it.toUInt32()!! }
				onPostGroupInfo(t0, t1, t2, t3, sender)
				}
			}
		),
		1443U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onInformDestinationInfo(it.toUInt8()!!, sender)
			}
		),
		1444U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPostDestinationInfo(it.toUInt8()!!, sender)
			}
		),
		1445U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onPostInvite(t0, t1, sender)
				}
			}
		),
		1446U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPostInviteCanceled(sender)
			}
		),
		1447U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPostKick(it.toUInt32()!!, sender)
			}
		),
		1448U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onPostKickReject(t0, t1, t2, sender)
				}
			}
		),
		1449U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onPostSizeReject(t0, t1, t2, sender)
				}
			}
		),
		1450U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPostInviteAccepted(it.toUInt32()!!, sender)
			}
		),
		1451U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPostInviteDelcined(it.toUInt32()!!, sender)
			}
		),
		1452U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt32()!!
				onPostInviteNotQualify(t0, t1, t2, sender)
				}
			}
		),
		1453U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPostAlreadyInGroup(sender)
			}
		),
		1454U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				val t3 = values[3].toUInt8()!!
				onPostGroupDissolve(t0, t1, t2, t3, sender)
				}
			}
		),
		1455U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				onPostMessageAcceptanceFailed(t0, t1, sender)
				}
			}
		),
		1456U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPostGroupAlreadyFull(sender)
			}
		),
		1457U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPostSomethingMissing(sender)
			}
		),
		1458U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				val t3 = values[3].toList()!!.map { it.toUInt32()!! }
				onPostRejectBoard(t0, t1, t2, t3, sender)
				}
			}
		),
		1459U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				val t3 = values[3].toList()!!.map { it.toUInt32()!! }
				onPostRejectGoto(t0, t1, t2, t3, sender)
				}
			}
		),
		1460U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onPostMessageInvited(t0, t1, sender)
				}
			}
		),
		1461U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPostMessageInvitationFailed(it.toUInt32()!!, sender)
			}
		),
		1462U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAcceptGoToFirstTime(it.toUInt32()!!, sender)
			}
		),
		1463U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAcceptGoToSecondTime(it.toUInt32()!!, sender)
			}
		),
		1464U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				val t3 = values[3].toList()!!.map { it.toUInt32()!! }
				onRejectGoToRequest(t0, t1, t2, t3, sender)
				}
			}
		),
		1465U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestInvite(it.toUInt32()!!, sender)
			}
		),
		1466U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestCancelInvite(it.toUInt32()!!, sender)
			}
		),
		1467U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRequestAcceptInvite(t0, t1, sender)
				}
			}
		),
		1468U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRequestRejectInvite(t0, t1, sender)
				}
			}
		),
		1469U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestKick(it.toUInt32()!!, sender)
			}
		),
		1470U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestLeave(it.toUInt32()!!, sender)
			}
		),
		1471U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBoard(it.toUInt32()!!, sender)
			}
		),
		1472U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestGoToFirstTime(it.toUInt32()!!, sender)
			}
		),
		1473U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestGoToSecondTime(it.toUInt32()!!, sender)
			}
		),
		1474U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetElevatorIdList(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1475U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGroupSize(it.toUInt8()!!, sender)
			}
		),
	)

	fun postGroupInfo(arg0: UInt, arg1: List<UInt>, arg2: List<UInt>, arg3: List<UInt>, ) {
		setField(1442U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg3.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun informDestinationInfo(arg0: UByte, ) {
		setField(1443U.toFieldId(), arg0.toFieldValue())
	}

	fun postDestinationInfo(arg0: UByte, ) {
		setField(1444U.toFieldId(), arg0.toFieldValue())
	}

	fun postInvite(arg0: UInt, arg1: UInt, ) {
		setField(1445U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun postInviteCanceled() {
		setField(1446U.toFieldId(), FieldValue.EmptyValue)
	}

	fun postKick(arg0: UInt, ) {
		setField(1447U.toFieldId(), arg0.toFieldValue())
	}

	fun postKickReject(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(1448U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun postSizeReject(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(1449U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun postInviteAccepted(arg0: UInt, ) {
		setField(1450U.toFieldId(), arg0.toFieldValue())
	}

	fun postInviteDelcined(arg0: UInt, ) {
		setField(1451U.toFieldId(), arg0.toFieldValue())
	}

	fun postInviteNotQualify(arg0: UInt, arg1: Byte, arg2: UInt, ) {
		setField(1452U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun postAlreadyInGroup() {
		setField(1453U.toFieldId(), FieldValue.EmptyValue)
	}

	fun postGroupDissolve(arg0: UInt, arg1: UInt, arg2: List<UInt>, arg3: UByte, ) {
		setField(1454U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun postMessageAcceptanceFailed(arg0: UInt, arg1: Byte, ) {
		setField(1455U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun postGroupAlreadyFull() {
		setField(1456U.toFieldId(), FieldValue.EmptyValue)
	}

	fun postSomethingMissing() {
		setField(1457U.toFieldId(), FieldValue.EmptyValue)
	}

	fun postRejectBoard(arg0: UInt, arg1: Byte, arg2: List<UInt>, arg3: List<UInt>, ) {
		setField(1458U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg3.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun postRejectGoto(arg0: UInt, arg1: Byte, arg2: List<UInt>, arg3: List<UInt>, ) {
		setField(1459U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg3.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun postMessageInvited(arg0: UInt, arg1: UInt, ) {
		setField(1460U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun postMessageInvitationFailed(arg0: UInt, ) {
		setField(1461U.toFieldId(), arg0.toFieldValue())
	}

	fun acceptGoToFirstTime(arg0: UInt, ) {
		setField(1462U.toFieldId(), arg0.toFieldValue())
	}

	fun acceptGoToSecondTime(arg0: UInt, ) {
		setField(1463U.toFieldId(), arg0.toFieldValue())
	}

	fun rejectGoToRequest(arg0: UInt, arg1: Byte, arg2: List<UInt>, arg3: List<UInt>, ) {
		setField(1464U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg3.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun requestInvite(arg0: UInt, ) {
		setField(1465U.toFieldId(), arg0.toFieldValue())
	}

	fun requestCancelInvite(arg0: UInt, ) {
		setField(1466U.toFieldId(), arg0.toFieldValue())
	}

	fun requestAcceptInvite(arg0: UInt, arg1: UInt, ) {
		setField(1467U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestRejectInvite(arg0: UInt, arg1: UInt, ) {
		setField(1468U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestKick(arg0: UInt, ) {
		setField(1469U.toFieldId(), arg0.toFieldValue())
	}

	fun requestLeave(arg0: UInt, ) {
		setField(1470U.toFieldId(), arg0.toFieldValue())
	}

	fun requestBoard(arg0: UInt, ) {
		setField(1471U.toFieldId(), arg0.toFieldValue())
	}

	fun requestGoToFirstTime(arg0: UInt, ) {
		setField(1472U.toFieldId(), arg0.toFieldValue())
	}

	fun requestGoToSecondTime(arg0: UInt, ) {
		setField(1473U.toFieldId(), arg0.toFieldValue())
	}

	fun setElevatorIdList(arg0: List<UInt>, ) {
		setField(1474U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setGroupSize(arg0: UByte, ) {
		setField(1475U.toFieldId(), arg0.toFieldValue())
	}

	open fun onPostGroupInfo(arg0: UInt, arg1: List<UInt>, arg2: List<UInt>, arg3: List<UInt>, sender: ChannelId? = null) {}
	open fun onInformDestinationInfo(arg0: UByte, sender: ChannelId? = null) {}
	open fun onPostDestinationInfo(arg0: UByte, sender: ChannelId? = null) {}
	open fun onPostInvite(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onPostInviteCanceled(sender: ChannelId? = null) {}
	open fun onPostKick(arg0: UInt, sender: ChannelId? = null) {}
	open fun onPostKickReject(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onPostSizeReject(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onPostInviteAccepted(arg0: UInt, sender: ChannelId? = null) {}
	open fun onPostInviteDelcined(arg0: UInt, sender: ChannelId? = null) {}
	open fun onPostInviteNotQualify(arg0: UInt, arg1: Byte, arg2: UInt, sender: ChannelId? = null) {}
	open fun onPostAlreadyInGroup(sender: ChannelId? = null) {}
	open fun onPostGroupDissolve(arg0: UInt, arg1: UInt, arg2: List<UInt>, arg3: UByte, sender: ChannelId? = null) {}
	open fun onPostMessageAcceptanceFailed(arg0: UInt, arg1: Byte, sender: ChannelId? = null) {}
	open fun onPostGroupAlreadyFull(sender: ChannelId? = null) {}
	open fun onPostSomethingMissing(sender: ChannelId? = null) {}
	open fun onPostRejectBoard(arg0: UInt, arg1: Byte, arg2: List<UInt>, arg3: List<UInt>, sender: ChannelId? = null) {}
	open fun onPostRejectGoto(arg0: UInt, arg1: Byte, arg2: List<UInt>, arg3: List<UInt>, sender: ChannelId? = null) {}
	open fun onPostMessageInvited(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onPostMessageInvitationFailed(arg0: UInt, sender: ChannelId? = null) {}
	open fun onAcceptGoToFirstTime(arg0: UInt, sender: ChannelId? = null) {}
	open fun onAcceptGoToSecondTime(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRejectGoToRequest(arg0: UInt, arg1: Byte, arg2: List<UInt>, arg3: List<UInt>, sender: ChannelId? = null) {}
	open fun onRequestInvite(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestCancelInvite(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestAcceptInvite(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onRequestRejectInvite(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onRequestKick(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestLeave(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestBoard(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestGoToFirstTime(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestGoToSecondTime(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetElevatorIdList(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetGroupSize(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedTutorialInterior(doId: DOId): DistributedObjectBase(doId, 257U.toDClassId()) {
	companion object {
		val dClassId = 257U.toDClassId()

		object Fields {
			val setZoneIdAndBlock: FieldId = 1476U.toFieldId()
			val setTutorialNpcId: FieldId = 1477U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1476U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetZoneIdAndBlock(t0, t1, sender)
				}
			}
		),
		1477U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTutorialNpcId(it.toUInt32()!!, sender)
			}
		),
	)

	fun setZoneIdAndBlock(arg0: UInt, arg1: UShort, ) {
		setField(1476U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setTutorialNpcId(arg0: UInt, ) {
		setField(1477U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetZoneIdAndBlock(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetTutorialNpcId(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedBankMgr(doId: DOId): DistributedObjectBase(doId, 258U.toDClassId()) {
	companion object {
		val dClassId = 258U.toDClassId()

		object Fields {
			val transferMoney: FieldId = 1478U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1478U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTransferMoney(it.toInt16()!!, sender)
			}
		),
	)

	fun transferMoney(arg0: Short, ) {
		setField(1478U.toFieldId(), arg0.toFieldValue())
	}

	open fun onTransferMoney(arg0: Short, sender: ChannelId? = null) {}
}

open class DistributedMailbox(doId: DOId): DistributedObjectBase(doId, 259U.toDClassId()) {
	companion object {
		val dClassId = 259U.toDClassId()

		object Fields {
			val setHouseId: FieldId = 1479U.toFieldId()
			val setHousePos: FieldId = 1480U.toFieldId()
			val setName: FieldId = 1481U.toFieldId()
			val setFullIndicator: FieldId = 1482U.toFieldId()
			val avatarEnter: FieldId = 1483U.toFieldId()
			val avatarExit: FieldId = 1484U.toFieldId()
			val freeAvatar: FieldId = 1485U.toFieldId()
			val setMovie: FieldId = 1486U.toFieldId()
			val acceptItemMessage: FieldId = 1487U.toFieldId()
			val acceptItemResponse: FieldId = 1488U.toFieldId()
			val discardItemMessage: FieldId = 1489U.toFieldId()
			val discardItemResponse: FieldId = 1490U.toFieldId()
			val acceptInviteMessage: FieldId = 1491U.toFieldId()
			val rejectInviteMessage: FieldId = 1492U.toFieldId()
			val markInviteReadButNotReplied: FieldId = 1493U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1479U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHouseId(it.toUInt32()!!, sender)
			}
		),
		1480U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHousePos(it.toUInt8()!!, sender)
			}
		),
		1481U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetName(it.toStringValue()!!, sender)
			}
		),
		1482U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFullIndicator(it.toUInt8()!!, sender)
			}
		),
		1483U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarEnter(sender)
			}
		),
		1484U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarExit(sender)
			}
		),
		1485U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onFreeAvatar(sender)
			}
		),
		1486U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onSetMovie(t0, t1, sender)
				}
			}
		),
		1487U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Blob, FieldValue.Type.UInt8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toBlob()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toInt32()!!
				onAcceptItemMessage(t0, t1, t2, t3, sender)
				}
			}
		),
		1488U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toInt8()!!
				onAcceptItemResponse(t0, t1, sender)
				}
			}
		),
		1489U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Blob, FieldValue.Type.UInt8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toBlob()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toInt32()!!
				onDiscardItemMessage(t0, t1, t2, t3, sender)
				}
			}
		),
		1490U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toInt8()!!
				onDiscardItemResponse(t0, t1, sender)
				}
			}
		),
		1491U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt64, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt64()!!
				onAcceptInviteMessage(t0, t1, sender)
				}
			}
		),
		1492U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt64, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt64()!!
				onRejectInviteMessage(t0, t1, sender)
				}
			}
		),
		1493U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt64,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onMarkInviteReadButNotReplied(it.toUInt64()!!, sender)
			}
		),
	)

	fun setHouseId(arg0: UInt, ) {
		setField(1479U.toFieldId(), arg0.toFieldValue())
	}

	fun setHousePos(arg0: UByte, ) {
		setField(1480U.toFieldId(), arg0.toFieldValue())
	}

	fun setName(arg0: String, ) {
		setField(1481U.toFieldId(), arg0.toFieldValue())
	}

	fun setFullIndicator(arg0: UByte, ) {
		setField(1482U.toFieldId(), arg0.toFieldValue())
	}

	fun avatarEnter() {
		setField(1483U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarExit() {
		setField(1484U.toFieldId(), FieldValue.EmptyValue)
	}

	fun freeAvatar() {
		setField(1485U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setMovie(arg0: UByte, arg1: UInt, ) {
		setField(1486U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun acceptItemMessage(arg0: UShort, arg1: ByteArray, arg2: UByte, arg3: Int, ) {
		setField(1487U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun acceptItemResponse(arg0: UShort, arg1: Byte, ) {
		setField(1488U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun discardItemMessage(arg0: UShort, arg1: ByteArray, arg2: UByte, arg3: Int, ) {
		setField(1489U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun discardItemResponse(arg0: UShort, arg1: Byte, ) {
		setField(1490U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun acceptInviteMessage(arg0: UShort, arg1: ULong, ) {
		setField(1491U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun rejectInviteMessage(arg0: UShort, arg1: ULong, ) {
		setField(1492U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun markInviteReadButNotReplied(arg0: ULong, ) {
		setField(1493U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetHouseId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetHousePos(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetName(arg0: String, sender: ChannelId? = null) {}
	open fun onSetFullIndicator(arg0: UByte, sender: ChannelId? = null) {}
	open fun onAvatarEnter(sender: ChannelId? = null) {}
	open fun onAvatarExit(sender: ChannelId? = null) {}
	open fun onFreeAvatar(sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
	open fun onAcceptItemMessage(arg0: UShort, arg1: ByteArray, arg2: UByte, arg3: Int, sender: ChannelId? = null) {}
	open fun onAcceptItemResponse(arg0: UShort, arg1: Byte, sender: ChannelId? = null) {}
	open fun onDiscardItemMessage(arg0: UShort, arg1: ByteArray, arg2: UByte, arg3: Int, sender: ChannelId? = null) {}
	open fun onDiscardItemResponse(arg0: UShort, arg1: Byte, sender: ChannelId? = null) {}
	open fun onAcceptInviteMessage(arg0: UShort, arg1: ULong, sender: ChannelId? = null) {}
	open fun onRejectInviteMessage(arg0: UShort, arg1: ULong, sender: ChannelId? = null) {}
	open fun onMarkInviteReadButNotReplied(arg0: ULong, sender: ChannelId? = null) {}
}

open class DistributedFurnitureManager(doId: DOId): DistributedObjectBase(doId, 260U.toDClassId()) {
	companion object {
		val dClassId = 260U.toDClassId()

		object Fields {
			val setOwnerId: FieldId = 1494U.toFieldId()
			val setOwnerName: FieldId = 1495U.toFieldId()
			val setInteriorId: FieldId = 1496U.toFieldId()
			val setAtticItems: FieldId = 1497U.toFieldId()
			val setAtticWallpaper: FieldId = 1498U.toFieldId()
			val setAtticWindows: FieldId = 1499U.toFieldId()
			val setDeletedItems: FieldId = 1500U.toFieldId()
			val suggestDirector: FieldId = 1501U.toFieldId()
			val setDirector: FieldId = 1502U.toFieldId()
			val avatarEnter: FieldId = 1503U.toFieldId()
			val avatarExit: FieldId = 1504U.toFieldId()
			val moveItemToAtticMessage: FieldId = 1505U.toFieldId()
			val moveItemToAtticResponse: FieldId = 1506U.toFieldId()
			val moveItemFromAtticMessage: FieldId = 1507U.toFieldId()
			val moveItemFromAtticResponse: FieldId = 1508U.toFieldId()
			val deleteItemFromAtticMessage: FieldId = 1509U.toFieldId()
			val deleteItemFromAtticResponse: FieldId = 1510U.toFieldId()
			val deleteItemFromRoomMessage: FieldId = 1511U.toFieldId()
			val deleteItemFromRoomResponse: FieldId = 1512U.toFieldId()
			val moveWallpaperFromAtticMessage: FieldId = 1513U.toFieldId()
			val moveWallpaperFromAtticResponse: FieldId = 1514U.toFieldId()
			val deleteWallpaperFromAtticMessage: FieldId = 1515U.toFieldId()
			val deleteWallpaperFromAtticResponse: FieldId = 1516U.toFieldId()
			val moveWindowToAtticMessage: FieldId = 1517U.toFieldId()
			val moveWindowToAtticResponse: FieldId = 1518U.toFieldId()
			val moveWindowFromAtticMessage: FieldId = 1519U.toFieldId()
			val moveWindowFromAtticResponse: FieldId = 1520U.toFieldId()
			val moveWindowMessage: FieldId = 1521U.toFieldId()
			val moveWindowResponse: FieldId = 1522U.toFieldId()
			val deleteWindowFromAtticMessage: FieldId = 1523U.toFieldId()
			val deleteWindowFromAtticResponse: FieldId = 1524U.toFieldId()
			val recoverDeletedItemMessage: FieldId = 1525U.toFieldId()
			val recoverDeletedItemResponse: FieldId = 1526U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1494U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOwnerId(it.toUInt32()!!, sender)
			}
		),
		1495U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOwnerName(it.toStringValue()!!, sender)
			}
		),
		1496U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetInteriorId(it.toUInt32()!!, sender)
			}
		),
		1497U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAtticItems(it.toBlob()!!, sender)
			}
		),
		1498U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAtticWallpaper(it.toBlob()!!, sender)
			}
		),
		1499U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAtticWindows(it.toBlob()!!, sender)
			}
		),
		1500U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDeletedItems(it.toBlob()!!, sender)
			}
		),
		1501U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSuggestDirector(it.toUInt32()!!, sender)
			}
		),
		1502U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDirector(it.toUInt32()!!, sender)
			}
		),
		1503U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarEnter(sender)
			}
		),
		1504U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarExit(sender)
			}
		),
		1505U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onMoveItemToAtticMessage(t0, t1, sender)
				}
			}
		),
		1506U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt16()!!
				onMoveItemToAtticResponse(t0, t1, sender)
				}
			}
		),
		1507U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				val t6 = values[6].toInt16()!!.transform {
						divide(10.0f)
					}
				val t7 = values[7].toUInt16()!!
				onMoveItemFromAtticMessage(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		1508U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt16()!!
				onMoveItemFromAtticResponse(t0, t1, t2, sender)
				}
			}
		),
		1509U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toUInt16()!!
				onDeleteItemFromAtticMessage(t0, t1, t2, sender)
				}
			}
		),
		1510U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt16()!!
				onDeleteItemFromAtticResponse(t0, t1, sender)
				}
			}
		),
		1511U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt16()!!
				onDeleteItemFromRoomMessage(t0, t1, t2, sender)
				}
			}
		),
		1512U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt16()!!
				onDeleteItemFromRoomResponse(t0, t1, sender)
				}
			}
		),
		1513U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt16()!!
				onMoveWallpaperFromAtticMessage(t0, t1, t2, sender)
				}
			}
		),
		1514U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt16()!!
				onMoveWallpaperFromAtticResponse(t0, t1, sender)
				}
			}
		),
		1515U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toUInt16()!!
				onDeleteWallpaperFromAtticMessage(t0, t1, t2, sender)
				}
			}
		),
		1516U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt16()!!
				onDeleteWallpaperFromAtticResponse(t0, t1, sender)
				}
			}
		),
		1517U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt16()!!
				onMoveWindowToAtticMessage(t0, t1, sender)
				}
			}
		),
		1518U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt16()!!
				onMoveWindowToAtticResponse(t0, t1, sender)
				}
			}
		),
		1519U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt16()!!
				onMoveWindowFromAtticMessage(t0, t1, t2, sender)
				}
			}
		),
		1520U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt16()!!
				onMoveWindowFromAtticResponse(t0, t1, sender)
				}
			}
		),
		1521U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt16()!!
				onMoveWindowMessage(t0, t1, t2, sender)
				}
			}
		),
		1522U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt16()!!
				onMoveWindowResponse(t0, t1, sender)
				}
			}
		),
		1523U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toUInt16()!!
				onDeleteWindowFromAtticMessage(t0, t1, t2, sender)
				}
			}
		),
		1524U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt16()!!
				onDeleteWindowFromAtticResponse(t0, t1, sender)
				}
			}
		),
		1525U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toUInt16()!!
				onRecoverDeletedItemMessage(t0, t1, t2, sender)
				}
			}
		),
		1526U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt16()!!
				onRecoverDeletedItemResponse(t0, t1, sender)
				}
			}
		),
	)

	fun setOwnerId(arg0: UInt, ) {
		setField(1494U.toFieldId(), arg0.toFieldValue())
	}

	fun setOwnerName(arg0: String, ) {
		setField(1495U.toFieldId(), arg0.toFieldValue())
	}

	fun setInteriorId(arg0: UInt, ) {
		setField(1496U.toFieldId(), arg0.toFieldValue())
	}

	fun setAtticItems(arg0: ByteArray, ) {
		setField(1497U.toFieldId(), arg0.toFieldValue())
	}

	fun setAtticWallpaper(arg0: ByteArray, ) {
		setField(1498U.toFieldId(), arg0.toFieldValue())
	}

	fun setAtticWindows(arg0: ByteArray, ) {
		setField(1499U.toFieldId(), arg0.toFieldValue())
	}

	fun setDeletedItems(arg0: ByteArray, ) {
		setField(1500U.toFieldId(), arg0.toFieldValue())
	}

	fun suggestDirector(arg0: UInt, ) {
		setField(1501U.toFieldId(), arg0.toFieldValue())
	}

	fun setDirector(arg0: UInt, ) {
		setField(1502U.toFieldId(), arg0.toFieldValue())
	}

	fun avatarEnter() {
		setField(1503U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarExit() {
		setField(1504U.toFieldId(), FieldValue.EmptyValue)
	}

	fun moveItemToAtticMessage(arg0: UInt, arg1: UShort, ) {
		setField(1505U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun moveItemToAtticResponse(arg0: Byte, arg1: UShort, ) {
		setField(1506U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun moveItemFromAtticMessage(arg0: UShort, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: UShort, ) {
		setField(1507U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg7.toFieldValue(), 
				))
	}

	fun moveItemFromAtticResponse(arg0: Byte, arg1: UInt, arg2: UShort, ) {
		setField(1508U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun deleteItemFromAtticMessage(arg0: ByteArray, arg1: UShort, arg2: UShort, ) {
		setField(1509U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun deleteItemFromAtticResponse(arg0: Byte, arg1: UShort, ) {
		setField(1510U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun deleteItemFromRoomMessage(arg0: ByteArray, arg1: UInt, arg2: UShort, ) {
		setField(1511U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun deleteItemFromRoomResponse(arg0: Byte, arg1: UShort, ) {
		setField(1512U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun moveWallpaperFromAtticMessage(arg0: UShort, arg1: UByte, arg2: UShort, ) {
		setField(1513U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun moveWallpaperFromAtticResponse(arg0: Byte, arg1: UShort, ) {
		setField(1514U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun deleteWallpaperFromAtticMessage(arg0: ByteArray, arg1: UShort, arg2: UShort, ) {
		setField(1515U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun deleteWallpaperFromAtticResponse(arg0: Byte, arg1: UShort, ) {
		setField(1516U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun moveWindowToAtticMessage(arg0: UByte, arg1: UShort, ) {
		setField(1517U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun moveWindowToAtticResponse(arg0: Byte, arg1: UShort, ) {
		setField(1518U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun moveWindowFromAtticMessage(arg0: UShort, arg1: UByte, arg2: UShort, ) {
		setField(1519U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun moveWindowFromAtticResponse(arg0: Byte, arg1: UShort, ) {
		setField(1520U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun moveWindowMessage(arg0: UByte, arg1: UByte, arg2: UShort, ) {
		setField(1521U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun moveWindowResponse(arg0: Byte, arg1: UShort, ) {
		setField(1522U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun deleteWindowFromAtticMessage(arg0: ByteArray, arg1: UShort, arg2: UShort, ) {
		setField(1523U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun deleteWindowFromAtticResponse(arg0: Byte, arg1: UShort, ) {
		setField(1524U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun recoverDeletedItemMessage(arg0: ByteArray, arg1: UShort, arg2: UShort, ) {
		setField(1525U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun recoverDeletedItemResponse(arg0: Byte, arg1: UShort, ) {
		setField(1526U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetOwnerId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetOwnerName(arg0: String, sender: ChannelId? = null) {}
	open fun onSetInteriorId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetAtticItems(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetAtticWallpaper(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetAtticWindows(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetDeletedItems(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSuggestDirector(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDirector(arg0: UInt, sender: ChannelId? = null) {}
	open fun onAvatarEnter(sender: ChannelId? = null) {}
	open fun onAvatarExit(sender: ChannelId? = null) {}
	open fun onMoveItemToAtticMessage(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onMoveItemToAtticResponse(arg0: Byte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onMoveItemFromAtticMessage(arg0: UShort, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: UShort, sender: ChannelId? = null) {}
	open fun onMoveItemFromAtticResponse(arg0: Byte, arg1: UInt, arg2: UShort, sender: ChannelId? = null) {}
	open fun onDeleteItemFromAtticMessage(arg0: ByteArray, arg1: UShort, arg2: UShort, sender: ChannelId? = null) {}
	open fun onDeleteItemFromAtticResponse(arg0: Byte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onDeleteItemFromRoomMessage(arg0: ByteArray, arg1: UInt, arg2: UShort, sender: ChannelId? = null) {}
	open fun onDeleteItemFromRoomResponse(arg0: Byte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onMoveWallpaperFromAtticMessage(arg0: UShort, arg1: UByte, arg2: UShort, sender: ChannelId? = null) {}
	open fun onMoveWallpaperFromAtticResponse(arg0: Byte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onDeleteWallpaperFromAtticMessage(arg0: ByteArray, arg1: UShort, arg2: UShort, sender: ChannelId? = null) {}
	open fun onDeleteWallpaperFromAtticResponse(arg0: Byte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onMoveWindowToAtticMessage(arg0: UByte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onMoveWindowToAtticResponse(arg0: Byte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onMoveWindowFromAtticMessage(arg0: UShort, arg1: UByte, arg2: UShort, sender: ChannelId? = null) {}
	open fun onMoveWindowFromAtticResponse(arg0: Byte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onMoveWindowMessage(arg0: UByte, arg1: UByte, arg2: UShort, sender: ChannelId? = null) {}
	open fun onMoveWindowResponse(arg0: Byte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onDeleteWindowFromAtticMessage(arg0: ByteArray, arg1: UShort, arg2: UShort, sender: ChannelId? = null) {}
	open fun onDeleteWindowFromAtticResponse(arg0: Byte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onRecoverDeletedItemMessage(arg0: ByteArray, arg1: UShort, arg2: UShort, sender: ChannelId? = null) {}
	open fun onRecoverDeletedItemResponse(arg0: Byte, arg1: UShort, sender: ChannelId? = null) {}
}

open class DistributedFurnitureItem(doId: DOId): DistributedObjectBase(doId, 261U.toDClassId()) {
	companion object {
		val dClassId = 261U.toDClassId()

		object Fields {
			val setItem: FieldId = 1527U.toFieldId()
			val requestPosHpr: FieldId = 1528U.toFieldId()
			val setMode: FieldId = 1529U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1527U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toBlob()!!
				onSetItem(t0, t1, sender)
				}
			}
		),
		1528U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				val t6 = values[6].toInt16()!!.transform {
						divide(10.0f)
					}
				val t7 = values[7].toInt16()!!
				onRequestPosHpr(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		1529U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onSetMode(t0, t1, sender)
				}
			}
		),
	)

	fun setItem(arg0: UInt, arg1: ByteArray, ) {
		setField(1527U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestPosHpr(arg0: UByte, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Short, ) {
		setField(1528U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg7.toFieldValue(), 
				))
	}

	fun setMode(arg0: UByte, arg1: UInt, ) {
		setField(1529U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetItem(arg0: UInt, arg1: ByteArray, sender: ChannelId? = null) {}
	open fun onRequestPosHpr(arg0: UByte, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Short, sender: ChannelId? = null) {}
	open fun onSetMode(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
}

open class DistributedBank(doId: DOId): DistributedObjectBase(doId, 262U.toDClassId()) {
	companion object {
		val dClassId = 262U.toDClassId()

		object Fields {
			val avatarEnter: FieldId = 1530U.toFieldId()
			val freeAvatar: FieldId = 1531U.toFieldId()
			val setMovie: FieldId = 1532U.toFieldId()
			val transferMoney: FieldId = 1533U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1530U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarEnter(sender)
			}
		),
		1531U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onFreeAvatar(sender)
			}
		),
		1532U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt16()!!
				onSetMovie(t0, t1, t2, sender)
				}
			}
		),
		1533U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTransferMoney(it.toInt16()!!, sender)
			}
		),
	)

	fun avatarEnter() {
		setField(1530U.toFieldId(), FieldValue.EmptyValue)
	}

	fun freeAvatar() {
		setField(1531U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setMovie(arg0: UByte, arg1: UInt, arg2: Short, ) {
		setField(1532U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun transferMoney(arg0: Short, ) {
		setField(1533U.toFieldId(), arg0.toFieldValue())
	}

	open fun onAvatarEnter(sender: ChannelId? = null) {}
	open fun onFreeAvatar(sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: Short, sender: ChannelId? = null) {}
	open fun onTransferMoney(arg0: Short, sender: ChannelId? = null) {}
}

open class DistributedCloset(doId: DOId): DistributedObjectBase(doId, 263U.toDClassId()) {
	companion object {
		val dClassId = 263U.toDClassId()

		object Fields {
			val setOwnerId: FieldId = 1534U.toFieldId()
			val enterAvatar: FieldId = 1535U.toFieldId()
			val freeAvatar: FieldId = 1536U.toFieldId()
			val removeItem: FieldId = 1537U.toFieldId()
			val setDNA: FieldId = 1538U.toFieldId()
			val setState: FieldId = 1539U.toFieldId()
			val setMovie: FieldId = 1540U.toFieldId()
			val resetItemLists: FieldId = 1541U.toFieldId()
			val setCustomerDNA: FieldId = 1542U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1534U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOwnerId(it.toUInt32()!!, sender)
			}
		),
		1535U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onEnterAvatar(sender)
			}
		),
		1536U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onFreeAvatar(sender)
			}
		),
		1537U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toUInt8()!!
				onRemoveItem(t0, t1, sender)
				}
			}
		),
		1538U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.Int8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt8()!!
				onSetDNA(t0, t1, t2, sender)
				}
			}
		),
		1539U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toStringValue()!!
				val t4 = values[4].toList()!!.map { it.toUInt8()!! }
				val t5 = values[5].toList()!!.map { it.toUInt8()!! }
				onSetState(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		1540U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt16()!!
				onSetMovie(t0, t1, t2, sender)
				}
			}
		),
		1541U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onResetItemLists(sender)
			}
		),
		1542U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toBlob()!!
				onSetCustomerDNA(t0, t1, sender)
				}
			}
		),
	)

	fun setOwnerId(arg0: UInt, ) {
		setField(1534U.toFieldId(), arg0.toFieldValue())
	}

	fun enterAvatar() {
		setField(1535U.toFieldId(), FieldValue.EmptyValue)
	}

	fun freeAvatar() {
		setField(1536U.toFieldId(), FieldValue.EmptyValue)
	}

	fun removeItem(arg0: ByteArray, arg1: UByte, ) {
		setField(1537U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setDNA(arg0: ByteArray, arg1: Byte, arg2: UByte, ) {
		setField(1538U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setState(arg0: UByte, arg1: UInt, arg2: UInt, arg3: String, arg4: List<UByte>, arg5: List<UByte>, ) {
		setField(1539U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg4.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg5.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setMovie(arg0: UByte, arg1: UInt, arg2: Short, ) {
		setField(1540U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun resetItemLists() {
		setField(1541U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setCustomerDNA(arg0: UInt, arg1: ByteArray, ) {
		setField(1542U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetOwnerId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onEnterAvatar(sender: ChannelId? = null) {}
	open fun onFreeAvatar(sender: ChannelId? = null) {}
	open fun onRemoveItem(arg0: ByteArray, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetDNA(arg0: ByteArray, arg1: Byte, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetState(arg0: UByte, arg1: UInt, arg2: UInt, arg3: String, arg4: List<UByte>, arg5: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: Short, sender: ChannelId? = null) {}
	open fun onResetItemLists(sender: ChannelId? = null) {}
	open fun onSetCustomerDNA(arg0: UInt, arg1: ByteArray, sender: ChannelId? = null) {}
}

open class DistributedTrunk(doId: DOId): DistributedObjectBase(doId, 264U.toDClassId()) {
	companion object {
		val dClassId = 264U.toDClassId()

		object Fields {
			val setState: FieldId = 1543U.toFieldId()
			val removeItem: FieldId = 1544U.toFieldId()
			val setDNA: FieldId = 1545U.toFieldId()
			val setCustomerDNA: FieldId = 1546U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1543U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toStringValue()!!
				val t4 = values[4].toList()!!.map { it.toUInt8()!! }
				val t5 = values[5].toList()!!.map { it.toUInt8()!! }
				val t6 = values[6].toList()!!.map { it.toUInt8()!! }
				val t7 = values[7].toList()!!.map { it.toUInt8()!! }
				onSetState(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		1544U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				onRemoveItem(t0, t1, t2, t3, sender)
				}
			}
		),
		1545U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				val t4 = values[4].toUInt8()!!
				val t5 = values[5].toUInt8()!!
				val t6 = values[6].toUInt8()!!
				val t7 = values[7].toUInt8()!!
				val t8 = values[8].toUInt8()!!
				val t9 = values[9].toUInt8()!!
				val t10 = values[10].toUInt8()!!
				val t11 = values[11].toUInt8()!!
				val t12 = values[12].toInt8()!!
				val t13 = values[13].toUInt8()!!
				onSetDNA(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, sender)
				}
			}
		),
		1546U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				val t4 = values[4].toUInt8()!!
				val t5 = values[5].toUInt8()!!
				val t6 = values[6].toUInt8()!!
				val t7 = values[7].toUInt8()!!
				val t8 = values[8].toUInt8()!!
				val t9 = values[9].toUInt8()!!
				val t10 = values[10].toUInt8()!!
				val t11 = values[11].toUInt8()!!
				val t12 = values[12].toUInt8()!!
				val t13 = values[13].toUInt8()!!
				onSetCustomerDNA(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, sender)
				}
			}
		),
	)

	fun setState(arg0: UByte, arg1: UInt, arg2: UInt, arg3: String, arg4: List<UByte>, arg5: List<UByte>, arg6: List<UByte>, arg7: List<UByte>, ) {
		setField(1543U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg4.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg5.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg6.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg7.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun removeItem(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, ) {
		setField(1544U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setDNA(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, arg4: UByte, arg5: UByte, arg6: UByte, arg7: UByte, arg8: UByte, arg9: UByte, arg10: UByte, arg11: UByte, arg12: Byte, arg13: UByte, ) {
		setField(1545U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
			arg7.toFieldValue(), 
			arg8.toFieldValue(), 
			arg9.toFieldValue(), 
			arg10.toFieldValue(), 
			arg11.toFieldValue(), 
			arg12.toFieldValue(), 
			arg13.toFieldValue(), 
				))
	}

	fun setCustomerDNA(arg0: UInt, arg1: UByte, arg2: UByte, arg3: UByte, arg4: UByte, arg5: UByte, arg6: UByte, arg7: UByte, arg8: UByte, arg9: UByte, arg10: UByte, arg11: UByte, arg12: UByte, arg13: UByte, ) {
		setField(1546U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
			arg7.toFieldValue(), 
			arg8.toFieldValue(), 
			arg9.toFieldValue(), 
			arg10.toFieldValue(), 
			arg11.toFieldValue(), 
			arg12.toFieldValue(), 
			arg13.toFieldValue(), 
				))
	}

	open fun onSetState(arg0: UByte, arg1: UInt, arg2: UInt, arg3: String, arg4: List<UByte>, arg5: List<UByte>, arg6: List<UByte>, arg7: List<UByte>, sender: ChannelId? = null) {}
	open fun onRemoveItem(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, sender: ChannelId? = null) {}
	open fun onSetDNA(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, arg4: UByte, arg5: UByte, arg6: UByte, arg7: UByte, arg8: UByte, arg9: UByte, arg10: UByte, arg11: UByte, arg12: Byte, arg13: UByte, sender: ChannelId? = null) {}
	open fun onSetCustomerDNA(arg0: UInt, arg1: UByte, arg2: UByte, arg3: UByte, arg4: UByte, arg5: UByte, arg6: UByte, arg7: UByte, arg8: UByte, arg9: UByte, arg10: UByte, arg11: UByte, arg12: UByte, arg13: UByte, sender: ChannelId? = null) {}
}

open class DistributedPhone(doId: DOId): DistributedObjectBase(doId, 265U.toDClassId()) {
	companion object {
		val dClassId = 265U.toDClassId()

		object Fields {
			val setInitialScale: FieldId = 1547U.toFieldId()
			val setNewScale: FieldId = 1548U.toFieldId()
			val avatarEnter: FieldId = 1549U.toFieldId()
			val avatarExit: FieldId = 1550U.toFieldId()
			val freeAvatar: FieldId = 1551U.toFieldId()
			val setLimits: FieldId = 1552U.toFieldId()
			val setMovie: FieldId = 1553U.toFieldId()
			val requestPurchaseMessage: FieldId = 1554U.toFieldId()
			val requestPurchaseResponse: FieldId = 1555U.toFieldId()
			val requestGiftPurchaseMessage: FieldId = 1556U.toFieldId()
			val requestGiftPurchaseResponse: FieldId = 1557U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1547U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!.transform {
						divide(170.0f)
					}
				val t1 = values[1].toUInt8()!!.transform {
						divide(170.0f)
					}
				val t2 = values[2].toUInt8()!!.transform {
						divide(170.0f)
					}
				onSetInitialScale(t0, t1, t2, sender)
				}
			}
		),
		1548U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!.transform {
						divide(170.0f)
					}
				val t1 = values[1].toUInt8()!!.transform {
						divide(170.0f)
					}
				val t2 = values[2].toUInt8()!!.transform {
						divide(170.0f)
					}
				onSetNewScale(t0, t1, t2, sender)
				}
			}
		),
		1549U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarEnter(sender)
			}
		),
		1550U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarExit(sender)
			}
		),
		1551U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onFreeAvatar(sender)
			}
		),
		1552U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetLimits(it.toUInt16()!!, sender)
			}
		),
		1553U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt32()!!
				onSetMovie(t0, t1, t2, sender)
				}
			}
		),
		1554U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Blob, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toBlob()!!
				val t2 = values[2].toInt32()!!
				onRequestPurchaseMessage(t0, t1, t2, sender)
				}
			}
		),
		1555U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toInt8()!!
				onRequestPurchaseResponse(t0, t1, sender)
				}
			}
		),
		1556U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt32, FieldValue.Type.Blob, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toBlob()!!
				val t3 = values[3].toInt32()!!
				onRequestGiftPurchaseMessage(t0, t1, t2, t3, sender)
				}
			}
		),
		1557U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toInt8()!!
				onRequestGiftPurchaseResponse(t0, t1, sender)
				}
			}
		),
	)

	fun setInitialScale(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(1547U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.UInt8) {
			divide(170.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt8) {
			divide(170.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt8) {
			divide(170.0f)
		}.toFieldValue(), 
				))
	}

	fun setNewScale(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(1548U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.UInt8) {
			divide(170.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt8) {
			divide(170.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt8) {
			divide(170.0f)
		}.toFieldValue(), 
				))
	}

	fun avatarEnter() {
		setField(1549U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarExit() {
		setField(1550U.toFieldId(), FieldValue.EmptyValue)
	}

	fun freeAvatar() {
		setField(1551U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setLimits(arg0: UShort, ) {
		setField(1552U.toFieldId(), arg0.toFieldValue())
	}

	fun setMovie(arg0: UByte, arg1: UInt, arg2: Int, ) {
		setField(1553U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestPurchaseMessage(arg0: UShort, arg1: ByteArray, arg2: Int, ) {
		setField(1554U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestPurchaseResponse(arg0: UShort, arg1: Byte, ) {
		setField(1555U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestGiftPurchaseMessage(arg0: UShort, arg1: UInt, arg2: ByteArray, arg3: Int, ) {
		setField(1556U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun requestGiftPurchaseResponse(arg0: UShort, arg1: Byte, ) {
		setField(1557U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetInitialScale(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetNewScale(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onAvatarEnter(sender: ChannelId? = null) {}
	open fun onAvatarExit(sender: ChannelId? = null) {}
	open fun onFreeAvatar(sender: ChannelId? = null) {}
	open fun onSetLimits(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: Int, sender: ChannelId? = null) {}
	open fun onRequestPurchaseMessage(arg0: UShort, arg1: ByteArray, arg2: Int, sender: ChannelId? = null) {}
	open fun onRequestPurchaseResponse(arg0: UShort, arg1: Byte, sender: ChannelId? = null) {}
	open fun onRequestGiftPurchaseMessage(arg0: UShort, arg1: UInt, arg2: ByteArray, arg3: Int, sender: ChannelId? = null) {}
	open fun onRequestGiftPurchaseResponse(arg0: UShort, arg1: Byte, sender: ChannelId? = null) {}
}

open class DistributedFireworkShow(doId: DOId): DistributedObjectBase(doId, 266U.toDClassId()) {
	companion object {
		val dClassId = 266U.toDClassId()

		object Fields {
			val startShow: FieldId = 1558U.toFieldId()
			val requestFirework: FieldId = 1559U.toFieldId()
			val shootFirework: FieldId = 1560U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1558U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toInt16()!!
				onStartShow(t0, t1, t2, sender)
				}
			}
		),
		1559U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toUInt8()!!
				val t4 = values[4].toUInt8()!!
				val t5 = values[5].toUInt8()!!
				onRequestFirework(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		1560U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toUInt8()!!
				val t4 = values[4].toUInt8()!!
				val t5 = values[5].toUInt8()!!
				onShootFirework(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
	)

	fun startShow(arg0: UByte, arg1: UByte, arg2: Short, ) {
		setField(1558U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestFirework(arg0: Double, arg1: Double, arg2: Double, arg3: UByte, arg4: UByte, arg5: UByte, ) {
		setField(1559U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
				))
	}

	fun shootFirework(arg0: Double, arg1: Double, arg2: Double, arg3: UByte, arg4: UByte, arg5: UByte, ) {
		setField(1560U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
				))
	}

	open fun onStartShow(arg0: UByte, arg1: UByte, arg2: Short, sender: ChannelId? = null) {}
	open fun onRequestFirework(arg0: Double, arg1: Double, arg2: Double, arg3: UByte, arg4: UByte, arg5: UByte, sender: ChannelId? = null) {}
	open fun onShootFirework(arg0: Double, arg1: Double, arg2: Double, arg3: UByte, arg4: UByte, arg5: UByte, sender: ChannelId? = null) {}
}

open class DistributedFireworksCannon(doId: DOId): DistributedObjectBase(doId, 267U.toDClassId()) {
	companion object {
		val dClassId = 267U.toDClassId()

		object Fields {
			val avatarEnter: FieldId = 1561U.toFieldId()
			val avatarExit: FieldId = 1562U.toFieldId()
			val freeAvatar: FieldId = 1563U.toFieldId()
			val setMovie: FieldId = 1564U.toFieldId()
			val setPosition: FieldId = 1565U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1561U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarEnter(sender)
			}
		),
		1562U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAvatarExit(sender)
			}
		),
		1563U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onFreeAvatar(sender)
			}
		),
		1564U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt16()!!
				onSetMovie(t0, t1, t2, sender)
				}
			}
		),
		1565U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosition(t0, t1, t2, sender)
				}
			}
		),
	)

	fun avatarEnter() {
		setField(1561U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avatarExit() {
		setField(1562U.toFieldId(), FieldValue.EmptyValue)
	}

	fun freeAvatar() {
		setField(1563U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setMovie(arg0: UByte, arg1: UInt, arg2: Short, ) {
		setField(1564U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setPosition(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(1565U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	open fun onAvatarEnter(sender: ChannelId? = null) {}
	open fun onAvatarExit(sender: ChannelId? = null) {}
	open fun onFreeAvatar(sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetPosition(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
}

open class LobbyManager(doId: DOId): DistributedObjectBase(doId, 268U.toDClassId()) {
	companion object {
		val dClassId = 268U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedFactory(doId: DOId): DistributedObjectBase(doId, 269U.toDClassId()) {
	companion object {
		val dClassId = 269U.toDClassId()

		object Fields {
			val setFactoryId: FieldId = 1566U.toFieldId()
			val setSuits: FieldId = 1567U.toFieldId()
			val setForemanConfronted: FieldId = 1568U.toFieldId()
			val setDefeated: FieldId = 1569U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1566U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFactoryId(it.toUInt16()!!, sender)
			}
		),
		1567U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onSetSuits(t0, t1, sender)
				}
			}
		),
		1568U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetForemanConfronted(it.toUInt32()!!, sender)
			}
		),
		1569U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDefeated(sender)
			}
		),
	)

	fun setFactoryId(arg0: UShort, ) {
		setField(1566U.toFieldId(), arg0.toFieldValue())
	}

	fun setSuits(arg0: List<UInt>, arg1: List<UInt>, ) {
		setField(1567U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setForemanConfronted(arg0: UInt, ) {
		setField(1568U.toFieldId(), arg0.toFieldValue())
	}

	fun setDefeated() {
		setField(1569U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetFactoryId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetSuits(arg0: List<UInt>, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetForemanConfronted(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDefeated(sender: ChannelId? = null) {}
}

open class DistributedLawOffice(doId: DOId): DistributedObjectBase(doId, 270U.toDClassId()) {
	companion object {
		val dClassId = 270U.toDClassId()

		object Fields {
			val setLawOfficeId: FieldId = 1570U.toFieldId()
			val startSignal: FieldId = 1571U.toFieldId()
			val readyForNextFloor: FieldId = 1572U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1570U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLawOfficeId(it.toUInt16()!!, sender)
			}
		),
		1571U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onStartSignal(sender)
			}
		),
		1572U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReadyForNextFloor(sender)
			}
		),
	)

	fun setLawOfficeId(arg0: UShort, ) {
		setField(1570U.toFieldId(), arg0.toFieldValue())
	}

	fun startSignal() {
		setField(1571U.toFieldId(), FieldValue.EmptyValue)
	}

	fun readyForNextFloor() {
		setField(1572U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetLawOfficeId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onStartSignal(sender: ChannelId? = null) {}
	open fun onReadyForNextFloor(sender: ChannelId? = null) {}
}

open class DistributedLawOfficeFloor(doId: DOId): DistributedObjectBase(doId, 271U.toDClassId()) {
	companion object {
		val dClassId = 271U.toDClassId()

		object Fields {
			val setLawOfficeId: FieldId = 1573U.toFieldId()
			val setSuits: FieldId = 1574U.toFieldId()
			val readyForNextFloor: FieldId = 1575U.toFieldId()
			val setForemanConfronted: FieldId = 1576U.toFieldId()
			val setDefeated: FieldId = 1577U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1573U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLawOfficeId(it.toUInt16()!!, sender)
			}
		),
		1574U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onSetSuits(t0, t1, sender)
				}
			}
		),
		1575U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReadyForNextFloor(sender)
			}
		),
		1576U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetForemanConfronted(it.toUInt32()!!, sender)
			}
		),
		1577U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDefeated(sender)
			}
		),
	)

	fun setLawOfficeId(arg0: UShort, ) {
		setField(1573U.toFieldId(), arg0.toFieldValue())
	}

	fun setSuits(arg0: List<UInt>, arg1: List<UInt>, ) {
		setField(1574U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun readyForNextFloor() {
		setField(1575U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setForemanConfronted(arg0: UInt, ) {
		setField(1576U.toFieldId(), arg0.toFieldValue())
	}

	fun setDefeated() {
		setField(1577U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetLawOfficeId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetSuits(arg0: List<UInt>, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onReadyForNextFloor(sender: ChannelId? = null) {}
	open fun onSetForemanConfronted(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDefeated(sender: ChannelId? = null) {}
}

open class DistributedMint(doId: DOId): DistributedObjectBase(doId, 272U.toDClassId()) {
	companion object {
		val dClassId = 272U.toDClassId()

		object Fields {
			val setZoneId: FieldId = 1578U.toFieldId()
			val setMintId: FieldId = 1579U.toFieldId()
			val setFloorNum: FieldId = 1580U.toFieldId()
			val setRoomDoIds: FieldId = 1581U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1578U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetZoneId(it.toUInt32()!!, sender)
			}
		),
		1579U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMintId(it.toUInt16()!!, sender)
			}
		),
		1580U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFloorNum(it.toUInt8()!!, sender)
			}
		),
		1581U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoomDoIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
	)

	fun setZoneId(arg0: UInt, ) {
		setField(1578U.toFieldId(), arg0.toFieldValue())
	}

	fun setMintId(arg0: UShort, ) {
		setField(1579U.toFieldId(), arg0.toFieldValue())
	}

	fun setFloorNum(arg0: UByte, ) {
		setField(1580U.toFieldId(), arg0.toFieldValue())
	}

	fun setRoomDoIds(arg0: List<UInt>, ) {
		setField(1581U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	open fun onSetZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetMintId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetFloorNum(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetRoomDoIds(arg0: List<UInt>, sender: ChannelId? = null) {}
}

open class DistributedMintRoom(doId: DOId): DistributedObjectBase(doId, 273U.toDClassId()) {
	companion object {
		val dClassId = 273U.toDClassId()

		object Fields {
			val setMintId: FieldId = 1582U.toFieldId()
			val setRoomId: FieldId = 1583U.toFieldId()
			val setRoomNum: FieldId = 1584U.toFieldId()
			val setSuits: FieldId = 1585U.toFieldId()
			val setBossConfronted: FieldId = 1586U.toFieldId()
			val setDefeated: FieldId = 1587U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1582U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMintId(it.toUInt16()!!, sender)
			}
		),
		1583U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoomId(it.toUInt16()!!, sender)
			}
		),
		1584U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoomNum(it.toUInt8()!!, sender)
			}
		),
		1585U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onSetSuits(t0, t1, sender)
				}
			}
		),
		1586U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossConfronted(it.toUInt32()!!, sender)
			}
		),
		1587U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDefeated(sender)
			}
		),
	)

	fun setMintId(arg0: UShort, ) {
		setField(1582U.toFieldId(), arg0.toFieldValue())
	}

	fun setRoomId(arg0: UShort, ) {
		setField(1583U.toFieldId(), arg0.toFieldValue())
	}

	fun setRoomNum(arg0: UByte, ) {
		setField(1584U.toFieldId(), arg0.toFieldValue())
	}

	fun setSuits(arg0: List<UInt>, arg1: List<UInt>, ) {
		setField(1585U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setBossConfronted(arg0: UInt, ) {
		setField(1586U.toFieldId(), arg0.toFieldValue())
	}

	fun setDefeated() {
		setField(1587U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetMintId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetRoomId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetRoomNum(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetSuits(arg0: List<UInt>, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetBossConfronted(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDefeated(sender: ChannelId? = null) {}
}

open class DistributedStage(doId: DOId): DistributedObjectBase(doId, 274U.toDClassId()) {
	companion object {
		val dClassId = 274U.toDClassId()

		object Fields {
			val setZoneId: FieldId = 1588U.toFieldId()
			val setStageId: FieldId = 1589U.toFieldId()
			val setLayoutIndex: FieldId = 1590U.toFieldId()
			val setFloorNum: FieldId = 1591U.toFieldId()
			val setRoomDoIds: FieldId = 1592U.toFieldId()
			val setStageZone: FieldId = 1593U.toFieldId()
			val elevatorAlert: FieldId = 1594U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1588U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetZoneId(it.toUInt32()!!, sender)
			}
		),
		1589U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetStageId(it.toUInt16()!!, sender)
			}
		),
		1590U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLayoutIndex(it.toUInt16()!!, sender)
			}
		),
		1591U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFloorNum(it.toUInt8()!!, sender)
			}
		),
		1592U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoomDoIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1593U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetStageZone(it.toUInt32()!!, sender)
			}
		),
		1594U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onElevatorAlert(it.toUInt32()!!, sender)
			}
		),
	)

	fun setZoneId(arg0: UInt, ) {
		setField(1588U.toFieldId(), arg0.toFieldValue())
	}

	fun setStageId(arg0: UShort, ) {
		setField(1589U.toFieldId(), arg0.toFieldValue())
	}

	fun setLayoutIndex(arg0: UShort, ) {
		setField(1590U.toFieldId(), arg0.toFieldValue())
	}

	fun setFloorNum(arg0: UByte, ) {
		setField(1591U.toFieldId(), arg0.toFieldValue())
	}

	fun setRoomDoIds(arg0: List<UInt>, ) {
		setField(1592U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setStageZone(arg0: UInt, ) {
		setField(1593U.toFieldId(), arg0.toFieldValue())
	}

	fun elevatorAlert(arg0: UInt, ) {
		setField(1594U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetStageId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetLayoutIndex(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetFloorNum(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetRoomDoIds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetStageZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onElevatorAlert(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedStageRoom(doId: DOId): DistributedObjectBase(doId, 275U.toDClassId()) {
	companion object {
		val dClassId = 275U.toDClassId()

		object Fields {
			val setStageId: FieldId = 1595U.toFieldId()
			val setRoomId: FieldId = 1596U.toFieldId()
			val setRoomNum: FieldId = 1597U.toFieldId()
			val setSuits: FieldId = 1598U.toFieldId()
			val setBossConfronted: FieldId = 1599U.toFieldId()
			val setDefeated: FieldId = 1600U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1595U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetStageId(it.toUInt16()!!, sender)
			}
		),
		1596U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoomId(it.toUInt16()!!, sender)
			}
		),
		1597U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoomNum(it.toUInt8()!!, sender)
			}
		),
		1598U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onSetSuits(t0, t1, sender)
				}
			}
		),
		1599U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossConfronted(it.toUInt32()!!, sender)
			}
		),
		1600U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDefeated(sender)
			}
		),
	)

	fun setStageId(arg0: UShort, ) {
		setField(1595U.toFieldId(), arg0.toFieldValue())
	}

	fun setRoomId(arg0: UShort, ) {
		setField(1596U.toFieldId(), arg0.toFieldValue())
	}

	fun setRoomNum(arg0: UByte, ) {
		setField(1597U.toFieldId(), arg0.toFieldValue())
	}

	fun setSuits(arg0: List<UInt>, arg1: List<UInt>, ) {
		setField(1598U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setBossConfronted(arg0: UInt, ) {
		setField(1599U.toFieldId(), arg0.toFieldValue())
	}

	fun setDefeated() {
		setField(1600U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetStageId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetRoomId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetRoomNum(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetSuits(arg0: List<UInt>, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetBossConfronted(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDefeated(sender: ChannelId? = null) {}
}

open class DistributedInGameEditor(doId: DOId): DistributedObjectBase(doId, 276U.toDClassId()) {
	companion object {
		val dClassId = 276U.toDClassId()

		object Fields {
			val setEditorAvId: FieldId = 1601U.toFieldId()
			val setEditUsername: FieldId = 1602U.toFieldId()
			val setLevelDoId: FieldId = 1603U.toFieldId()
			val requestCurrentLevelSpec: FieldId = 1604U.toFieldId()
			val setSpecSenderDoId: FieldId = 1605U.toFieldId()
			val setEdit: FieldId = 1606U.toFieldId()
			val setAttribChange: FieldId = 1607U.toFieldId()
			val setFinished: FieldId = 1608U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1601U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEditorAvId(it.toUInt32()!!, sender)
			}
		),
		1602U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEditUsername(it.toBlob()!!, sender)
			}
		),
		1603U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLevelDoId(it.toUInt32()!!, sender)
			}
		),
		1604U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestCurrentLevelSpec(sender)
			}
		),
		1605U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetSpecSenderDoId(it.toUInt32()!!, sender)
			}
		),
		1606U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, FieldValue.Type.Blob, FieldValue.Type.Blob, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toBlob()!!
				val t2 = values[2].toBlob()!!
				val t3 = values[3].toBlob()!!
				onSetEdit(t0, t1, t2, t3, sender)
				}
			}
		),
		1607U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, FieldValue.Type.Blob, FieldValue.Type.Blob, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toBlob()!!
				val t2 = values[2].toBlob()!!
				val t3 = values[3].toBlob()!!
				onSetAttribChange(t0, t1, t2, t3, sender)
				}
			}
		),
		1608U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetFinished(sender)
			}
		),
	)

	fun setEditorAvId(arg0: UInt, ) {
		setField(1601U.toFieldId(), arg0.toFieldValue())
	}

	fun setEditUsername(arg0: ByteArray, ) {
		setField(1602U.toFieldId(), arg0.toFieldValue())
	}

	fun setLevelDoId(arg0: UInt, ) {
		setField(1603U.toFieldId(), arg0.toFieldValue())
	}

	fun requestCurrentLevelSpec() {
		setField(1604U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setSpecSenderDoId(arg0: UInt, ) {
		setField(1605U.toFieldId(), arg0.toFieldValue())
	}

	fun setEdit(arg0: UInt, arg1: ByteArray, arg2: ByteArray, arg3: ByteArray, ) {
		setField(1606U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setAttribChange(arg0: UInt, arg1: ByteArray, arg2: ByteArray, arg3: ByteArray, ) {
		setField(1607U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setFinished() {
		setField(1608U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetEditorAvId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetEditUsername(arg0: ByteArray, sender: ChannelId? = null) {}
	open fun onSetLevelDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestCurrentLevelSpec(sender: ChannelId? = null) {}
	open fun onSetSpecSenderDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetEdit(arg0: UInt, arg1: ByteArray, arg2: ByteArray, arg3: ByteArray, sender: ChannelId? = null) {}
	open fun onSetAttribChange(arg0: UInt, arg1: ByteArray, arg2: ByteArray, arg3: ByteArray, sender: ChannelId? = null) {}
	open fun onSetFinished(sender: ChannelId? = null) {}
}

open class DistributedLift(doId: DOId): DistributedObjectBase(doId, 277U.toDClassId()) {
	companion object {
		val dClassId = 277U.toDClassId()

		object Fields {
			val setStateTransition: FieldId = 1609U.toFieldId()
			val setAvatarEnter: FieldId = 1610U.toFieldId()
			val setAvatarLeave: FieldId = 1611U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1609U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt32()!!
				onSetStateTransition(t0, t1, t2, sender)
				}
			}
		),
		1610U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarEnter(sender)
			}
		),
		1611U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarLeave(sender)
			}
		),
	)

	fun setStateTransition(arg0: UByte, arg1: UByte, arg2: UInt, ) {
		setField(1609U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setAvatarEnter() {
		setField(1610U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setAvatarLeave() {
		setField(1611U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetStateTransition(arg0: UByte, arg1: UByte, arg2: UInt, sender: ChannelId? = null) {}
	open fun onSetAvatarEnter(sender: ChannelId? = null) {}
	open fun onSetAvatarLeave(sender: ChannelId? = null) {}
}

open class DistributedDoorEntity(doId: DOId): DistributedObjectBase(doId, 278U.toDClassId()) {
	companion object {
		val dClassId = 278U.toDClassId()

		object Fields {
			val setLocksState: FieldId = 1612U.toFieldId()
			val setDoorState: FieldId = 1613U.toFieldId()
			val requestOpen: FieldId = 1614U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1612U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLocksState(it.toUInt16()!!, sender)
			}
		),
		1613U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt32()!!
				onSetDoorState(t0, t1, sender)
				}
			}
		),
		1614U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestOpen(sender)
			}
		),
	)

	fun setLocksState(arg0: UShort, ) {
		setField(1612U.toFieldId(), arg0.toFieldValue())
	}

	fun setDoorState(arg0: UByte, arg1: Int, ) {
		setField(1613U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestOpen() {
		setField(1614U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetLocksState(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetDoorState(arg0: UByte, arg1: Int, sender: ChannelId? = null) {}
	open fun onRequestOpen(sender: ChannelId? = null) {}
}

open class DistributedSwitch(doId: DOId): DistributedObjectBase(doId, 279U.toDClassId()) {
	companion object {
		val dClassId = 279U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedButton(doId: DOId): DistributedObjectBase(doId, 280U.toDClassId()) {
	companion object {
		val dClassId = 280U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedTrigger(doId: DOId): DistributedObjectBase(doId, 281U.toDClassId()) {
	companion object {
		val dClassId = 281U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedCrushableEntity(doId: DOId): DistributedObjectBase(doId, 282U.toDClassId()) {
	companion object {
		val dClassId = 282U.toDClassId()

		object Fields {
			val setPosition: FieldId = 1615U.toFieldId()
			val setCrushed: FieldId = 1616U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1615U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosition(t0, t1, t2, sender)
				}
			}
		),
		1616U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onSetCrushed(t0, t1, sender)
				}
			}
		),
	)

	fun setPosition(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(1615U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setCrushed(arg0: UInt, arg1: UByte, ) {
		setField(1616U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetPosition(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetCrushed(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
}

open class DistributedCrusherEntity(doId: DOId): DistributedObjectBase(doId, 283U.toDClassId()) {
	companion object {
		val dClassId = 283U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedElevatorMarker(doId: DOId): DistributedObjectBase(doId, 284U.toDClassId()) {
	companion object {
		val dClassId = 284U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedStomper(doId: DOId): DistributedObjectBase(doId, 285U.toDClassId()) {
	companion object {
		val dClassId = 285U.toDClassId()

		object Fields {
			val setMovie: FieldId = 1617U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1617U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				onSetMovie(t0, t1, t2, sender)
				}
			}
		),
	)

	fun setMovie(arg0: UByte, arg1: Short, arg2: List<UInt>, ) {
		setField(1617U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	open fun onSetMovie(arg0: UByte, arg1: Short, arg2: List<UInt>, sender: ChannelId? = null) {}
}

open class DistributedStomperPair(doId: DOId): DistributedObjectBase(doId, 286U.toDClassId()) {
	companion object {
		val dClassId = 286U.toDClassId()

		object Fields {
			val setChildren: FieldId = 1618U.toFieldId()
			val setSquash: FieldId = 1619U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1618U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetChildren(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1619U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetSquash(sender)
			}
		),
	)

	fun setChildren(arg0: List<UInt>, ) {
		setField(1618U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setSquash() {
		setField(1619U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetChildren(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetSquash(sender: ChannelId? = null) {}
}

open class DistributedBarrelBase(doId: DOId): DistributedObjectBase(doId, 287U.toDClassId()) {
	companion object {
		val dClassId = 287U.toDClassId()

		object Fields {
			val requestGrab: FieldId = 1620U.toFieldId()
			val setGrab: FieldId = 1621U.toFieldId()
			val setReject: FieldId = 1622U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1620U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestGrab(sender)
			}
		),
		1621U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGrab(it.toUInt32()!!, sender)
			}
		),
		1622U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetReject(sender)
			}
		),
	)

	fun requestGrab() {
		setField(1620U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setGrab(arg0: UInt, ) {
		setField(1621U.toFieldId(), arg0.toFieldValue())
	}

	fun setReject() {
		setField(1622U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onRequestGrab(sender: ChannelId? = null) {}
	open fun onSetGrab(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetReject(sender: ChannelId? = null) {}
}

open class DistributedGagBarrel(doId: DOId): DistributedObjectBase(doId, 288U.toDClassId()) {
	companion object {
		val dClassId = 288U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedBeanBarrel(doId: DOId): DistributedObjectBase(doId, 289U.toDClassId()) {
	companion object {
		val dClassId = 289U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedHealBarrel(doId: DOId): DistributedObjectBase(doId, 290U.toDClassId()) {
	companion object {
		val dClassId = 290U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedGrid(doId: DOId): DistributedObjectBase(doId, 291U.toDClassId()) {
	companion object {
		val dClassId = 291U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class ActiveCell(doId: DOId): DistributedObjectBase(doId, 292U.toDClassId()) {
	companion object {
		val dClassId = 292U.toDClassId()

		object Fields {
			val setState: FieldId = 1623U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1623U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onSetState(t0, t1, sender)
				}
			}
		),
	)

	fun setState(arg0: UByte, arg1: UInt, ) {
		setField(1623U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetState(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
}

open class DirectionalCell(doId: DOId): DistributedObjectBase(doId, 293U.toDClassId()) {
	companion object {
		val dClassId = 293U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class CrusherCell(doId: DOId): DistributedObjectBase(doId, 294U.toDClassId()) {
	companion object {
		val dClassId = 294U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedCrate(doId: DOId): DistributedObjectBase(doId, 295U.toDClassId()) {
	companion object {
		val dClassId = 295U.toDClassId()

		object Fields {
			val requestPush: FieldId = 1624U.toFieldId()
			val setReject: FieldId = 1625U.toFieldId()
			val setAccept: FieldId = 1626U.toFieldId()
			val setMoveTo: FieldId = 1627U.toFieldId()
			val setDone: FieldId = 1628U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1624U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestPush(it.toUInt8()!!, sender)
			}
		),
		1625U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetReject(sender)
			}
		),
		1626U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAccept(sender)
			}
		),
		1627U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				val t6 = values[6].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetMoveTo(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		1628U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetDone(sender)
			}
		),
	)

	fun requestPush(arg0: UByte, ) {
		setField(1624U.toFieldId(), arg0.toFieldValue())
	}

	fun setReject() {
		setField(1625U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setAccept() {
		setField(1626U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setMoveTo(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, ) {
		setField(1627U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setDone() {
		setField(1628U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onRequestPush(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetReject(sender: ChannelId? = null) {}
	open fun onSetAccept(sender: ChannelId? = null) {}
	open fun onSetMoveTo(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, sender: ChannelId? = null) {}
	open fun onSetDone(sender: ChannelId? = null) {}
}

open class DistributedSinkingPlatform(doId: DOId): DistributedObjectBase(doId, 296U.toDClassId()) {
	companion object {
		val dClassId = 296U.toDClassId()

		object Fields {
			val setOnOff: FieldId = 1629U.toFieldId()
			val setSinkMode: FieldId = 1630U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1629U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onSetOnOff(t0, t1, sender)
				}
			}
		),
		1630U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt32()!!
				onSetSinkMode(t0, t1, t2, sender)
				}
			}
		),
	)

	fun setOnOff(arg0: UByte, arg1: UInt, ) {
		setField(1629U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setSinkMode(arg0: UInt, arg1: UByte, arg2: UInt, ) {
		setField(1630U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onSetOnOff(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetSinkMode(arg0: UInt, arg1: UByte, arg2: UInt, sender: ChannelId? = null) {}
}

open class DistributedGoon(doId: DOId): DistributedObjectBase(doId, 297U.toDClassId()) {
	companion object {
		val dClassId = 297U.toDClassId()

		object Fields {
			val requestBattle: FieldId = 1631U.toFieldId()
			val requestStunned: FieldId = 1632U.toFieldId()
			val requestResync: FieldId = 1633U.toFieldId()
			val setParameterize: FieldId = 1634U.toFieldId()
			val setMovie: FieldId = 1635U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1631U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBattle(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		1632U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestStunned(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		1633U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestResync(sender)
			}
		),
		1634U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toUInt32()!!
				onSetParameterize(t0, t1, t2, t3, sender)
				}
			}
		),
		1635U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt32()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!
				onSetMovie(t0, t1, t2, t3, sender)
				}
			}
		),
	)

	fun requestBattle(arg0: Double, ) {
		setField(1631U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun requestStunned(arg0: Double, ) {
		setField(1632U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun requestResync() {
		setField(1633U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setParameterize(arg0: Double, arg1: Double, arg2: Double, arg3: UInt, ) {
		setField(1634U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setMovie(arg0: UByte, arg1: UInt, arg2: Double, arg3: Short, ) {
		setField(1635U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	open fun onRequestBattle(arg0: Double, sender: ChannelId? = null) {}
	open fun onRequestStunned(arg0: Double, sender: ChannelId? = null) {}
	open fun onRequestResync(sender: ChannelId? = null) {}
	open fun onSetParameterize(arg0: Double, arg1: Double, arg2: Double, arg3: UInt, sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
}

open class DistributedGridGoon(doId: DOId): DistributedObjectBase(doId, 298U.toDClassId()) {
	companion object {
		val dClassId = 298U.toDClassId()

		object Fields {
			val setPathPts: FieldId = 1636U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1636U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPathPts(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
	)

	fun setPathPts(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(1636U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	open fun onSetPathPts(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
}

open class BattleBlocker(doId: DOId): DistributedObjectBase(doId, 299U.toDClassId()) {
	companion object {
		val dClassId = 299U.toDClassId()

		object Fields {
			val setActive: FieldId = 1637U.toFieldId()
			val setSuits: FieldId = 1638U.toFieldId()
			val setBattle: FieldId = 1639U.toFieldId()
			val setBattleFinished: FieldId = 1640U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1637U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetActive(it.toUInt8()!!, sender)
			}
		),
		1638U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSuits(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1639U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBattle(it.toUInt32()!!, sender)
			}
		),
		1640U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBattleFinished(sender)
			}
		),
	)

	fun setActive(arg0: UByte, ) {
		setField(1637U.toFieldId(), arg0.toFieldValue())
	}

	fun setSuits(arg0: List<UInt>, ) {
		setField(1638U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setBattle(arg0: UInt, ) {
		setField(1639U.toFieldId(), arg0.toFieldValue())
	}

	fun setBattleFinished() {
		setField(1640U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetActive(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetSuits(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetBattle(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBattleFinished(sender: ChannelId? = null) {}
}

open class DistributedLaserField(doId: DOId): DistributedObjectBase(doId, 300U.toDClassId()) {
	companion object {
		val dClassId = 300U.toDClassId()

		object Fields {
			val setGrid: FieldId = 1641U.toFieldId()
			val setField: FieldId = 1642U.toFieldId()
			val setSuccess: FieldId = 1643U.toFieldId()
			val hit: FieldId = 1644U.toFieldId()
			val trapFire: FieldId = 1645U.toFieldId()
			val setActiveLF: FieldId = 1646U.toFieldId()
			val hideSuit: FieldId = 1647U.toFieldId()
			val showSuit: FieldId = 1648U.toFieldId()
			val setGridGame: FieldId = 1649U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1641U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onSetGrid(t0, t1, sender)
				}
			}
		),
		1642U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetField(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		1643U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSuccess(it.toUInt8()!!, sender)
			}
		),
		1644U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt8()!!
				onHit(t0, t1, t2, t3, sender)
				}
			}
		),
		1645U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTrapFire(sender)
			}
		),
		1646U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetActiveLF(it.toUInt8()!!, sender)
			}
		),
		1647U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onHideSuit(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1648U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onShowSuit(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1649U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGridGame(it.toStringValue()!!, sender)
			}
		),
	)

	fun setGrid(arg0: UByte, arg1: UByte, ) {
		setField(1641U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setField(arg0: List<UByte>, ) {
		setField(1642U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setSuccess(arg0: UByte, ) {
		setField(1643U.toFieldId(), arg0.toFieldValue())
	}

	fun hit(arg0: Byte, arg1: Byte, arg2: Byte, arg3: Byte, ) {
		setField(1644U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun trapFire() {
		setField(1645U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setActiveLF(arg0: UByte, ) {
		setField(1646U.toFieldId(), arg0.toFieldValue())
	}

	fun hideSuit(arg0: List<UInt>, ) {
		setField(1647U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun showSuit(arg0: List<UInt>, ) {
		setField(1648U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setGridGame(arg0: String, ) {
		setField(1649U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetGrid(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetField(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetSuccess(arg0: UByte, sender: ChannelId? = null) {}
	open fun onHit(arg0: Byte, arg1: Byte, arg2: Byte, arg3: Byte, sender: ChannelId? = null) {}
	open fun onTrapFire(sender: ChannelId? = null) {}
	open fun onSetActiveLF(arg0: UByte, sender: ChannelId? = null) {}
	open fun onHideSuit(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onShowSuit(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetGridGame(arg0: String, sender: ChannelId? = null) {}
}

open class DistributedGolfGreenGame(doId: DOId): DistributedObjectBase(doId, 303U.toDClassId()) {
	companion object {
		val dClassId = 303U.toDClassId()

		object Fields {
			val requestJoin: FieldId = 1655U.toFieldId()
			val leaveGame: FieldId = 1656U.toFieldId()
			val acceptJoin: FieldId = 1657U.toFieldId()
			val requestBoard: FieldId = 1658U.toFieldId()
			val startBoard: FieldId = 1659U.toFieldId()
			val signalDone: FieldId = 1660U.toFieldId()
			val boardCleared: FieldId = 1661U.toFieldId()
			val scoreData: FieldId = 1662U.toFieldId()
			val informGag: FieldId = 1663U.toFieldId()
			val helpOthers: FieldId = 1664U.toFieldId()
			val setTimerStart: FieldId = 1665U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1655U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestJoin(sender)
			}
		),
		1656U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onLeaveGame(sender)
			}
		),
		1657U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toList()!!.map { it.toUInt32()!! }
				onAcceptJoin(t0, t1, t2, sender)
				}
			}
		),
		1658U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBoard(it.toUInt8()!!, sender)
			}
		),
		1659U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.UInt8), ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = with(golfGreenGameBoardData) { values[0].toList()!!.map { fromFieldValue(it) }}
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				onStartBoard(t0, t1, sender)
				}
			}
		),
		1660U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSignalDone(it.toUInt8()!!, sender)
			}
		),
		1661U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onBoardCleared(it.toUInt32()!!, sender)
			}
		),
		1662U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = with(golfGreenGameScoreData) { values[2].toList()!!.map { fromFieldValue(it) }}
				onScoreData(t0, t1, t2, sender)
				}
			}
		),
		1663U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onInformGag(t0, t1, sender)
				}
			}
		),
		1664U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onHelpOthers(it.toUInt32()!!, sender)
			}
		),
		1665U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toInt32()!!
				onSetTimerStart(t0, t1, sender)
				}
			}
		),
	)

	fun requestJoin() {
		setField(1655U.toFieldId(), FieldValue.EmptyValue)
	}

	fun leaveGame() {
		setField(1656U.toFieldId(), FieldValue.EmptyValue)
	}

	fun acceptJoin(arg0: UShort, arg1: Int, arg2: List<UInt>, ) {
		setField(1657U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg2.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun requestBoard(arg0: UByte, ) {
		setField(1658U.toFieldId(), arg0.toFieldValue())
	}

	fun startBoard(arg0: List<golfGreenGameBoardData>, arg1: List<UByte>, ) {
		setField(1659U.toFieldId(), FieldValue.TupleValue(
			with(golfGreenGameBoardData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), arg0.map { it.toFieldValue() }).toFieldValue()}, 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun signalDone(arg0: UByte, ) {
		setField(1660U.toFieldId(), arg0.toFieldValue())
	}

	fun boardCleared(arg0: UInt, ) {
		setField(1661U.toFieldId(), arg0.toFieldValue())
	}

	fun scoreData(arg0: UByte, arg1: UByte, arg2: List<golfGreenGameScoreData>, ) {
		setField(1662U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			with(golfGreenGameScoreData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ), arg2.map { it.toFieldValue() }).toFieldValue()}, 
				))
	}

	fun informGag(arg0: UByte, arg1: UByte, ) {
		setField(1663U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun helpOthers(arg0: UInt, ) {
		setField(1664U.toFieldId(), arg0.toFieldValue())
	}

	fun setTimerStart(arg0: UShort, arg1: Int, ) {
		setField(1665U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onRequestJoin(sender: ChannelId? = null) {}
	open fun onLeaveGame(sender: ChannelId? = null) {}
	open fun onAcceptJoin(arg0: UShort, arg1: Int, arg2: List<UInt>, sender: ChannelId? = null) {}
	open fun onRequestBoard(arg0: UByte, sender: ChannelId? = null) {}
	open fun onStartBoard(arg0: List<golfGreenGameBoardData>, arg1: List<UByte>, sender: ChannelId? = null) {}
	open fun onSignalDone(arg0: UByte, sender: ChannelId? = null) {}
	open fun onBoardCleared(arg0: UInt, sender: ChannelId? = null) {}
	open fun onScoreData(arg0: UByte, arg1: UByte, arg2: List<golfGreenGameScoreData>, sender: ChannelId? = null) {}
	open fun onInformGag(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onHelpOthers(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetTimerStart(arg0: UShort, arg1: Int, sender: ChannelId? = null) {}
}

open class DistributedSecurityCamera(doId: DOId): DistributedObjectBase(doId, 304U.toDClassId()) {
	companion object {
		val dClassId = 304U.toDClassId()

		object Fields {
			val trapFire: FieldId = 1666U.toFieldId()
			val setTarget: FieldId = 1667U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1666U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTrapFire(sender)
			}
		),
		1667U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTarget(it.toUInt8()!!, sender)
			}
		),
	)

	fun trapFire() {
		setField(1666U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setTarget(arg0: UByte, ) {
		setField(1667U.toFieldId(), arg0.toFieldValue())
	}

	open fun onTrapFire(sender: ChannelId? = null) {}
	open fun onSetTarget(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedMover(doId: DOId): DistributedObjectBase(doId, 305U.toDClassId()) {
	companion object {
		val dClassId = 305U.toDClassId()

		object Fields {
			val startMove: FieldId = 1668U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1668U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onStartMove(it.toInt16()!!, sender)
			}
		),
	)

	fun startMove(arg0: Short, ) {
		setField(1668U.toFieldId(), arg0.toFieldValue())
	}

	open fun onStartMove(arg0: Short, sender: ChannelId? = null) {}
}

open class DistributedPet(doId: DOId): DistributedObjectBase(doId, 306U.toDClassId()) {
	companion object {
		val dClassId = 306U.toDClassId()

		object Fields {
			val DcObjectType: FieldId = 1669U.toFieldId()
			val setOwnerId: FieldId = 1670U.toFieldId()
			val setPetName: FieldId = 1671U.toFieldId()
			val setTraitSeed: FieldId = 1672U.toFieldId()
			val setSafeZone: FieldId = 1673U.toFieldId()
			val setForgetfulness: FieldId = 1674U.toFieldId()
			val setBoredomThreshold: FieldId = 1675U.toFieldId()
			val setRestlessnessThreshold: FieldId = 1676U.toFieldId()
			val setPlayfulnessThreshold: FieldId = 1677U.toFieldId()
			val setLonelinessThreshold: FieldId = 1678U.toFieldId()
			val setSadnessThreshold: FieldId = 1679U.toFieldId()
			val setFatigueThreshold: FieldId = 1680U.toFieldId()
			val setHungerThreshold: FieldId = 1681U.toFieldId()
			val setConfusionThreshold: FieldId = 1682U.toFieldId()
			val setExcitementThreshold: FieldId = 1683U.toFieldId()
			val setAngerThreshold: FieldId = 1684U.toFieldId()
			val setSurpriseThreshold: FieldId = 1685U.toFieldId()
			val setAffectionThreshold: FieldId = 1686U.toFieldId()
			val setHead: FieldId = 1687U.toFieldId()
			val setEars: FieldId = 1688U.toFieldId()
			val setNose: FieldId = 1689U.toFieldId()
			val setTail: FieldId = 1690U.toFieldId()
			val setBodyTexture: FieldId = 1691U.toFieldId()
			val setColor: FieldId = 1692U.toFieldId()
			val setColorScale: FieldId = 1693U.toFieldId()
			val setEyeColor: FieldId = 1694U.toFieldId()
			val setGender: FieldId = 1695U.toFieldId()
			val setLastSeenTimestamp: FieldId = 1696U.toFieldId()
			val setBoredom: FieldId = 1697U.toFieldId()
			val setRestlessness: FieldId = 1698U.toFieldId()
			val setPlayfulness: FieldId = 1699U.toFieldId()
			val setLoneliness: FieldId = 1700U.toFieldId()
			val setSadness: FieldId = 1701U.toFieldId()
			val setAffection: FieldId = 1702U.toFieldId()
			val setHunger: FieldId = 1703U.toFieldId()
			val setConfusion: FieldId = 1704U.toFieldId()
			val setExcitement: FieldId = 1705U.toFieldId()
			val setFatigue: FieldId = 1706U.toFieldId()
			val setAnger: FieldId = 1707U.toFieldId()
			val setSurprise: FieldId = 1708U.toFieldId()
			val setMood: FieldId = 1709U.toFieldId()
			val teleportIn: FieldId = 1710U.toFieldId()
			val teleportOut: FieldId = 1711U.toFieldId()
			val setTrickAptitudes: FieldId = 1712U.toFieldId()
			val doTrick: FieldId = 1713U.toFieldId()
			val avatarInteract: FieldId = 1714U.toFieldId()
			val setMovie: FieldId = 1715U.toFieldId()
			val freeAvatar: FieldId = 1716U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1669U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					db = true,
				)
			),
			onChange = { it, sender ->
				onSetDcObjectType(it.toStringValue()!!, sender)
			}
		),
		1670U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOwnerId(it.toUInt32()!!, sender)
			}
		),
		1671U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPetName(it.toStringValue()!!, sender)
			}
		),
		1672U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTraitSeed(it.toUInt32()!!, sender)
			}
		),
		1673U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSafeZone(it.toUInt32()!!, sender)
			}
		),
		1674U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetForgetfulness(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1675U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBoredomThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1676U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRestlessnessThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1677U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPlayfulnessThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1678U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLonelinessThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1679U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSadnessThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1680U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFatigueThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1681U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHungerThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1682U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetConfusionThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1683U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetExcitementThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1684U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAngerThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1685U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSurpriseThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1686U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAffectionThreshold(with(PetTrait) { fromFieldValue(it)}, sender)
			}
		),
		1687U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHead(it.toInt8()!!.transform {
null
					}, sender)
			}
		),
		1688U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEars(it.toInt8()!!.transform {
null
					}, sender)
			}
		),
		1689U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetNose(it.toInt8()!!.transform {
null
					}, sender)
			}
		),
		1690U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTail(it.toInt8()!!.transform {
null
					}, sender)
			}
		),
		1691U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBodyTexture(it.toInt8()!!.transform {
null
					}, sender)
			}
		),
		1692U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetColor(it.toInt8()!!.transform {
null
					}, sender)
			}
		),
		1693U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetColorScale(it.toInt8()!!.transform {
null
					}, sender)
			}
		),
		1694U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEyeColor(it.toInt8()!!.transform {
null
					}, sender)
			}
		),
		1695U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGender(it.toInt8()!!.transform {
null
					}, sender)
			}
		),
		1696U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLastSeenTimestamp(it.toUInt32()!!, sender)
			}
		),
		1697U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBoredom(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1698U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRestlessness(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1699U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPlayfulness(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1700U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLoneliness(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1701U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSadness(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1702U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAffection(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1703U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHunger(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1704U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetConfusion(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1705U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetExcitement(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1706U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFatigue(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1707U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAnger(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1708U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSurprise(it.toUInt16()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1709U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t1 = values[1].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t3 = values[3].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t4 = values[4].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t5 = values[5].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t6 = values[6].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t7 = values[7].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t8 = values[8].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t9 = values[9].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t10 = values[10].toUInt16()!!.transform {
						divide(1000.0f)
					}
				val t11 = values[11].toUInt16()!!.transform {
						divide(1000.0f)
					}
				onSetMood(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, sender)
				}
			}
		),
		1710U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onTeleportIn(it.toInt16()!!, sender)
			}
		),
		1711U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					ownsend = true,
				)
			),
			onChange = { it, sender ->
				onTeleportOut(it.toInt16()!!, sender)
			}
		),
		1712U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt16),
				modifiers = DistributedFieldModifiers(
					required = true,
					db = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTrickAptitudes(it.toList()!!.map { it.toUInt16()!!.transform {
						divide(10000.0f)
					} }, sender)
			}
		),
		1713U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt16()!!
				onDoTrick(t0, t1, sender)
				}
			}
		),
		1714U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onAvatarInteract(it.toUInt32()!!, sender)
			}
		),
		1715U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt16()!!
				onSetMovie(t0, t1, t2, sender)
				}
			}
		),
		1716U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onFreeAvatar(sender)
			}
		),
	)

	var DcObjectType: String
		get() = getField(1669U.toFieldId())!!.toStringValue()!!
		set(value) { value.toFieldValue()}

	fun setOwnerId(arg0: UInt, ) {
		setField(1670U.toFieldId(), arg0.toFieldValue())
	}

	fun setPetName(arg0: String, ) {
		setField(1671U.toFieldId(), arg0.toFieldValue())
	}

	fun setTraitSeed(arg0: UInt, ) {
		setField(1672U.toFieldId(), arg0.toFieldValue())
	}

	fun setSafeZone(arg0: UInt, ) {
		setField(1673U.toFieldId(), arg0.toFieldValue())
	}

	fun setForgetfulness(arg0: PetTrait, ) {
		setField(1674U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setBoredomThreshold(arg0: PetTrait, ) {
		setField(1675U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setRestlessnessThreshold(arg0: PetTrait, ) {
		setField(1676U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setPlayfulnessThreshold(arg0: PetTrait, ) {
		setField(1677U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setLonelinessThreshold(arg0: PetTrait, ) {
		setField(1678U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setSadnessThreshold(arg0: PetTrait, ) {
		setField(1679U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setFatigueThreshold(arg0: PetTrait, ) {
		setField(1680U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setHungerThreshold(arg0: PetTrait, ) {
		setField(1681U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setConfusionThreshold(arg0: PetTrait, ) {
		setField(1682U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setExcitementThreshold(arg0: PetTrait, ) {
		setField(1683U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setAngerThreshold(arg0: PetTrait, ) {
		setField(1684U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setSurpriseThreshold(arg0: PetTrait, ) {
		setField(1685U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setAffectionThreshold(arg0: PetTrait, ) {
		setField(1686U.toFieldId(), with(PetTrait) { arg0.toFieldValue()})
	}

	fun setHead(arg0: Double, ) {
		setField(1687U.toFieldId(), arg0.unTransform(FieldValue.Type.Int8) {
null
		}.toFieldValue())
	}

	fun setEars(arg0: Double, ) {
		setField(1688U.toFieldId(), arg0.unTransform(FieldValue.Type.Int8) {
null
		}.toFieldValue())
	}

	fun setNose(arg0: Double, ) {
		setField(1689U.toFieldId(), arg0.unTransform(FieldValue.Type.Int8) {
null
		}.toFieldValue())
	}

	fun setTail(arg0: Double, ) {
		setField(1690U.toFieldId(), arg0.unTransform(FieldValue.Type.Int8) {
null
		}.toFieldValue())
	}

	fun setBodyTexture(arg0: Double, ) {
		setField(1691U.toFieldId(), arg0.unTransform(FieldValue.Type.Int8) {
null
		}.toFieldValue())
	}

	fun setColor(arg0: Double, ) {
		setField(1692U.toFieldId(), arg0.unTransform(FieldValue.Type.Int8) {
null
		}.toFieldValue())
	}

	fun setColorScale(arg0: Double, ) {
		setField(1693U.toFieldId(), arg0.unTransform(FieldValue.Type.Int8) {
null
		}.toFieldValue())
	}

	fun setEyeColor(arg0: Double, ) {
		setField(1694U.toFieldId(), arg0.unTransform(FieldValue.Type.Int8) {
null
		}.toFieldValue())
	}

	fun setGender(arg0: Double, ) {
		setField(1695U.toFieldId(), arg0.unTransform(FieldValue.Type.Int8) {
null
		}.toFieldValue())
	}

	fun setLastSeenTimestamp(arg0: UInt, ) {
		setField(1696U.toFieldId(), arg0.toFieldValue())
	}

	fun setBoredom(arg0: Double, ) {
		setField(1697U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setRestlessness(arg0: Double, ) {
		setField(1698U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setPlayfulness(arg0: Double, ) {
		setField(1699U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setLoneliness(arg0: Double, ) {
		setField(1700U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setSadness(arg0: Double, ) {
		setField(1701U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setAffection(arg0: Double, ) {
		setField(1702U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setHunger(arg0: Double, ) {
		setField(1703U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setConfusion(arg0: Double, ) {
		setField(1704U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setExcitement(arg0: Double, ) {
		setField(1705U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setFatigue(arg0: Double, ) {
		setField(1706U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setAnger(arg0: Double, ) {
		setField(1707U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setSurprise(arg0: Double, ) {
		setField(1708U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setMood(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Double, arg9: Double, arg10: Double, arg11: Double, ) {
		val arg0Value = arg0.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()
		val arg1Value = arg1.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()
		val arg2Value = arg2.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()
		val arg3Value = arg3.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()
		val arg4Value = arg4.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()
		val arg5Value = arg5.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()
		val arg6Value = arg6.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()
		val arg7Value = arg7.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()
		val arg8Value = arg8.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()
		val arg9Value = arg9.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()
		val arg10Value = arg10.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()
		val arg11Value = arg11.unTransform(FieldValue.Type.UInt16) {
			divide(1000.0f)
		}.toFieldValue()

		setField(1709U.toFieldId(), FieldValue.TupleValue(arg0Value, arg1Value, arg2Value, arg3Value, arg4Value, arg5Value, arg6Value, arg7Value, arg8Value, arg9Value, arg10Value, arg11Value, ))
	}

	fun teleportIn(arg0: Short, ) {
		setField(1710U.toFieldId(), arg0.toFieldValue())
	}

	fun teleportOut(arg0: Short, ) {
		setField(1711U.toFieldId(), arg0.toFieldValue())
	}

	fun setTrickAptitudes(arg0: List<Double>, ) {
		setField(1712U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun doTrick(arg0: UByte, arg1: Short, ) {
		setField(1713U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun avatarInteract(arg0: UInt, ) {
		setField(1714U.toFieldId(), arg0.toFieldValue())
	}

	fun setMovie(arg0: UByte, arg1: UInt, arg2: Short, ) {
		setField(1715U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun freeAvatar() {
		setField(1716U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetDcObjectType(DcObjectType: String, sender: ChannelId? = null) {}
	open fun onSetOwnerId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetPetName(arg0: String, sender: ChannelId? = null) {}
	open fun onSetTraitSeed(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetSafeZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetForgetfulness(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetBoredomThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetRestlessnessThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetPlayfulnessThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetLonelinessThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetSadnessThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetFatigueThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetHungerThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetConfusionThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetExcitementThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetAngerThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetSurpriseThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetAffectionThreshold(arg0: PetTrait, sender: ChannelId? = null) {}
	open fun onSetHead(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetEars(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetNose(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetTail(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetBodyTexture(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetColor(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetColorScale(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetEyeColor(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetGender(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetLastSeenTimestamp(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBoredom(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetRestlessness(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetPlayfulness(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetLoneliness(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetSadness(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetAffection(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetHunger(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetConfusion(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetExcitement(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetFatigue(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetAnger(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetSurprise(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetMood(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Double, arg9: Double, arg10: Double, arg11: Double, sender: ChannelId? = null) {}
	open fun onTeleportIn(arg0: Short, sender: ChannelId? = null) {}
	open fun onTeleportOut(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetTrickAptitudes(arg0: List<Double>, sender: ChannelId? = null) {}
	open fun onDoTrick(arg0: UByte, arg1: Short, sender: ChannelId? = null) {}
	open fun onAvatarInteract(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, arg1: UInt, arg2: Short, sender: ChannelId? = null) {}
	open fun onFreeAvatar(sender: ChannelId? = null) {}
}

open class DistributedPetProxy(doId: DOId): DistributedObjectBase(doId, 307U.toDClassId()) {
	companion object {
		val dClassId = 307U.toDClassId()

		object Fields {
			val setDominantMood: FieldId = 1717U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1717U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDominantMood(it.toStringValue()!!, sender)
			}
		),
	)

	fun setDominantMood(arg0: String, ) {
		setField(1717U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetDominantMood(arg0: String, sender: ChannelId? = null) {}
}

open class DistributedBlackCatMgr(doId: DOId): DistributedObjectBase(doId, 308U.toDClassId()) {
	companion object {
		val dClassId = 308U.toDClassId()

		object Fields {
			val setAvId: FieldId = 1718U.toFieldId()
			val doBlackCatTransformation: FieldId = 1719U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1718U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAvId(it.toUInt32()!!, sender)
			}
		),
		1719U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onDoBlackCatTransformation(sender)
			}
		),
	)

	fun setAvId(arg0: UInt, ) {
		setField(1718U.toFieldId(), arg0.toFieldValue())
	}

	fun doBlackCatTransformation() {
		setField(1719U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetAvId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onDoBlackCatTransformation(sender: ChannelId? = null) {}
}

open class DistributedPolarPlaceEffectMgr(doId: DOId): DistributedObjectBase(doId, 309U.toDClassId()) {
	companion object {
		val dClassId = 309U.toDClassId()

		object Fields {
			val addPolarPlaceEffect: FieldId = 1720U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1720U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAddPolarPlaceEffect(sender)
			}
		),
	)

	fun addPolarPlaceEffect() {
		setField(1720U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onAddPolarPlaceEffect(sender: ChannelId? = null) {}
}

open class DistributedGreenToonEffectMgr(doId: DOId): DistributedObjectBase(doId, 310U.toDClassId()) {
	companion object {
		val dClassId = 310U.toDClassId()

		object Fields {
			val addGreenToonEffect: FieldId = 1721U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1721U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAddGreenToonEffect(sender)
			}
		),
	)

	fun addGreenToonEffect() {
		setField(1721U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onAddGreenToonEffect(sender: ChannelId? = null) {}
}

open class DistributedResistanceEmoteMgr(doId: DOId): DistributedObjectBase(doId, 311U.toDClassId()) {
	companion object {
		val dClassId = 311U.toDClassId()

		object Fields {
			val addResistanceEmote: FieldId = 1722U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1722U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAddResistanceEmote(sender)
			}
		),
	)

	fun addResistanceEmote() {
		setField(1722U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onAddResistanceEmote(sender: ChannelId? = null) {}
}

open class DistributedScavengerHuntTarget(doId: DOId): DistributedObjectBase(doId, 312U.toDClassId()) {
	companion object {
		val dClassId = 312U.toDClassId()

		object Fields {
			val attemptScavengerHunt: FieldId = 1723U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1723U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAttemptScavengerHunt(sender)
			}
		),
	)

	fun attemptScavengerHunt() {
		setField(1723U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onAttemptScavengerHunt(sender: ChannelId? = null) {}
}

open class DistributedTrickOrTreatTarget(doId: DOId): DistributedObjectBase(doId, 313U.toDClassId()) {
	companion object {
		val dClassId = 313U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedWinterCarolingTarget(doId: DOId): DistributedObjectBase(doId, 314U.toDClassId()) {
	companion object {
		val dClassId = 314U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedDataStoreManager(doId: DOId): DistributedObjectBase(doId, 315U.toDClassId()) {
	companion object {
		val dClassId = 315U.toDClassId()

		object Fields {
			val startStore: FieldId = 1724U.toFieldId()
			val stopStore: FieldId = 1725U.toFieldId()
			val queryStore: FieldId = 1726U.toFieldId()
			val receiveResults: FieldId = 1727U.toFieldId()
			val deleteBackupStores: FieldId = 1728U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1724U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onStartStore(it.toUInt8()!!, sender)
			}
		),
		1725U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onStopStore(it.toUInt8()!!, sender)
			}
		),
		1726U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toStringValue()!!
				onQueryStore(t0, t1, sender)
				}
			}
		),
		1727U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toStringValue()!!
				onReceiveResults(t0, t1, sender)
				}
			}
		),
		1728U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onDeleteBackupStores(sender)
			}
		),
	)

	fun startStore(arg0: UByte, ) {
		setField(1724U.toFieldId(), arg0.toFieldValue())
	}

	fun stopStore(arg0: UByte, ) {
		setField(1725U.toFieldId(), arg0.toFieldValue())
	}

	fun queryStore(arg0: UByte, arg1: String, ) {
		setField(1726U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun receiveResults(arg0: UByte, arg1: String, ) {
		setField(1727U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun deleteBackupStores() {
		setField(1728U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onStartStore(arg0: UByte, sender: ChannelId? = null) {}
	open fun onStopStore(arg0: UByte, sender: ChannelId? = null) {}
	open fun onQueryStore(arg0: UByte, arg1: String, sender: ChannelId? = null) {}
	open fun onReceiveResults(arg0: UByte, arg1: String, sender: ChannelId? = null) {}
	open fun onDeleteBackupStores(sender: ChannelId? = null) {}
}

open class DistributedVehicle(doId: DOId): DistributedObjectBase(doId, 316U.toDClassId()) {
	companion object {
		val dClassId = 316U.toDClassId()

		object Fields {
			val setOwner: FieldId = 1729U.toFieldId()
			val setState: FieldId = 1730U.toFieldId()
			val setBodyType: FieldId = 1731U.toFieldId()
			val setBodyColor: FieldId = 1732U.toFieldId()
			val setAccessoryColor: FieldId = 1733U.toFieldId()
			val setEngineBlockType: FieldId = 1734U.toFieldId()
			val setSpoilerType: FieldId = 1735U.toFieldId()
			val setFrontWheelWellType: FieldId = 1736U.toFieldId()
			val setBackWheelWellType: FieldId = 1737U.toFieldId()
			val setRimType: FieldId = 1738U.toFieldId()
			val setDecalType: FieldId = 1739U.toFieldId()
			val requestControl: FieldId = 1740U.toFieldId()
			val requestParked: FieldId = 1741U.toFieldId()
			val setInput: FieldId = 1742U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1729U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOwner(it.toUInt32()!!, sender)
			}
		),
		1730U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toChar()!!
				val t1 = values[1].toUInt32()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		1731U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBodyType(it.toInt8()!!, sender)
			}
		),
		1732U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBodyColor(it.toInt8()!!, sender)
			}
		),
		1733U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAccessoryColor(it.toInt8()!!, sender)
			}
		),
		1734U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEngineBlockType(it.toInt8()!!, sender)
			}
		),
		1735U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSpoilerType(it.toInt8()!!, sender)
			}
		),
		1736U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFrontWheelWellType(it.toInt8()!!, sender)
			}
		),
		1737U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBackWheelWellType(it.toInt8()!!, sender)
			}
		),
		1738U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRimType(it.toInt8()!!, sender)
			}
		),
		1739U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDecalType(it.toInt8()!!, sender)
			}
		),
		1740U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestControl(sender)
			}
		),
		1741U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestParked(sender)
			}
		),
		1742U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetInput(it.toInt8()!!, sender)
			}
		),
	)

	fun setOwner(arg0: UInt, ) {
		setField(1729U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: Char, arg1: UInt, ) {
		setField(1730U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setBodyType(arg0: Byte, ) {
		setField(1731U.toFieldId(), arg0.toFieldValue())
	}

	fun setBodyColor(arg0: Byte, ) {
		setField(1732U.toFieldId(), arg0.toFieldValue())
	}

	fun setAccessoryColor(arg0: Byte, ) {
		setField(1733U.toFieldId(), arg0.toFieldValue())
	}

	fun setEngineBlockType(arg0: Byte, ) {
		setField(1734U.toFieldId(), arg0.toFieldValue())
	}

	fun setSpoilerType(arg0: Byte, ) {
		setField(1735U.toFieldId(), arg0.toFieldValue())
	}

	fun setFrontWheelWellType(arg0: Byte, ) {
		setField(1736U.toFieldId(), arg0.toFieldValue())
	}

	fun setBackWheelWellType(arg0: Byte, ) {
		setField(1737U.toFieldId(), arg0.toFieldValue())
	}

	fun setRimType(arg0: Byte, ) {
		setField(1738U.toFieldId(), arg0.toFieldValue())
	}

	fun setDecalType(arg0: Byte, ) {
		setField(1739U.toFieldId(), arg0.toFieldValue())
	}

	fun requestControl() {
		setField(1740U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestParked() {
		setField(1741U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setInput(arg0: Byte, ) {
		setField(1742U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetOwner(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetState(arg0: Char, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetBodyType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetBodyColor(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetAccessoryColor(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetEngineBlockType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetSpoilerType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetFrontWheelWellType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetBackWheelWellType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetRimType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetDecalType(arg0: Byte, sender: ChannelId? = null) {}
	open fun onRequestControl(sender: ChannelId? = null) {}
	open fun onRequestParked(sender: ChannelId? = null) {}
	open fun onSetInput(arg0: Byte, sender: ChannelId? = null) {}
}

open class DistributedRace(doId: DOId): DistributedObjectBase(doId, 318U.toDClassId()) {
	companion object {
		val dClassId = 318U.toDClassId()

		object Fields {
			val setZoneId: FieldId = 1745U.toFieldId()
			val setTrackId: FieldId = 1746U.toFieldId()
			val setRaceType: FieldId = 1747U.toFieldId()
			val setCircuitLoop: FieldId = 1748U.toFieldId()
			val setAvatars: FieldId = 1749U.toFieldId()
			val setStartingPlaces: FieldId = 1750U.toFieldId()
			val setLapCount: FieldId = 1751U.toFieldId()
			val waitingForJoin: FieldId = 1752U.toFieldId()
			val setEnteredRacers: FieldId = 1753U.toFieldId()
			val prepForRace: FieldId = 1754U.toFieldId()
			val startTutorial: FieldId = 1755U.toFieldId()
			val startRace: FieldId = 1756U.toFieldId()
			val goToSpeedway: FieldId = 1757U.toFieldId()
			val genGag: FieldId = 1758U.toFieldId()
			val dropAnvilOn: FieldId = 1759U.toFieldId()
			val shootPiejectile: FieldId = 1760U.toFieldId()
			val racerDisconnected: FieldId = 1761U.toFieldId()
			val setPlace: FieldId = 1762U.toFieldId()
			val setCircuitPlace: FieldId = 1763U.toFieldId()
			val endCircuitRace: FieldId = 1764U.toFieldId()
			val setRaceZone: FieldId = 1765U.toFieldId()
			val hasGag: FieldId = 1766U.toFieldId()
			val racerLeft: FieldId = 1767U.toFieldId()
			val heresMyT: FieldId = 1768U.toFieldId()
			val requestThrow: FieldId = 1769U.toFieldId()
			val requestKart: FieldId = 1770U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1745U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetZoneId(it.toUInt32()!!, sender)
			}
		),
		1746U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTrackId(it.toUInt16()!!, sender)
			}
		),
		1747U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRaceType(it.toUInt16()!!, sender)
			}
		),
		1748U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt16),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCircuitLoop(it.toList()!!.map { it.toUInt16()!! }, sender)
			}
		),
		1749U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatars(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1750U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetStartingPlaces(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		1751U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLapCount(it.toUInt8()!!, sender)
			}
		),
		1752U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onWaitingForJoin(sender)
			}
		),
		1753U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEnteredRacers(with(avatarAndKart) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		1754U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onPrepForRace(sender)
			}
		),
		1755U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onStartTutorial(sender)
			}
		),
		1756U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onStartRace(it.toInt16()!!, sender)
			}
		),
		1757U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toUInt8()!!
				onGoToSpeedway(t0, t1, sender)
				}
			}
		),
		1758U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toUInt8()!!
				onGenGag(t0, t1, t2, sender)
				}
			}
		),
		1759U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt16()!!
				onDropAnvilOn(t0, t1, t2, sender)
				}
			}
		),
		1760U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt8()!!
				onShootPiejectile(t0, t1, t2, sender)
				}
			}
		),
		1761U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onRacerDisconnected(it.toUInt32()!!, sender)
			}
		),
		1762U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt8()!!
				val t5 = values[5].toUInt32()!!
				val t6 = values[6].toUInt32()!!
				val t7 = values[7].toList()!!.map { it.toUInt32()!! }
				val t8 = values[8].toList()!!.map { it.toUInt16()!! }
				val t9 = values[9].toUInt32()!!.transform {
						divide(1000.0f)
					}
				onSetPlace(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, sender)
				}
			}
		),
		1763U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt32()!!
				val t5 = values[5].toList()!!.map { it.toUInt32()!! }
				onSetCircuitPlace(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		1764U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onEndCircuitRace(sender)
			}
		),
		1765U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetRaceZone(t0, t1, sender)
				}
			}
		),
		1766U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				onHasGag(t0, t1, t2, sender)
				}
			}
		),
		1767U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRacerLeft(it.toUInt32()!!, sender)
			}
		),
		1768U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt16()!!.transform {
						divide(65535.0f)
					}
				val t3 = values[3].toInt16()!!
				onHeresMyT(t0, t1, t2, t3, sender)
				}
			}
		),
		1769U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t1 = values[1].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(1000.0f)
					}
				onRequestThrow(t0, t1, t2, sender)
				}
			}
		),
		1770U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestKart(sender)
			}
		),
	)

	fun setZoneId(arg0: UInt, ) {
		setField(1745U.toFieldId(), arg0.toFieldValue())
	}

	fun setTrackId(arg0: UShort, ) {
		setField(1746U.toFieldId(), arg0.toFieldValue())
	}

	fun setRaceType(arg0: UShort, ) {
		setField(1747U.toFieldId(), arg0.toFieldValue())
	}

	fun setCircuitLoop(arg0: List<UShort>, ) {
		setField(1748U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setAvatars(arg0: List<UInt>, ) {
		setField(1749U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setStartingPlaces(arg0: List<UByte>, ) {
		setField(1750U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setLapCount(arg0: UByte, ) {
		setField(1751U.toFieldId(), arg0.toFieldValue())
	}

	fun waitingForJoin() {
		setField(1752U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setEnteredRacers(arg0: List<avatarAndKart>, ) {
		setField(1753U.toFieldId(), with(avatarAndKart) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun prepForRace() {
		setField(1754U.toFieldId(), FieldValue.EmptyValue)
	}

	fun startTutorial() {
		setField(1755U.toFieldId(), FieldValue.EmptyValue)
	}

	fun startRace(arg0: Short, ) {
		setField(1756U.toFieldId(), arg0.toFieldValue())
	}

	fun goToSpeedway(arg0: List<UInt>, arg1: UByte, ) {
		setField(1757U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun genGag(arg0: UByte, arg1: UShort, arg2: UByte, ) {
		setField(1758U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun dropAnvilOn(arg0: UInt, arg1: UInt, arg2: Short, ) {
		setField(1759U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun shootPiejectile(arg0: UInt, arg1: UInt, arg2: UByte, ) {
		setField(1760U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun racerDisconnected(arg0: UInt, ) {
		setField(1761U.toFieldId(), arg0.toFieldValue())
	}

	fun setPlace(arg0: UInt, arg1: Double, arg2: UByte, arg3: UInt, arg4: UByte, arg5: UInt, arg6: UInt, arg7: List<UInt>, arg8: List<UShort>, arg9: Double, ) {
		setField(1762U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg7.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt16, arg8.map { it.toFieldValue() }).toFieldValue(), 
			arg9.unTransform(FieldValue.Type.UInt32) {
			divide(1000.0f)
		}.toFieldValue(), 
				))
	}

	fun setCircuitPlace(arg0: UInt, arg1: UByte, arg2: UInt, arg3: UInt, arg4: UInt, arg5: List<UInt>, ) {
		setField(1763U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg5.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun endCircuitRace() {
		setField(1764U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setRaceZone(arg0: UInt, arg1: UInt, ) {
		setField(1765U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun hasGag(arg0: UByte, arg1: UByte, arg2: UByte, ) {
		setField(1766U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun racerLeft(arg0: UInt, ) {
		setField(1767U.toFieldId(), arg0.toFieldValue())
	}

	fun heresMyT(arg0: UInt, arg1: Byte, arg2: Double, arg3: Short, ) {
		setField(1768U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt16) {
			divide(65535.0f)
		}.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun requestThrow(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(1769U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
				))
	}

	fun requestKart() {
		setField(1770U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetTrackId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetRaceType(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetCircuitLoop(arg0: List<UShort>, sender: ChannelId? = null) {}
	open fun onSetAvatars(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetStartingPlaces(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetLapCount(arg0: UByte, sender: ChannelId? = null) {}
	open fun onWaitingForJoin(sender: ChannelId? = null) {}
	open fun onSetEnteredRacers(arg0: List<avatarAndKart>, sender: ChannelId? = null) {}
	open fun onPrepForRace(sender: ChannelId? = null) {}
	open fun onStartTutorial(sender: ChannelId? = null) {}
	open fun onStartRace(arg0: Short, sender: ChannelId? = null) {}
	open fun onGoToSpeedway(arg0: List<UInt>, arg1: UByte, sender: ChannelId? = null) {}
	open fun onGenGag(arg0: UByte, arg1: UShort, arg2: UByte, sender: ChannelId? = null) {}
	open fun onDropAnvilOn(arg0: UInt, arg1: UInt, arg2: Short, sender: ChannelId? = null) {}
	open fun onShootPiejectile(arg0: UInt, arg1: UInt, arg2: UByte, sender: ChannelId? = null) {}
	open fun onRacerDisconnected(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetPlace(arg0: UInt, arg1: Double, arg2: UByte, arg3: UInt, arg4: UByte, arg5: UInt, arg6: UInt, arg7: List<UInt>, arg8: List<UShort>, arg9: Double, sender: ChannelId? = null) {}
	open fun onSetCircuitPlace(arg0: UInt, arg1: UByte, arg2: UInt, arg3: UInt, arg4: UInt, arg5: List<UInt>, sender: ChannelId? = null) {}
	open fun onEndCircuitRace(sender: ChannelId? = null) {}
	open fun onSetRaceZone(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onHasGag(arg0: UByte, arg1: UByte, arg2: UByte, sender: ChannelId? = null) {}
	open fun onRacerLeft(arg0: UInt, sender: ChannelId? = null) {}
	open fun onHeresMyT(arg0: UInt, arg1: Byte, arg2: Double, arg3: Short, sender: ChannelId? = null) {}
	open fun onRequestThrow(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onRequestKart(sender: ChannelId? = null) {}
}

open class DistributedGag(doId: DOId): DistributedObjectBase(doId, 319U.toDClassId()) {
	companion object {
		val dClassId = 319U.toDClassId()

		object Fields {
			val setInitTime: FieldId = 1771U.toFieldId()
			val setActivateTime: FieldId = 1772U.toFieldId()
			val setPos: FieldId = 1773U.toFieldId()
			val setRace: FieldId = 1774U.toFieldId()
			val setOwnerId: FieldId = 1775U.toFieldId()
			val setType: FieldId = 1776U.toFieldId()
			val hitSomebody: FieldId = 1777U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1771U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetInitTime(it.toInt16()!!, sender)
			}
		),
		1772U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetActivateTime(it.toUInt16()!!, sender)
			}
		),
		1773U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t1 = values[1].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(1000.0f)
					}
				onSetPos(t0, t1, t2, sender)
				}
			}
		),
		1774U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRace(it.toUInt32()!!, sender)
			}
		),
		1775U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOwnerId(it.toUInt32()!!, sender)
			}
		),
		1776U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetType(it.toUInt8()!!, sender)
			}
		),
		1777U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onHitSomebody(t0, t1, sender)
				}
			}
		),
	)

	fun setInitTime(arg0: Short, ) {
		setField(1771U.toFieldId(), arg0.toFieldValue())
	}

	fun setActivateTime(arg0: UShort, ) {
		setField(1772U.toFieldId(), arg0.toFieldValue())
	}

	fun setPos(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(1773U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
				))
	}

	fun setRace(arg0: UInt, ) {
		setField(1774U.toFieldId(), arg0.toFieldValue())
	}

	fun setOwnerId(arg0: UInt, ) {
		setField(1775U.toFieldId(), arg0.toFieldValue())
	}

	fun setType(arg0: UByte, ) {
		setField(1776U.toFieldId(), arg0.toFieldValue())
	}

	fun hitSomebody(arg0: UInt, arg1: Short, ) {
		setField(1777U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetInitTime(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetActivateTime(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetPos(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetRace(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetOwnerId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetType(arg0: UByte, sender: ChannelId? = null) {}
	open fun onHitSomebody(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
}

open class DistributedProjectile(doId: DOId): DistributedObjectBase(doId, 320U.toDClassId()) {
	companion object {
		val dClassId = 320U.toDClassId()

		object Fields {
			val setInitTime: FieldId = 1778U.toFieldId()
			val setPos: FieldId = 1779U.toFieldId()
			val setRace: FieldId = 1780U.toFieldId()
			val setOwnerId: FieldId = 1781U.toFieldId()
			val setType: FieldId = 1782U.toFieldId()
			val hitSomebody: FieldId = 1783U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1778U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetInitTime(it.toInt16()!!, sender)
			}
		),
		1779U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t1 = values[1].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(1000.0f)
					}
				onSetPos(t0, t1, t2, sender)
				}
			}
		),
		1780U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRace(it.toUInt32()!!, sender)
			}
		),
		1781U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOwnerId(it.toUInt32()!!, sender)
			}
		),
		1782U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetType(it.toUInt8()!!, sender)
			}
		),
		1783U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onHitSomebody(t0, t1, sender)
				}
			}
		),
	)

	fun setInitTime(arg0: Short, ) {
		setField(1778U.toFieldId(), arg0.toFieldValue())
	}

	fun setPos(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(1779U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
				))
	}

	fun setRace(arg0: UInt, ) {
		setField(1780U.toFieldId(), arg0.toFieldValue())
	}

	fun setOwnerId(arg0: UInt, ) {
		setField(1781U.toFieldId(), arg0.toFieldValue())
	}

	fun setType(arg0: UByte, ) {
		setField(1782U.toFieldId(), arg0.toFieldValue())
	}

	fun hitSomebody(arg0: UInt, arg1: Short, ) {
		setField(1783U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetInitTime(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetPos(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetRace(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetOwnerId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetType(arg0: UByte, sender: ChannelId? = null) {}
	open fun onHitSomebody(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
}

open class DistributedKartPad(doId: DOId): DistributedObjectBase(doId, 321U.toDClassId()) {
	companion object {
		val dClassId = 321U.toDClassId()

		object Fields {
			val setArea: FieldId = 1784U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1784U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetArea(it.toUInt32()!!, sender)
			}
		),
	)

	fun setArea(arg0: UInt, ) {
		setField(1784U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetArea(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedRacePad(doId: DOId): DistributedObjectBase(doId, 322U.toDClassId()) {
	companion object {
		val dClassId = 322U.toDClassId()

		object Fields {
			val setState: FieldId = 1785U.toFieldId()
			val setRaceZone: FieldId = 1786U.toFieldId()
			val setTrackInfo: FieldId = 1787U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1785U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		1786U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetRaceZone(it.toUInt32()!!, sender)
			}
		),
		1787U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt16),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTrackInfo(it.toList()!!.map { it.toUInt16()!! }, sender)
			}
		),
	)

	fun setState(arg0: String, arg1: Short, ) {
		setField(1785U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setRaceZone(arg0: UInt, ) {
		setField(1786U.toFieldId(), arg0.toFieldValue())
	}

	fun setTrackInfo(arg0: List<UShort>, ) {
		setField(1787U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetRaceZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetTrackInfo(arg0: List<UShort>, sender: ChannelId? = null) {}
}

open class DistributedViewPad(doId: DOId): DistributedObjectBase(doId, 323U.toDClassId()) {
	companion object {
		val dClassId = 323U.toDClassId()

		object Fields {
			val setLastEntered: FieldId = 1788U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1788U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLastEntered(it.toInt16()!!, sender)
			}
		),
	)

	fun setLastEntered(arg0: Short, ) {
		setField(1788U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetLastEntered(arg0: Short, sender: ChannelId? = null) {}
}

open class DistributedStartingBlock(doId: DOId): DistributedObjectBase(doId, 324U.toDClassId()) {
	companion object {
		val dClassId = 324U.toDClassId()

		object Fields {
			val setPadDoId: FieldId = 1789U.toFieldId()
			val setPosHpr: FieldId = 1790U.toFieldId()
			val setPadLocationId: FieldId = 1791U.toFieldId()
			val requestEnter: FieldId = 1792U.toFieldId()
			val rejectEnter: FieldId = 1793U.toFieldId()
			val requestExit: FieldId = 1794U.toFieldId()
			val setOccupied: FieldId = 1795U.toFieldId()
			val setMovie: FieldId = 1796U.toFieldId()
			val movieFinished: FieldId = 1797U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1789U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPadDoId(it.toUInt32()!!, sender)
			}
		),
		1790U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		1791U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPadLocationId(it.toUInt8()!!, sender)
			}
		),
		1792U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestEnter(it.toUInt8()!!, sender)
			}
		),
		1793U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectEnter(it.toUInt8()!!, sender)
			}
		),
		1794U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		1795U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOccupied(it.toUInt32()!!, sender)
			}
		),
		1796U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMovie(it.toUInt8()!!, sender)
			}
		),
		1797U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onMovieFinished(sender)
			}
		),
	)

	fun setPadDoId(arg0: UInt, ) {
		setField(1789U.toFieldId(), arg0.toFieldValue())
	}

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(1790U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setPadLocationId(arg0: UByte, ) {
		setField(1791U.toFieldId(), arg0.toFieldValue())
	}

	fun requestEnter(arg0: UByte, ) {
		setField(1792U.toFieldId(), arg0.toFieldValue())
	}

	fun rejectEnter(arg0: UByte, ) {
		setField(1793U.toFieldId(), arg0.toFieldValue())
	}

	fun requestExit() {
		setField(1794U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setOccupied(arg0: UInt, ) {
		setField(1795U.toFieldId(), arg0.toFieldValue())
	}

	fun setMovie(arg0: UByte, ) {
		setField(1796U.toFieldId(), arg0.toFieldValue())
	}

	fun movieFinished() {
		setField(1797U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetPadDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetPadLocationId(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestEnter(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRejectEnter(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onSetOccupied(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, sender: ChannelId? = null) {}
	open fun onMovieFinished(sender: ChannelId? = null) {}
}

open class DistributedViewingBlock(doId: DOId): DistributedObjectBase(doId, 325U.toDClassId()) {
	companion object {
		val dClassId = 325U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedLeaderBoard(doId: DOId): DistributedObjectBase(doId, 326U.toDClassId()) {
	companion object {
		val dClassId = 326U.toDClassId()

		object Fields {
			val setPosHpr: FieldId = 1798U.toFieldId()
			val setDisplay: FieldId = 1799U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1798U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		1799U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Blob,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDisplay(it.toBlob()!!, sender)
			}
		),
	)

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(1798U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setDisplay(arg0: ByteArray, ) {
		setField(1799U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetDisplay(arg0: ByteArray, sender: ChannelId? = null) {}
}

open class DistributedDeliveryManager(doId: DOId): DistributedObjectBase(doId, 327U.toDClassId()) {
	companion object {
		val dClassId = 327U.toDClassId()

		object Fields {
			val hello: FieldId = 1800U.toFieldId()
			val rejectHello: FieldId = 1801U.toFieldId()
			val helloResponse: FieldId = 1802U.toFieldId()
			val getName: FieldId = 1803U.toFieldId()
			val receiveRejectGetName: FieldId = 1804U.toFieldId()
			val receiveAcceptGetName: FieldId = 1805U.toFieldId()
			val addName: FieldId = 1806U.toFieldId()
			val receiveRejectAddName: FieldId = 1807U.toFieldId()
			val receiveAcceptAddName: FieldId = 1808U.toFieldId()
			val addGift: FieldId = 1809U.toFieldId()
			val receiveRejectAddGift: FieldId = 1810U.toFieldId()
			val receiveAcceptAddGift: FieldId = 1811U.toFieldId()
			val deliverGifts: FieldId = 1812U.toFieldId()
			val receiveAcceptDeliverGifts: FieldId = 1813U.toFieldId()
			val receiveRejectDeliverGifts: FieldId = 1814U.toFieldId()
			val receiveRequestPayForGift: FieldId = 1815U.toFieldId()
			val receiveRequestPurchaseGift: FieldId = 1816U.toFieldId()
			val receiveAcceptPurchaseGift: FieldId = 1817U.toFieldId()
			val receiveRejectPurchaseGift: FieldId = 1818U.toFieldId()
			val heartbeat: FieldId = 1819U.toFieldId()
			val giveBeanBonus: FieldId = 1820U.toFieldId()
			val requestAck: FieldId = 1821U.toFieldId()
			val returnAck: FieldId = 1822U.toFieldId()
			val givePartyRefund: FieldId = 1823U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1800U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHello(it.toStringValue()!!, sender)
			}
		),
		1801U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectHello(it.toStringValue()!!, sender)
			}
		),
		1802U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onHelloResponse(it.toStringValue()!!, sender)
			}
		),
		1803U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onGetName(it.toUInt32()!!, sender)
			}
		),
		1804U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onReceiveRejectGetName(it.toStringValue()!!, sender)
			}
		),
		1805U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onReceiveAcceptGetName(it.toStringValue()!!, sender)
			}
		),
		1806U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onAddName(t0, t1, sender)
				}
			}
		),
		1807U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onReceiveRejectAddName(it.toUInt32()!!, sender)
			}
		),
		1808U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onReceiveAcceptAddName(it.toUInt32()!!, sender)
			}
		),
		1809U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toBlob()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt32()!!
				onAddGift(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1810U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onReceiveRejectAddGift(it.toUInt32()!!, sender)
			}
		),
		1811U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				onReceiveAcceptAddGift(t0, t1, t2, t3, sender)
				}
			}
		),
		1812U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onDeliverGifts(t0, t1, sender)
				}
			}
		),
		1813U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onReceiveAcceptDeliverGifts(t0, t1, sender)
				}
			}
		),
		1814U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				onReceiveRejectDeliverGifts(t0, t1, sender)
				}
			}
		),
		1815U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onReceiveRequestPayForGift(t0, t1, t2, sender)
				}
			}
		),
		1816U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toBlob()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				onReceiveRequestPurchaseGift(t0, t1, t2, t3, sender)
				}
			}
		),
		1817U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt16()!!
				onReceiveAcceptPurchaseGift(t0, t1, t2, sender)
				}
			}
		),
		1818U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toUInt16()!!
				onReceiveRejectPurchaseGift(t0, t1, t2, t3, sender)
				}
			}
		),
		1819U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onHeartbeat(sender)
			}
		),
		1820U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onGiveBeanBonus(t0, t1, sender)
				}
			}
		),
		1821U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestAck(sender)
			}
		),
		1822U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onReturnAck(sender)
			}
		),
		1823U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt64()!!
				val t3 = values[3].toInt8()!!
				val t4 = values[4].toUInt16()!!
				onGivePartyRefund(t0, t1, t2, t3, t4, sender)
				}
			}
		),
	)

	fun hello(arg0: String, ) {
		setField(1800U.toFieldId(), arg0.toFieldValue())
	}

	fun rejectHello(arg0: String, ) {
		setField(1801U.toFieldId(), arg0.toFieldValue())
	}

	fun helloResponse(arg0: String, ) {
		setField(1802U.toFieldId(), arg0.toFieldValue())
	}

	fun getName(arg0: UInt, ) {
		setField(1803U.toFieldId(), arg0.toFieldValue())
	}

	fun receiveRejectGetName(arg0: String, ) {
		setField(1804U.toFieldId(), arg0.toFieldValue())
	}

	fun receiveAcceptGetName(arg0: String, ) {
		setField(1805U.toFieldId(), arg0.toFieldValue())
	}

	fun addName(arg0: UInt, arg1: String, ) {
		setField(1806U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun receiveRejectAddName(arg0: UInt, ) {
		setField(1807U.toFieldId(), arg0.toFieldValue())
	}

	fun receiveAcceptAddName(arg0: UInt, ) {
		setField(1808U.toFieldId(), arg0.toFieldValue())
	}

	fun addGift(arg0: UInt, arg1: ByteArray, arg2: UInt, arg3: UInt, arg4: UInt, ) {
		setField(1809U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun receiveRejectAddGift(arg0: UInt, ) {
		setField(1810U.toFieldId(), arg0.toFieldValue())
	}

	fun receiveAcceptAddGift(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, ) {
		setField(1811U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun deliverGifts(arg0: UInt, arg1: UInt, ) {
		setField(1812U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun receiveAcceptDeliverGifts(arg0: UInt, arg1: String, ) {
		setField(1813U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun receiveRejectDeliverGifts(arg0: UInt, arg1: String, ) {
		setField(1814U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun receiveRequestPayForGift(arg0: ByteArray, arg1: UInt, arg2: UInt, ) {
		setField(1815U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun receiveRequestPurchaseGift(arg0: ByteArray, arg1: UInt, arg2: UInt, arg3: UInt, ) {
		setField(1816U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun receiveAcceptPurchaseGift(arg0: UInt, arg1: UInt, arg2: Short, ) {
		setField(1817U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun receiveRejectPurchaseGift(arg0: UInt, arg1: UInt, arg2: Short, arg3: UShort, ) {
		setField(1818U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun heartbeat() {
		setField(1819U.toFieldId(), FieldValue.EmptyValue)
	}

	fun giveBeanBonus(arg0: UInt, arg1: UShort, ) {
		setField(1820U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestAck() {
		setField(1821U.toFieldId(), FieldValue.EmptyValue)
	}

	fun returnAck() {
		setField(1822U.toFieldId(), FieldValue.EmptyValue)
	}

	fun givePartyRefund(arg0: UInt, arg1: UInt, arg2: ULong, arg3: Byte, arg4: UShort, ) {
		setField(1823U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	open fun onHello(arg0: String, sender: ChannelId? = null) {}
	open fun onRejectHello(arg0: String, sender: ChannelId? = null) {}
	open fun onHelloResponse(arg0: String, sender: ChannelId? = null) {}
	open fun onGetName(arg0: UInt, sender: ChannelId? = null) {}
	open fun onReceiveRejectGetName(arg0: String, sender: ChannelId? = null) {}
	open fun onReceiveAcceptGetName(arg0: String, sender: ChannelId? = null) {}
	open fun onAddName(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onReceiveRejectAddName(arg0: UInt, sender: ChannelId? = null) {}
	open fun onReceiveAcceptAddName(arg0: UInt, sender: ChannelId? = null) {}
	open fun onAddGift(arg0: UInt, arg1: ByteArray, arg2: UInt, arg3: UInt, arg4: UInt, sender: ChannelId? = null) {}
	open fun onReceiveRejectAddGift(arg0: UInt, sender: ChannelId? = null) {}
	open fun onReceiveAcceptAddGift(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, sender: ChannelId? = null) {}
	open fun onDeliverGifts(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onReceiveAcceptDeliverGifts(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onReceiveRejectDeliverGifts(arg0: UInt, arg1: String, sender: ChannelId? = null) {}
	open fun onReceiveRequestPayForGift(arg0: ByteArray, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onReceiveRequestPurchaseGift(arg0: ByteArray, arg1: UInt, arg2: UInt, arg3: UInt, sender: ChannelId? = null) {}
	open fun onReceiveAcceptPurchaseGift(arg0: UInt, arg1: UInt, arg2: Short, sender: ChannelId? = null) {}
	open fun onReceiveRejectPurchaseGift(arg0: UInt, arg1: UInt, arg2: Short, arg3: UShort, sender: ChannelId? = null) {}
	open fun onHeartbeat(sender: ChannelId? = null) {}
	open fun onGiveBeanBonus(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onRequestAck(sender: ChannelId? = null) {}
	open fun onReturnAck(sender: ChannelId? = null) {}
	open fun onGivePartyRefund(arg0: UInt, arg1: UInt, arg2: ULong, arg3: Byte, arg4: UShort, sender: ChannelId? = null) {}
}

open class DistributedLawbotBoss(doId: DOId): DistributedObjectBase(doId, 328U.toDClassId()) {
	companion object {
		val dClassId = 328U.toDClassId()

		object Fields {
			val setState: FieldId = 1824U.toFieldId()
			val setBossDamage: FieldId = 1825U.toFieldId()
			val touchWitnessStand: FieldId = 1826U.toFieldId()
			val hitBoss: FieldId = 1827U.toFieldId()
			val healBoss: FieldId = 1828U.toFieldId()
			val hitToon: FieldId = 1829U.toFieldId()
			val hitDefensePan: FieldId = 1830U.toFieldId()
			val hitProsecutionPan: FieldId = 1831U.toFieldId()
			val hitChair: FieldId = 1832U.toFieldId()
			val setLawyerIds: FieldId = 1833U.toFieldId()
			val setTaunt: FieldId = 1834U.toFieldId()
			val toonGotHealed: FieldId = 1835U.toFieldId()
			val enteredBonusState: FieldId = 1836U.toFieldId()
			val setBattleDifficulty: FieldId = 1837U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1824U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetState(it.toStringValue()!!, sender)
			}
		),
		1825U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toInt16()!!
				onSetBossDamage(t0, t1, t2, sender)
				}
			}
		),
		1826U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTouchWitnessStand(sender)
			}
		),
		1827U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitBoss(it.toUInt8()!!, sender)
			}
		),
		1828U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHealBoss(it.toUInt8()!!, sender)
			}
		),
		1829U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitToon(it.toUInt32()!!, sender)
			}
		),
		1830U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitDefensePan(sender)
			}
		),
		1831U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitProsecutionPan(sender)
			}
		),
		1832U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onHitChair(t0, t1, sender)
				}
			}
		),
		1833U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLawyerIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1834U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				onSetTaunt(t0, t1, sender)
				}
			}
		),
		1835U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onToonGotHealed(it.toUInt32()!!, sender)
			}
		),
		1836U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onEnteredBonusState(sender)
			}
		),
		1837U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBattleDifficulty(it.toUInt8()!!, sender)
			}
		),
	)

	fun setState(arg0: String, ) {
		setField(1824U.toFieldId(), arg0.toFieldValue())
	}

	fun setBossDamage(arg0: UShort, arg1: UByte, arg2: Short, ) {
		setField(1825U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun touchWitnessStand() {
		setField(1826U.toFieldId(), FieldValue.EmptyValue)
	}

	fun hitBoss(arg0: UByte, ) {
		setField(1827U.toFieldId(), arg0.toFieldValue())
	}

	fun healBoss(arg0: UByte, ) {
		setField(1828U.toFieldId(), arg0.toFieldValue())
	}

	fun hitToon(arg0: UInt, ) {
		setField(1829U.toFieldId(), arg0.toFieldValue())
	}

	fun hitDefensePan() {
		setField(1830U.toFieldId(), FieldValue.EmptyValue)
	}

	fun hitProsecutionPan() {
		setField(1831U.toFieldId(), FieldValue.EmptyValue)
	}

	fun hitChair(arg0: UByte, arg1: UByte, ) {
		setField(1832U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setLawyerIds(arg0: List<UInt>, ) {
		setField(1833U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setTaunt(arg0: Byte, arg1: Byte, ) {
		setField(1834U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun toonGotHealed(arg0: UInt, ) {
		setField(1835U.toFieldId(), arg0.toFieldValue())
	}

	fun enteredBonusState() {
		setField(1836U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setBattleDifficulty(arg0: UByte, ) {
		setField(1837U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetState(arg0: String, sender: ChannelId? = null) {}
	open fun onSetBossDamage(arg0: UShort, arg1: UByte, arg2: Short, sender: ChannelId? = null) {}
	open fun onTouchWitnessStand(sender: ChannelId? = null) {}
	open fun onHitBoss(arg0: UByte, sender: ChannelId? = null) {}
	open fun onHealBoss(arg0: UByte, sender: ChannelId? = null) {}
	open fun onHitToon(arg0: UInt, sender: ChannelId? = null) {}
	open fun onHitDefensePan(sender: ChannelId? = null) {}
	open fun onHitProsecutionPan(sender: ChannelId? = null) {}
	open fun onHitChair(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetLawyerIds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetTaunt(arg0: Byte, arg1: Byte, sender: ChannelId? = null) {}
	open fun onToonGotHealed(arg0: UInt, sender: ChannelId? = null) {}
	open fun onEnteredBonusState(sender: ChannelId? = null) {}
	open fun onSetBattleDifficulty(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedLawbotBossSuit(doId: DOId): DistributedObjectBase(doId, 329U.toDClassId()) {
	companion object {
		val dClassId = 329U.toDClassId()

		object Fields {
			val setPosHpr: FieldId = 1838U.toFieldId()
			val doAttack: FieldId = 1839U.toFieldId()
			val doProsecute: FieldId = 1840U.toFieldId()
			val hitByToon: FieldId = 1841U.toFieldId()
			val doStun: FieldId = 1842U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1838U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		1839U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onDoAttack(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		1840U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onDoProsecute(sender)
			}
		),
		1841U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitByToon(sender)
			}
		),
		1842U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onDoStun(sender)
			}
		),
	)

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(1838U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun doAttack(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(1839U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun doProsecute() {
		setField(1840U.toFieldId(), FieldValue.EmptyValue)
	}

	fun hitByToon() {
		setField(1841U.toFieldId(), FieldValue.EmptyValue)
	}

	fun doStun() {
		setField(1842U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onDoAttack(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onDoProsecute(sender: ChannelId? = null) {}
	open fun onHitByToon(sender: ChannelId? = null) {}
	open fun onDoStun(sender: ChannelId? = null) {}
}

open class DistributedLawbotBossGavel(doId: DOId): DistributedObjectBase(doId, 330U.toDClassId()) {
	companion object {
		val dClassId = 330U.toDClassId()

		object Fields {
			val setBossCogId: FieldId = 1843U.toFieldId()
			val setIndex: FieldId = 1844U.toFieldId()
			val setState: FieldId = 1845U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1843U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossCogId(it.toUInt32()!!, sender)
			}
		),
		1844U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIndex(it.toUInt8()!!, sender)
			}
		),
		1845U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Char,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetState(it.toChar()!!, sender)
			}
		),
	)

	fun setBossCogId(arg0: UInt, ) {
		setField(1843U.toFieldId(), arg0.toFieldValue())
	}

	fun setIndex(arg0: UByte, ) {
		setField(1844U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: Char, ) {
		setField(1845U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetBossCogId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetState(arg0: Char, sender: ChannelId? = null) {}
}

open class DistributedLawbotCannon(doId: DOId): DistributedObjectBase(doId, 331U.toDClassId()) {
	companion object {
		val dClassId = 331U.toDClassId()

		object Fields {
			val setBossCogId: FieldId = 1846U.toFieldId()
			val setIndex: FieldId = 1847U.toFieldId()
			val setPosHpr: FieldId = 1848U.toFieldId()
			val requestEnter: FieldId = 1849U.toFieldId()
			val setMovie: FieldId = 1850U.toFieldId()
			val setCannonPosition: FieldId = 1851U.toFieldId()
			val updateCannonPosition: FieldId = 1852U.toFieldId()
			val setCannonLit: FieldId = 1853U.toFieldId()
			val setCannonWillFire: FieldId = 1854U.toFieldId()
			val setLanded: FieldId = 1855U.toFieldId()
			val requestLeave: FieldId = 1856U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1846U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossCogId(it.toUInt32()!!, sender)
			}
		),
		1847U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIndex(it.toUInt8()!!, sender)
			}
		),
		1848U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		1849U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestEnter(sender)
			}
		),
		1850U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt8()!!
				onSetMovie(t0, t1, t2, sender)
				}
			}
		),
		1851U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetCannonPosition(t0, t1, sender)
				}
			}
		),
		1852U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onUpdateCannonPosition(t0, t1, t2, sender)
				}
			}
		),
		1853U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetCannonLit(t0, t1, sender)
				}
			}
		),
		1854U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!
				onSetCannonWillFire(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1855U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetLanded(sender)
			}
		),
		1856U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestLeave(sender)
			}
		),
	)

	fun setBossCogId(arg0: UInt, ) {
		setField(1846U.toFieldId(), arg0.toFieldValue())
	}

	fun setIndex(arg0: UByte, ) {
		setField(1847U.toFieldId(), arg0.toFieldValue())
	}

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(1848U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun requestEnter() {
		setField(1849U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setMovie(arg0: Byte, arg1: UInt, arg2: UByte, ) {
		setField(1850U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setCannonPosition(arg0: Double, arg1: Double, ) {
		setField(1851U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun updateCannonPosition(arg0: UInt, arg1: Double, arg2: Double, ) {
		setField(1852U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setCannonLit(arg0: Double, arg1: Double, ) {
		setField(1853U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setCannonWillFire(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, arg4: Short, ) {
		setField(1854U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun setLanded() {
		setField(1855U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestLeave() {
		setField(1856U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetBossCogId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onRequestEnter(sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: Byte, arg1: UInt, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetCannonPosition(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onUpdateCannonPosition(arg0: UInt, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetCannonLit(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetCannonWillFire(arg0: UInt, arg1: Double, arg2: Double, arg3: Double, arg4: Short, sender: ChannelId? = null) {}
	open fun onSetLanded(sender: ChannelId? = null) {}
	open fun onRequestLeave(sender: ChannelId? = null) {}
}

open class DistributedLawbotChair(doId: DOId): DistributedObjectBase(doId, 332U.toDClassId()) {
	companion object {
		val dClassId = 332U.toDClassId()

		object Fields {
			val setBossCogId: FieldId = 1857U.toFieldId()
			val setIndex: FieldId = 1858U.toFieldId()
			val setState: FieldId = 1859U.toFieldId()
			val showCogJurorFlying: FieldId = 1860U.toFieldId()
			val setToonJurorIndex: FieldId = 1861U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1857U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossCogId(it.toUInt32()!!, sender)
			}
		),
		1858U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIndex(it.toUInt8()!!, sender)
			}
		),
		1859U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Char,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetState(it.toChar()!!, sender)
			}
		),
		1860U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onShowCogJurorFlying(sender)
			}
		),
		1861U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetToonJurorIndex(it.toInt8()!!, sender)
			}
		),
	)

	fun setBossCogId(arg0: UInt, ) {
		setField(1857U.toFieldId(), arg0.toFieldValue())
	}

	fun setIndex(arg0: UByte, ) {
		setField(1858U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: Char, ) {
		setField(1859U.toFieldId(), arg0.toFieldValue())
	}

	fun showCogJurorFlying() {
		setField(1860U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setToonJurorIndex(arg0: Byte, ) {
		setField(1861U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetBossCogId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetState(arg0: Char, sender: ChannelId? = null) {}
	open fun onShowCogJurorFlying(sender: ChannelId? = null) {}
	open fun onSetToonJurorIndex(arg0: Byte, sender: ChannelId? = null) {}
}

open class DistributedLawnDecor(doId: DOId): DistributedObjectBase(doId, 333U.toDClassId()) {
	companion object {
		val dClassId = 333U.toDClassId()

		object Fields {
			val setPlot: FieldId = 1862U.toFieldId()
			val setHeading: FieldId = 1863U.toFieldId()
			val setPosition: FieldId = 1864U.toFieldId()
			val setOwnerIndex: FieldId = 1865U.toFieldId()
			val plotEntered: FieldId = 1866U.toFieldId()
			val removeItem: FieldId = 1867U.toFieldId()
			val setMovie: FieldId = 1868U.toFieldId()
			val movieDone: FieldId = 1869U.toFieldId()
			val interactionDenied: FieldId = 1870U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1862U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPlot(it.toInt8()!!, sender)
			}
		),
		1863U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHeading(it.toInt16()!!.transform {
						divide(10.0f)
					}, sender)
			}
		),
		1864U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosition(t0, t1, t2, sender)
				}
			}
		),
		1865U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOwnerIndex(it.toInt8()!!, sender)
			}
		),
		1866U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onPlotEntered(sender)
			}
		),
		1867U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRemoveItem(sender)
			}
		),
		1868U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt32()!!
				onSetMovie(t0, t1, sender)
				}
			}
		),
		1869U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onMovieDone(sender)
			}
		),
		1870U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onInteractionDenied(it.toUInt32()!!, sender)
			}
		),
	)

	fun setPlot(arg0: Byte, ) {
		setField(1862U.toFieldId(), arg0.toFieldValue())
	}

	fun setHeading(arg0: Double, ) {
		setField(1863U.toFieldId(), arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue())
	}

	fun setPosition(arg0: Double, arg1: Double, arg2: Double, ) {
		setField(1864U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setOwnerIndex(arg0: Byte, ) {
		setField(1865U.toFieldId(), arg0.toFieldValue())
	}

	fun plotEntered() {
		setField(1866U.toFieldId(), FieldValue.EmptyValue)
	}

	fun removeItem() {
		setField(1867U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setMovie(arg0: UByte, arg1: UInt, ) {
		setField(1868U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun movieDone() {
		setField(1869U.toFieldId(), FieldValue.EmptyValue)
	}

	fun interactionDenied(arg0: UInt, ) {
		setField(1870U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetPlot(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetHeading(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetPosition(arg0: Double, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetOwnerIndex(arg0: Byte, sender: ChannelId? = null) {}
	open fun onPlotEntered(sender: ChannelId? = null) {}
	open fun onRemoveItem(sender: ChannelId? = null) {}
	open fun onSetMovie(arg0: UByte, arg1: UInt, sender: ChannelId? = null) {}
	open fun onMovieDone(sender: ChannelId? = null) {}
	open fun onInteractionDenied(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedGardenPlot(doId: DOId): DistributedObjectBase(doId, 334U.toDClassId()) {
	companion object {
		val dClassId = 334U.toDClassId()

		object Fields {
			val plantFlower: FieldId = 1871U.toFieldId()
			val plantGagTree: FieldId = 1872U.toFieldId()
			val plantStatuary: FieldId = 1873U.toFieldId()
			val plantToonStatuary: FieldId = 1874U.toFieldId()
			val plantNothing: FieldId = 1875U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1871U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onPlantFlower(t0, t1, sender)
				}
			}
		),
		1872U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onPlantGagTree(t0, t1, sender)
				}
			}
		),
		1873U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onPlantStatuary(it.toUInt8()!!, sender)
			}
		),
		1874U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt16()!!
				onPlantToonStatuary(t0, t1, sender)
				}
			}
		),
		1875U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onPlantNothing(it.toUInt8()!!, sender)
			}
		),
	)

	fun plantFlower(arg0: UByte, arg1: UByte, ) {
		setField(1871U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun plantGagTree(arg0: UByte, arg1: UByte, ) {
		setField(1872U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun plantStatuary(arg0: UByte, ) {
		setField(1873U.toFieldId(), arg0.toFieldValue())
	}

	fun plantToonStatuary(arg0: UByte, arg1: UShort, ) {
		setField(1874U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun plantNothing(arg0: UByte, ) {
		setField(1875U.toFieldId(), arg0.toFieldValue())
	}

	open fun onPlantFlower(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onPlantGagTree(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onPlantStatuary(arg0: UByte, sender: ChannelId? = null) {}
	open fun onPlantToonStatuary(arg0: UByte, arg1: UShort, sender: ChannelId? = null) {}
	open fun onPlantNothing(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedGardenBox(doId: DOId): DistributedObjectBase(doId, 335U.toDClassId()) {
	companion object {
		val dClassId = 335U.toDClassId()

		object Fields {
			val setTypeIndex: FieldId = 1876U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1876U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTypeIndex(it.toUInt8()!!, sender)
			}
		),
	)

	fun setTypeIndex(arg0: UByte, ) {
		setField(1876U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetTypeIndex(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedStatuary(doId: DOId): DistributedObjectBase(doId, 336U.toDClassId()) {
	companion object {
		val dClassId = 336U.toDClassId()

		object Fields {
			val setTypeIndex: FieldId = 1877U.toFieldId()
			val setWaterLevel: FieldId = 1878U.toFieldId()
			val setGrowthLevel: FieldId = 1879U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1877U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTypeIndex(it.toUInt8()!!, sender)
			}
		),
		1878U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetWaterLevel(it.toInt8()!!, sender)
			}
		),
		1879U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGrowthLevel(it.toInt8()!!, sender)
			}
		),
	)

	fun setTypeIndex(arg0: UByte, ) {
		setField(1877U.toFieldId(), arg0.toFieldValue())
	}

	fun setWaterLevel(arg0: Byte, ) {
		setField(1878U.toFieldId(), arg0.toFieldValue())
	}

	fun setGrowthLevel(arg0: Byte, ) {
		setField(1879U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetTypeIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetWaterLevel(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetGrowthLevel(arg0: Byte, sender: ChannelId? = null) {}
}

open class DistributedToonStatuary(doId: DOId): DistributedObjectBase(doId, 337U.toDClassId()) {
	companion object {
		val dClassId = 337U.toDClassId()

		object Fields {
			val setOptional: FieldId = 1880U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1880U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetOptional(it.toUInt16()!!, sender)
			}
		),
	)

	fun setOptional(arg0: UShort, ) {
		setField(1880U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetOptional(arg0: UShort, sender: ChannelId? = null) {}
}

open class DistributedAnimatedStatuary(doId: DOId): DistributedObjectBase(doId, 338U.toDClassId()) {
	companion object {
		val dClassId = 338U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedChangingStatuary(doId: DOId): DistributedObjectBase(doId, 339U.toDClassId()) {
	companion object {
		val dClassId = 339U.toDClassId()

		object Fields {
			val setGrowthLevel: FieldId = 1881U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1881U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGrowthLevel(it.toInt8()!!, sender)
			}
		),
	)

	fun setGrowthLevel(arg0: Byte, ) {
		setField(1881U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetGrowthLevel(arg0: Byte, sender: ChannelId? = null) {}
}

open class DistributedPlantBase(doId: DOId): DistributedObjectBase(doId, 340U.toDClassId()) {
	companion object {
		val dClassId = 340U.toDClassId()

		object Fields {
			val setTypeIndex: FieldId = 1882U.toFieldId()
			val setWaterLevel: FieldId = 1883U.toFieldId()
			val setGrowthLevel: FieldId = 1884U.toFieldId()
			val waterPlant: FieldId = 1885U.toFieldId()
			val waterPlantDone: FieldId = 1886U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1882U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTypeIndex(it.toUInt8()!!, sender)
			}
		),
		1883U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetWaterLevel(it.toInt8()!!, sender)
			}
		),
		1884U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGrowthLevel(it.toInt8()!!, sender)
			}
		),
		1885U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onWaterPlant(sender)
			}
		),
		1886U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onWaterPlantDone(sender)
			}
		),
	)

	fun setTypeIndex(arg0: UByte, ) {
		setField(1882U.toFieldId(), arg0.toFieldValue())
	}

	fun setWaterLevel(arg0: Byte, ) {
		setField(1883U.toFieldId(), arg0.toFieldValue())
	}

	fun setGrowthLevel(arg0: Byte, ) {
		setField(1884U.toFieldId(), arg0.toFieldValue())
	}

	fun waterPlant() {
		setField(1885U.toFieldId(), FieldValue.EmptyValue)
	}

	fun waterPlantDone() {
		setField(1886U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetTypeIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetWaterLevel(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetGrowthLevel(arg0: Byte, sender: ChannelId? = null) {}
	open fun onWaterPlant(sender: ChannelId? = null) {}
	open fun onWaterPlantDone(sender: ChannelId? = null) {}
}

open class DistributedFlower(doId: DOId): DistributedObjectBase(doId, 341U.toDClassId()) {
	companion object {
		val dClassId = 341U.toDClassId()

		object Fields {
			val setTypeIndex: FieldId = 1887U.toFieldId()
			val setVariety: FieldId = 1888U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1887U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTypeIndex(it.toUInt8()!!, sender)
			}
		),
		1888U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetVariety(it.toUInt8()!!, sender)
			}
		),
	)

	fun setTypeIndex(arg0: UByte, ) {
		setField(1887U.toFieldId(), arg0.toFieldValue())
	}

	fun setVariety(arg0: UByte, ) {
		setField(1888U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetTypeIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetVariety(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedGagTree(doId: DOId): DistributedObjectBase(doId, 342U.toDClassId()) {
	companion object {
		val dClassId = 342U.toDClassId()

		object Fields {
			val setWilted: FieldId = 1889U.toFieldId()
			val requestHarvest: FieldId = 1890U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1889U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetWilted(it.toInt8()!!, sender)
			}
		),
		1890U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestHarvest(sender)
			}
		),
	)

	fun setWilted(arg0: Byte, ) {
		setField(1889U.toFieldId(), arg0.toFieldValue())
	}

	fun requestHarvest() {
		setField(1890U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetWilted(arg0: Byte, sender: ChannelId? = null) {}
	open fun onRequestHarvest(sender: ChannelId? = null) {}
}

open class DistributedTravelGame(doId: DOId): DistributedObjectBase(doId, 343U.toDClassId()) {
	companion object {
		val dClassId = 343U.toDClassId()

		object Fields {
			val setTimerStartTime: FieldId = 1891U.toFieldId()
			val setAvatarChoice: FieldId = 1892U.toFieldId()
			val setAvatarChose: FieldId = 1893U.toFieldId()
			val setServerChoices: FieldId = 1894U.toFieldId()
			val setMinigames: FieldId = 1895U.toFieldId()
			val setBonuses: FieldId = 1896U.toFieldId()
			val setBoardIndex: FieldId = 1897U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1891U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTimerStartTime(it.toInt16()!!, sender)
			}
		),
		1892U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!
				onSetAvatarChoice(t0, t1, sender)
				}
			}
		),
		1893U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarChose(it.toUInt32()!!, sender)
			}
		),
		1894U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toInt16()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				onSetServerChoices(t0, t1, t2, t3, sender)
				}
			}
		),
		1895U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt8()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				onSetMinigames(t0, t1, sender)
				}
			}
		),
		1896U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt8()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				onSetBonuses(t0, t1, sender)
				}
			}
		),
		1897U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBoardIndex(it.toUInt8()!!, sender)
			}
		),
	)

	fun setTimerStartTime(arg0: Short, ) {
		setField(1891U.toFieldId(), arg0.toFieldValue())
	}

	fun setAvatarChoice(arg0: UShort, arg1: UByte, ) {
		setField(1892U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setAvatarChose(arg0: UInt, ) {
		setField(1893U.toFieldId(), arg0.toFieldValue())
	}

	fun setServerChoices(arg0: List<Short>, arg1: List<UByte>, arg2: UByte, arg3: UByte, ) {
		setField(1894U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setMinigames(arg0: List<UByte>, arg1: List<UByte>, ) {
		setField(1895U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setBonuses(arg0: List<UByte>, arg1: List<UByte>, ) {
		setField(1896U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setBoardIndex(arg0: UByte, ) {
		setField(1897U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetTimerStartTime(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetAvatarChoice(arg0: UShort, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetAvatarChose(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetServerChoices(arg0: List<Short>, arg1: List<UByte>, arg2: UByte, arg3: UByte, sender: ChannelId? = null) {}
	open fun onSetMinigames(arg0: List<UByte>, arg1: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetBonuses(arg0: List<UByte>, arg1: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetBoardIndex(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedPairingGame(doId: DOId): DistributedObjectBase(doId, 344U.toDClassId()) {
	companion object {
		val dClassId = 344U.toDClassId()

		object Fields {
			val setDeckSeed: FieldId = 1898U.toFieldId()
			val setMaxOpenCards: FieldId = 1899U.toFieldId()
			val openCardRequest: FieldId = 1900U.toFieldId()
			val openCardResult: FieldId = 1901U.toFieldId()
			val reportDone: FieldId = 1902U.toFieldId()
			val setEveryoneDone: FieldId = 1903U.toFieldId()
			val setSignaling: FieldId = 1904U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1898U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDeckSeed(it.toUInt32()!!, sender)
			}
		),
		1899U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetMaxOpenCards(it.toUInt8()!!, sender)
			}
		),
		1900U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!
				val t1 = values[1].toInt16()!!
				onOpenCardRequest(t0, t1, sender)
				}
			}
		),
		1901U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt16()!!
				val t3 = values[3].toInt8()!!
				val t4 = values[4].toList()!!.map { it.toInt16()!! }
				onOpenCardResult(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		1902U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReportDone(sender)
			}
		),
		1903U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEveryoneDone(sender)
			}
		),
		1904U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetSignaling(it.toUInt32()!!, sender)
			}
		),
	)

	fun setDeckSeed(arg0: UInt, ) {
		setField(1898U.toFieldId(), arg0.toFieldValue())
	}

	fun setMaxOpenCards(arg0: UByte, ) {
		setField(1899U.toFieldId(), arg0.toFieldValue())
	}

	fun openCardRequest(arg0: Short, arg1: Short, ) {
		setField(1900U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun openCardResult(arg0: Short, arg1: UInt, arg2: Short, arg3: Byte, arg4: List<Short>, ) {
		setField(1901U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg4.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun reportDone() {
		setField(1902U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setEveryoneDone() {
		setField(1903U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setSignaling(arg0: UInt, ) {
		setField(1904U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetDeckSeed(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetMaxOpenCards(arg0: UByte, sender: ChannelId? = null) {}
	open fun onOpenCardRequest(arg0: Short, arg1: Short, sender: ChannelId? = null) {}
	open fun onOpenCardResult(arg0: Short, arg1: UInt, arg2: Short, arg3: Byte, arg4: List<Short>, sender: ChannelId? = null) {}
	open fun onReportDone(sender: ChannelId? = null) {}
	open fun onSetEveryoneDone(sender: ChannelId? = null) {}
	open fun onSetSignaling(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedPhysicsWorld(doId: DOId): DistributedObjectBase(doId, 348U.toDClassId()) {
	companion object {
		val dClassId = 348U.toDClassId()

		object Fields {
			val clientCommonObject: FieldId = 1927U.toFieldId()
			val setCommonObjects: FieldId = 1928U.toFieldId()
			val upSetCommonObjects: FieldId = 1929U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1927U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = with(Coord3) { fromFieldValue(it)}
				val t3 = with(Coord3) { fromFieldValue(it)}
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(1000.0f)
					}
				onClientCommonObject(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		1928U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCommonObjects(with(CommonObjectData) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		1929U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onUpSetCommonObjects(with(CommonObjectData) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
	)

	fun clientCommonObject(arg0: UByte, arg1: UByte, arg2: Coord3, arg3: Coord3, arg4: Double, arg5: Double, arg6: Double, ) {
		setField(1927U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			with(Coord3) { arg2.toFieldValue()}, 
			with(Coord3) { arg3.toFieldValue()}, 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
				))
	}

	fun setCommonObjects(arg0: List<CommonObjectData>, ) {
		setField(1928U.toFieldId(), with(CommonObjectData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun upSetCommonObjects(arg0: List<CommonObjectData>, ) {
		setField(1929U.toFieldId(), with(CommonObjectData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	open fun onClientCommonObject(arg0: UByte, arg1: UByte, arg2: Coord3, arg3: Coord3, arg4: Double, arg5: Double, arg6: Double, sender: ChannelId? = null) {}
	open fun onSetCommonObjects(arg0: List<CommonObjectData>, sender: ChannelId? = null) {}
	open fun onUpSetCommonObjects(arg0: List<CommonObjectData>, sender: ChannelId? = null) {}
}

open class DistributedGolfHole(doId: DOId): DistributedObjectBase(doId, 349U.toDClassId()) {
	companion object {
		val dClassId = 349U.toDClassId()

		object Fields {
			val setHoleId: FieldId = 1930U.toFieldId()
			val setTimingCycleLength: FieldId = 1931U.toFieldId()
			val setAvatarReadyHole: FieldId = 1932U.toFieldId()
			val setGolfCourseDoId: FieldId = 1933U.toFieldId()
			val turnDone: FieldId = 1934U.toFieldId()
			val ballInHole: FieldId = 1935U.toFieldId()
			val setAvatarTempTee: FieldId = 1936U.toFieldId()
			val setTempAimHeading: FieldId = 1937U.toFieldId()
			val setAvatarFinalTee: FieldId = 1938U.toFieldId()
			val setGolferIds: FieldId = 1939U.toFieldId()
			val golfersTurn: FieldId = 1940U.toFieldId()
			val golferChooseTee: FieldId = 1941U.toFieldId()
			val setAvatarTee: FieldId = 1942U.toFieldId()
			val postSwing: FieldId = 1943U.toFieldId()
			val postSwingState: FieldId = 1944U.toFieldId()
			val swing: FieldId = 1945U.toFieldId()
			val ballMovie2AI: FieldId = 1946U.toFieldId()
			val ballMovie2Client: FieldId = 1947U.toFieldId()
			val assignRecordSwing: FieldId = 1948U.toFieldId()
			val setBox: FieldId = 1949U.toFieldId()
			val sendBox: FieldId = 1950U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1930U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHoleId(it.toInt8()!!, sender)
			}
		),
		1931U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTimingCycleLength(it.toUInt32()!!.transform {
						divide(1000.0f)
					}, sender)
			}
		),
		1932U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarReadyHole(sender)
			}
		),
		1933U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGolfCourseDoId(it.toUInt32()!!, sender)
			}
		),
		1934U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onTurnDone(sender)
			}
		),
		1935U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onBallInHole(sender)
			}
		),
		1936U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onSetAvatarTempTee(t0, t1, sender)
				}
			}
		),
		1937U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!.transform {
						divide(1000.0f)
					}
				onSetTempAimHeading(t0, t1, sender)
				}
			}
		),
		1938U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onSetAvatarFinalTee(t0, t1, sender)
				}
			}
		),
		1939U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGolferIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1940U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onGolfersTurn(it.toUInt32()!!, sender)
			}
		),
		1941U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onGolferChooseTee(it.toUInt32()!!, sender)
			}
		),
		1942U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarTee(it.toUInt8()!!, sender)
			}
		),
		1943U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!.transform {
						divide(1000.0f)
					}
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(1000.0f)
					}
				onPostSwing(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		1944U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!.transform {
						divide(1000.0f)
					}
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t7 = values[7].toUInt16()!!.transform {
						divide(100.0f)
					}
				val t8 = with(CommonObjectData) { values[8].toList()!!.map { fromFieldValue(it) }}
				onPostSwingState(t0, t1, t2, t3, t4, t5, t6, t7, t8, sender)
				}
			}
		),
		1945U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(1000.0f)
					}
				onSwing(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		1946U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!.transform {
						divide(1000.0f)
					}
				val t1 = values[1].toUInt32()!!
				val t2 = with(golfData) { values[2].toList()!!.map { fromFieldValue(it) }}
				val t3 = with(golfData) { values[3].toList()!!.map { fromFieldValue(it) }}
				val t4 = values[4].toUInt16()!!
				val t5 = values[5].toUInt16()!!
				val t6 = values[6].toUInt16()!!
				val t7 = with(CommonObjectData) { values[7].toList()!!.map { fromFieldValue(it) }}
				onBallMovie2AI(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		1947U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!.transform {
						divide(1000.0f)
					}
				val t1 = values[1].toUInt32()!!
				val t2 = with(golfData) { values[2].toList()!!.map { fromFieldValue(it) }}
				val t3 = with(golfData) { values[3].toList()!!.map { fromFieldValue(it) }}
				val t4 = values[4].toUInt16()!!
				val t5 = values[5].toUInt16()!!
				val t6 = values[6].toUInt16()!!
				val t7 = with(CommonObjectData) { values[7].toList()!!.map { fromFieldValue(it) }}
				onBallMovie2Client(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		1948U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toInt32()!!
				val t3 = values[3].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t7 = values[7].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t8 = with(CommonObjectData) { values[8].toList()!!.map { fromFieldValue(it) }}
				onAssignRecordSwing(t0, t1, t2, t3, t4, t5, t6, t7, t8, sender)
				}
			}
		),
		1949U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t1 = values[1].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t7 = values[7].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t8 = values[8].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t9 = values[9].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t10 = values[10].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t11 = values[11].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t12 = values[12].toInt32()!!.transform {
						divide(1000.0f)
					}
				onSetBox(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, sender)
				}
			}
		),
		1950U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t1 = values[1].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t7 = values[7].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t8 = values[8].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t9 = values[9].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t10 = values[10].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t11 = values[11].toInt32()!!.transform {
						divide(1000.0f)
					}
				val t12 = values[12].toInt32()!!.transform {
						divide(1000.0f)
					}
				onSendBox(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, sender)
				}
			}
		),
	)

	fun setHoleId(arg0: Byte, ) {
		setField(1930U.toFieldId(), arg0.toFieldValue())
	}

	fun setTimingCycleLength(arg0: Double, ) {
		setField(1931U.toFieldId(), arg0.unTransform(FieldValue.Type.UInt32) {
			divide(1000.0f)
		}.toFieldValue())
	}

	fun setAvatarReadyHole() {
		setField(1932U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setGolfCourseDoId(arg0: UInt, ) {
		setField(1933U.toFieldId(), arg0.toFieldValue())
	}

	fun turnDone() {
		setField(1934U.toFieldId(), FieldValue.EmptyValue)
	}

	fun ballInHole() {
		setField(1935U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setAvatarTempTee(arg0: UInt, arg1: UByte, ) {
		setField(1936U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setTempAimHeading(arg0: UInt, arg1: Double, ) {
		setField(1937U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
				))
	}

	fun setAvatarFinalTee(arg0: UInt, arg1: UByte, ) {
		setField(1938U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setGolferIds(arg0: List<UInt>, ) {
		setField(1939U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun golfersTurn(arg0: UInt, ) {
		setField(1940U.toFieldId(), arg0.toFieldValue())
	}

	fun golferChooseTee(arg0: UInt, ) {
		setField(1941U.toFieldId(), arg0.toFieldValue())
	}

	fun setAvatarTee(arg0: UByte, ) {
		setField(1942U.toFieldId(), arg0.toFieldValue())
	}

	fun postSwing(arg0: Double, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, ) {
		setField(1943U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.UInt32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
				))
	}

	fun postSwingState(arg0: Double, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: List<CommonObjectData>, ) {
		setField(1944U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.UInt32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg7.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
		}.toFieldValue(), 
			with(CommonObjectData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg8.map { it.toFieldValue() }).toFieldValue()}, 
				))
	}

	fun swing(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, ) {
		setField(1945U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
				))
	}

	fun ballMovie2AI(arg0: Double, arg1: UInt, arg2: List<golfData>, arg3: List<golfData>, arg4: UShort, arg5: UShort, arg6: UShort, arg7: List<CommonObjectData>, ) {
		setField(1946U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.UInt32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg1.toFieldValue(), 
			with(golfData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg2.map { it.toFieldValue() }).toFieldValue()}, 
			with(golfData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg3.map { it.toFieldValue() }).toFieldValue()}, 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
			with(CommonObjectData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg7.map { it.toFieldValue() }).toFieldValue()}, 
				))
	}

	fun ballMovie2Client(arg0: Double, arg1: UInt, arg2: List<golfData>, arg3: List<golfData>, arg4: UShort, arg5: UShort, arg6: UShort, arg7: List<CommonObjectData>, ) {
		setField(1947U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.UInt32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg1.toFieldValue(), 
			with(golfData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg2.map { it.toFieldValue() }).toFieldValue()}, 
			with(golfData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg3.map { it.toFieldValue() }).toFieldValue()}, 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
			with(CommonObjectData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg7.map { it.toFieldValue() }).toFieldValue()}, 
				))
	}

	fun assignRecordSwing(arg0: UInt, arg1: Double, arg2: Int, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: List<CommonObjectData>, ) {
		setField(1948U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg7.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			with(CommonObjectData) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg8.map { it.toFieldValue() }).toFieldValue()}, 
				))
	}

	fun setBox(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Double, arg9: Double, arg10: Double, arg11: Double, arg12: Double, ) {
		setField(1949U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg7.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg8.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg9.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg10.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg11.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg12.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
				))
	}

	fun sendBox(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Double, arg9: Double, arg10: Double, arg11: Double, arg12: Double, ) {
		setField(1950U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg7.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg8.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg9.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg10.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg11.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
			arg12.unTransform(FieldValue.Type.Int32) {
			divide(1000.0f)
		}.toFieldValue(), 
				))
	}

	open fun onSetHoleId(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetTimingCycleLength(arg0: Double, sender: ChannelId? = null) {}
	open fun onSetAvatarReadyHole(sender: ChannelId? = null) {}
	open fun onSetGolfCourseDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onTurnDone(sender: ChannelId? = null) {}
	open fun onBallInHole(sender: ChannelId? = null) {}
	open fun onSetAvatarTempTee(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetTempAimHeading(arg0: UInt, arg1: Double, sender: ChannelId? = null) {}
	open fun onSetAvatarFinalTee(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetGolferIds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onGolfersTurn(arg0: UInt, sender: ChannelId? = null) {}
	open fun onGolferChooseTee(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetAvatarTee(arg0: UByte, sender: ChannelId? = null) {}
	open fun onPostSwing(arg0: Double, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, sender: ChannelId? = null) {}
	open fun onPostSwingState(arg0: Double, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: List<CommonObjectData>, sender: ChannelId? = null) {}
	open fun onSwing(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, sender: ChannelId? = null) {}
	open fun onBallMovie2AI(arg0: Double, arg1: UInt, arg2: List<golfData>, arg3: List<golfData>, arg4: UShort, arg5: UShort, arg6: UShort, arg7: List<CommonObjectData>, sender: ChannelId? = null) {}
	open fun onBallMovie2Client(arg0: Double, arg1: UInt, arg2: List<golfData>, arg3: List<golfData>, arg4: UShort, arg5: UShort, arg6: UShort, arg7: List<CommonObjectData>, sender: ChannelId? = null) {}
	open fun onAssignRecordSwing(arg0: UInt, arg1: Double, arg2: Int, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: List<CommonObjectData>, sender: ChannelId? = null) {}
	open fun onSetBox(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Double, arg9: Double, arg10: Double, arg11: Double, arg12: Double, sender: ChannelId? = null) {}
	open fun onSendBox(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Double, arg9: Double, arg10: Double, arg11: Double, arg12: Double, sender: ChannelId? = null) {}
}

open class DistributedGolfCourse(doId: DOId): DistributedObjectBase(doId, 350U.toDClassId()) {
	companion object {
		val dClassId = 350U.toDClassId()

		object Fields {
			val setGolferIds: FieldId = 1951U.toFieldId()
			val setCourseId: FieldId = 1952U.toFieldId()
			val setAvatarJoined: FieldId = 1953U.toFieldId()
			val setAvatarReadyCourse: FieldId = 1954U.toFieldId()
			val setAvatarReadyHole: FieldId = 1955U.toFieldId()
			val setAvatarExited: FieldId = 1956U.toFieldId()
			val setCurHoleIndex: FieldId = 1957U.toFieldId()
			val setCurHoleDoId: FieldId = 1958U.toFieldId()
			val setDoneReward: FieldId = 1959U.toFieldId()
			val setReward: FieldId = 1960U.toFieldId()
			val setCourseReady: FieldId = 1961U.toFieldId()
			val setHoleStart: FieldId = 1962U.toFieldId()
			val setCourseExit: FieldId = 1963U.toFieldId()
			val setCourseAbort: FieldId = 1964U.toFieldId()
			val setPlayHole: FieldId = 1965U.toFieldId()
			val avExited: FieldId = 1966U.toFieldId()
			val setScores: FieldId = 1967U.toFieldId()
			val changeDrivePermission: FieldId = 1968U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1951U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGolferIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		1952U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCourseId(it.toInt8()!!, sender)
			}
		),
		1953U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarJoined(sender)
			}
		),
		1954U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarReadyCourse(sender)
			}
		),
		1955U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarReadyHole(sender)
			}
		),
		1956U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetAvatarExited(sender)
			}
		),
		1957U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCurHoleIndex(it.toInt8()!!, sender)
			}
		),
		1958U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCurHoleDoId(it.toUInt32()!!, sender)
			}
		),
		1959U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetDoneReward(sender)
			}
		),
		1960U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.UInt8)), FieldValue.Type.Array(FieldValue.Type.Int8), FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.UInt8)), FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.UInt8)), FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.UInt8)), FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toList()!!.map { it.toUInt8()!! } }
				val t1 = values[1].toList()!!.map { it.toInt8()!! }
				val t2 = values[2].toList()!!.map { it.toList()!!.map { it.toUInt8()!! } }
				val t3 = values[3].toList()!!.map { it.toList()!!.map { it.toUInt8()!! } }
				val t4 = values[4].toList()!!.map { it.toList()!!.map { it.toUInt8()!! } }
				val t5 = values[5].toUInt32()!!
				val t6 = values[6].toUInt32()!!.transform {
						divide(100.0f)
					}
				val t7 = values[7].toUInt32()!!.transform {
						divide(100.0f)
					}
				val t8 = values[8].toUInt32()!!.transform {
						divide(100.0f)
					}
				val t9 = values[9].toUInt32()!!.transform {
						divide(100.0f)
					}
				onSetReward(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, sender)
				}
			}
		),
		1961U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toList()!!.map { it.toInt16()!! }
				val t2 = values[2].toInt8()!!
				onSetCourseReady(t0, t1, t2, sender)
				}
			}
		),
		1962U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetHoleStart(it.toInt16()!!, sender)
			}
		),
		1963U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCourseExit(sender)
			}
		),
		1964U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCourseAbort(it.toUInt32()!!, sender)
			}
		),
		1965U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPlayHole(sender)
			}
		),
		1966U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAvExited(it.toUInt32()!!, sender)
			}
		),
		1967U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Int16),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetScores(it.toList()!!.map { it.toInt16()!! }, sender)
			}
		),
		1968U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				onChangeDrivePermission(t0, t1, sender)
				}
			}
		),
	)

	fun setGolferIds(arg0: List<UInt>, ) {
		setField(1951U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCourseId(arg0: Byte, ) {
		setField(1952U.toFieldId(), arg0.toFieldValue())
	}

	fun setAvatarJoined() {
		setField(1953U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setAvatarReadyCourse() {
		setField(1954U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setAvatarReadyHole() {
		setField(1955U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setAvatarExited() {
		setField(1956U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setCurHoleIndex(arg0: Byte, ) {
		setField(1957U.toFieldId(), arg0.toFieldValue())
	}

	fun setCurHoleDoId(arg0: UInt, ) {
		setField(1958U.toFieldId(), arg0.toFieldValue())
	}

	fun setDoneReward() {
		setField(1959U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setReward(arg0: List<List<UByte>>, arg1: List<Byte>, arg2: List<List<UByte>>, arg3: List<List<UByte>>, arg4: List<List<UByte>>, arg5: UInt, arg6: Double, arg7: Double, arg8: Double, arg9: Double, ) {
		setField(1960U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.Array(FieldValue.Type.UInt8), arg0.map { it.map { it.toFieldValue() }.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int8, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Array(FieldValue.Type.UInt8), arg2.map { it.map { it.toFieldValue() }.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Array(FieldValue.Type.UInt8), arg3.map { it.map { it.toFieldValue() }.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Array(FieldValue.Type.UInt8), arg4.map { it.map { it.toFieldValue() }.toFieldValue() }).toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg7.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg8.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg9.unTransform(FieldValue.Type.UInt32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setCourseReady(arg0: Byte, arg1: List<Short>, arg2: Byte, ) {
		setField(1961U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg1.map { it.toFieldValue() }).toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setHoleStart(arg0: Short, ) {
		setField(1962U.toFieldId(), arg0.toFieldValue())
	}

	fun setCourseExit() {
		setField(1963U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setCourseAbort(arg0: UInt, ) {
		setField(1964U.toFieldId(), arg0.toFieldValue())
	}

	fun setPlayHole() {
		setField(1965U.toFieldId(), FieldValue.EmptyValue)
	}

	fun avExited(arg0: UInt, ) {
		setField(1966U.toFieldId(), arg0.toFieldValue())
	}

	fun setScores(arg0: List<Short>, ) {
		setField(1967U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.Int16, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun changeDrivePermission(arg0: UInt, arg1: Byte, ) {
		setField(1968U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetGolferIds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetCourseId(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetAvatarJoined(sender: ChannelId? = null) {}
	open fun onSetAvatarReadyCourse(sender: ChannelId? = null) {}
	open fun onSetAvatarReadyHole(sender: ChannelId? = null) {}
	open fun onSetAvatarExited(sender: ChannelId? = null) {}
	open fun onSetCurHoleIndex(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetCurHoleDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDoneReward(sender: ChannelId? = null) {}
	open fun onSetReward(arg0: List<List<UByte>>, arg1: List<Byte>, arg2: List<List<UByte>>, arg3: List<List<UByte>>, arg4: List<List<UByte>>, arg5: UInt, arg6: Double, arg7: Double, arg8: Double, arg9: Double, sender: ChannelId? = null) {}
	open fun onSetCourseReady(arg0: Byte, arg1: List<Short>, arg2: Byte, sender: ChannelId? = null) {}
	open fun onSetHoleStart(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetCourseExit(sender: ChannelId? = null) {}
	open fun onSetCourseAbort(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetPlayHole(sender: ChannelId? = null) {}
	open fun onAvExited(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetScores(arg0: List<Short>, sender: ChannelId? = null) {}
	open fun onChangeDrivePermission(arg0: UInt, arg1: Byte, sender: ChannelId? = null) {}
}

open class DistributedVineGame(doId: DOId): DistributedObjectBase(doId, 351U.toDClassId()) {
	companion object {
		val dClassId = 351U.toDClassId()

		object Fields {
			val reachedEndVine: FieldId = 1969U.toFieldId()
			val setNewVine: FieldId = 1970U.toFieldId()
			val setNewVineT: FieldId = 1971U.toFieldId()
			val setJumpingFromVine: FieldId = 1972U.toFieldId()
			val claimTreasure: FieldId = 1973U.toFieldId()
			val setTreasureGrabbed: FieldId = 1974U.toFieldId()
			val setScore: FieldId = 1975U.toFieldId()
			val allAtEndVine: FieldId = 1976U.toFieldId()
			val setFallingFromVine: FieldId = 1977U.toFieldId()
			val setFallingFromMidair: FieldId = 1978U.toFieldId()
			val setVineSections: FieldId = 1979U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1969U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReachedEndVine(it.toInt8()!!, sender)
			}
		),
		1970U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt32()!!.transform {
						divide(10000.0f)
					}
				val t3 = values[3].toInt8()!!
				onSetNewVine(t0, t1, t2, t3, sender)
				}
			}
		),
		1971U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!.transform {
						divide(10000.0f)
					}
				val t2 = values[2].toInt8()!!
				onSetNewVineT(t0, t1, t2, sender)
				}
			}
		),
		1972U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toInt16()!!
				onSetJumpingFromVine(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		1973U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onClaimTreasure(it.toUInt32()!!, sender)
			}
		),
		1974U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetTreasureGrabbed(t0, t1, sender)
				}
			}
		),
		1975U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetScore(t0, t1, sender)
				}
			}
		),
		1976U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAllAtEndVine(sender)
			}
		),
		1977U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toInt16()!!
				val t7 = values[7].toInt8()!!
				onSetFallingFromVine(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		1978U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt16()!!
				val t6 = values[6].toInt8()!!
				onSetFallingFromMidair(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		1979U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetVineSections(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
	)

	fun reachedEndVine(arg0: Byte, ) {
		setField(1969U.toFieldId(), arg0.toFieldValue())
	}

	fun setNewVine(arg0: UInt, arg1: Byte, arg2: Double, arg3: Byte, ) {
		setField(1970U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.UInt32) {
			divide(10000.0f)
		}.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setNewVineT(arg0: UInt, arg1: Double, arg2: Byte, ) {
		setField(1971U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt32) {
			divide(10000.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setJumpingFromVine(arg0: UInt, arg1: Byte, arg2: Byte, arg3: Double, arg4: Double, arg5: Double, arg6: Short, ) {
		setField(1972U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.toFieldValue(), 
				))
	}

	fun claimTreasure(arg0: UInt, ) {
		setField(1973U.toFieldId(), arg0.toFieldValue())
	}

	fun setTreasureGrabbed(arg0: UInt, arg1: UInt, ) {
		setField(1974U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setScore(arg0: UInt, arg1: UInt, ) {
		setField(1975U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun allAtEndVine() {
		setField(1976U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setFallingFromVine(arg0: UInt, arg1: Byte, arg2: Byte, arg3: Double, arg4: Double, arg5: Double, arg6: Short, arg7: Byte, ) {
		setField(1977U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.toFieldValue(), 
			arg7.toFieldValue(), 
				))
	}

	fun setFallingFromMidair(arg0: UInt, arg1: Byte, arg2: Double, arg3: Double, arg4: Double, arg5: Short, arg6: Byte, ) {
		setField(1978U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
				))
	}

	fun setVineSections(arg0: List<UByte>, ) {
		setField(1979U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	open fun onReachedEndVine(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetNewVine(arg0: UInt, arg1: Byte, arg2: Double, arg3: Byte, sender: ChannelId? = null) {}
	open fun onSetNewVineT(arg0: UInt, arg1: Double, arg2: Byte, sender: ChannelId? = null) {}
	open fun onSetJumpingFromVine(arg0: UInt, arg1: Byte, arg2: Byte, arg3: Double, arg4: Double, arg5: Double, arg6: Short, sender: ChannelId? = null) {}
	open fun onClaimTreasure(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetTreasureGrabbed(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetScore(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onAllAtEndVine(sender: ChannelId? = null) {}
	open fun onSetFallingFromVine(arg0: UInt, arg1: Byte, arg2: Byte, arg3: Double, arg4: Double, arg5: Double, arg6: Short, arg7: Byte, sender: ChannelId? = null) {}
	open fun onSetFallingFromMidair(arg0: UInt, arg1: Byte, arg2: Double, arg3: Double, arg4: Double, arg5: Short, arg6: Byte, sender: ChannelId? = null) {}
	open fun onSetVineSections(arg0: List<UByte>, sender: ChannelId? = null) {}
}

open class TTAvatarFriendsManager(doId: DOId): DistributedObjectBase(doId, 352U.toDClassId()) {
	companion object {
		val dClassId = 352U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class TTPlayerFriendsManager(doId: DOId): DistributedObjectBase(doId, 353U.toDClassId()) {
	companion object {
		val dClassId = 353U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class TTSpeedchatRelay(doId: DOId): DistributedObjectBase(doId, 354U.toDClassId()) {
	companion object {
		val dClassId = 354U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedGolfKart(doId: DOId): DistributedObjectBase(doId, 355U.toDClassId()) {
	companion object {
		val dClassId = 355U.toDClassId()

		object Fields {
			val setState: FieldId = 1980U.toFieldId()
			val fillSlot0: FieldId = 1981U.toFieldId()
			val fillSlot1: FieldId = 1982U.toFieldId()
			val fillSlot2: FieldId = 1983U.toFieldId()
			val fillSlot3: FieldId = 1984U.toFieldId()
			val emptySlot0: FieldId = 1985U.toFieldId()
			val emptySlot1: FieldId = 1986U.toFieldId()
			val emptySlot2: FieldId = 1987U.toFieldId()
			val emptySlot3: FieldId = 1988U.toFieldId()
			val requestBoard: FieldId = 1989U.toFieldId()
			val rejectBoard: FieldId = 1990U.toFieldId()
			val requestExit: FieldId = 1991U.toFieldId()
			val setMinigameZone: FieldId = 1992U.toFieldId()
			val setGolfZone: FieldId = 1993U.toFieldId()
			val setGolfCourse: FieldId = 1994U.toFieldId()
			val setPosHpr: FieldId = 1995U.toFieldId()
			val setColor: FieldId = 1996U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1980U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toInt16()!!
				onSetState(t0, t1, sender)
				}
			}
		),
		1981U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot0(it.toUInt32()!!, sender)
			}
		),
		1982U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot1(it.toUInt32()!!, sender)
			}
		),
		1983U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot2(it.toUInt32()!!, sender)
			}
		),
		1984U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot3(it.toUInt32()!!, sender)
			}
		),
		1985U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot0(t0, t1, sender)
				}
			}
		),
		1986U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot1(t0, t1, sender)
				}
			}
		),
		1987U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot2(t0, t1, sender)
				}
			}
		),
		1988U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot3(t0, t1, sender)
				}
			}
		),
		1989U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBoard(sender)
			}
		),
		1990U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectBoard(it.toUInt32()!!, sender)
			}
		),
		1991U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		1992U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetMinigameZone(t0, t1, sender)
				}
			}
		),
		1993U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetGolfZone(t0, t1, sender)
				}
			}
		),
		1994U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGolfCourse(it.toInt8()!!, sender)
			}
		),
		1995U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		1996U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toInt16()!!
				onSetColor(t0, t1, t2, sender)
				}
			}
		),
	)

	fun setState(arg0: String, arg1: Short, ) {
		setField(1980U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun fillSlot0(arg0: UInt, ) {
		setField(1981U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot1(arg0: UInt, ) {
		setField(1982U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot2(arg0: UInt, ) {
		setField(1983U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot3(arg0: UInt, ) {
		setField(1984U.toFieldId(), arg0.toFieldValue())
	}

	fun emptySlot0(arg0: UInt, arg1: Short, ) {
		setField(1985U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun emptySlot1(arg0: UInt, arg1: Short, ) {
		setField(1986U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun emptySlot2(arg0: UInt, arg1: Short, ) {
		setField(1987U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun emptySlot3(arg0: UInt, arg1: Short, ) {
		setField(1988U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestBoard() {
		setField(1989U.toFieldId(), FieldValue.EmptyValue)
	}

	fun rejectBoard(arg0: UInt, ) {
		setField(1990U.toFieldId(), arg0.toFieldValue())
	}

	fun requestExit() {
		setField(1991U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setMinigameZone(arg0: UInt, arg1: UShort, ) {
		setField(1992U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setGolfZone(arg0: UInt, arg1: UShort, ) {
		setField(1993U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setGolfCourse(arg0: Byte, ) {
		setField(1994U.toFieldId(), arg0.toFieldValue())
	}

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(1995U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setColor(arg0: Short, arg1: Short, arg2: Short, ) {
		setField(1996U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onSetState(arg0: String, arg1: Short, sender: ChannelId? = null) {}
	open fun onFillSlot0(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot1(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot2(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot3(arg0: UInt, sender: ChannelId? = null) {}
	open fun onEmptySlot0(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot1(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot2(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot3(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onRequestBoard(sender: ChannelId? = null) {}
	open fun onRejectBoard(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onSetMinigameZone(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetGolfZone(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetGolfCourse(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetColor(arg0: Short, arg1: Short, arg2: Short, sender: ChannelId? = null) {}
}

open class DistributedTimer(doId: DOId): DistributedObjectBase(doId, 356U.toDClassId()) {
	companion object {
		val dClassId = 356U.toDClassId()

		object Fields {
			val setStartTime: FieldId = 1997U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1997U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetStartTime(it.toInt32()!!, sender)
			}
		),
	)

	fun setStartTime(arg0: Int, ) {
		setField(1997U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetStartTime(arg0: Int, sender: ChannelId? = null) {}
}

open class DistributedPicnicBasket(doId: DOId): DistributedObjectBase(doId, 357U.toDClassId()) {
	companion object {
		val dClassId = 357U.toDClassId()

		object Fields {
			val setState: FieldId = 1998U.toFieldId()
			val fillSlot0: FieldId = 1999U.toFieldId()
			val fillSlot1: FieldId = 2000U.toFieldId()
			val fillSlot2: FieldId = 2001U.toFieldId()
			val fillSlot3: FieldId = 2002U.toFieldId()
			val emptySlot0: FieldId = 2003U.toFieldId()
			val emptySlot1: FieldId = 2004U.toFieldId()
			val emptySlot2: FieldId = 2005U.toFieldId()
			val emptySlot3: FieldId = 2006U.toFieldId()
			val requestBoard: FieldId = 2007U.toFieldId()
			val rejectBoard: FieldId = 2008U.toFieldId()
			val requestExit: FieldId = 2009U.toFieldId()
			val doneExit: FieldId = 2010U.toFieldId()
			val setMinigameZone: FieldId = 2011U.toFieldId()
			val setPicnicDone: FieldId = 2012U.toFieldId()
			val setPosHpr: FieldId = 2013U.toFieldId()
			val setTableNumber: FieldId = 2014U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		1998U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toInt16()!!
				onSetState(t0, t1, t2, sender)
				}
			}
		),
		1999U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot0(it.toUInt32()!!, sender)
			}
		),
		2000U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot1(it.toUInt32()!!, sender)
			}
		),
		2001U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot2(it.toUInt32()!!, sender)
			}
		),
		2002U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onFillSlot3(it.toUInt32()!!, sender)
			}
		),
		2003U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot0(t0, t1, sender)
				}
			}
		),
		2004U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot1(t0, t1, sender)
				}
			}
		),
		2005U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot2(t0, t1, sender)
				}
			}
		),
		2006U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onEmptySlot3(t0, t1, sender)
				}
			}
		),
		2007U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBoard(it.toInt16()!!, sender)
			}
		),
		2008U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onRejectBoard(it.toUInt32()!!, sender)
			}
		),
		2009U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		2010U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onDoneExit(sender)
			}
		),
		2011U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				onSetMinigameZone(t0, t1, sender)
				}
			}
		),
		2012U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetPicnicDone(sender)
			}
		),
		2013U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		2014U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTableNumber(it.toInt16()!!, sender)
			}
		),
	)

	fun setState(arg0: String, arg1: UShort, arg2: Short, ) {
		setField(1998U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun fillSlot0(arg0: UInt, ) {
		setField(1999U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot1(arg0: UInt, ) {
		setField(2000U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot2(arg0: UInt, ) {
		setField(2001U.toFieldId(), arg0.toFieldValue())
	}

	fun fillSlot3(arg0: UInt, ) {
		setField(2002U.toFieldId(), arg0.toFieldValue())
	}

	fun emptySlot0(arg0: UInt, arg1: Short, ) {
		setField(2003U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun emptySlot1(arg0: UInt, arg1: Short, ) {
		setField(2004U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun emptySlot2(arg0: UInt, arg1: Short, ) {
		setField(2005U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun emptySlot3(arg0: UInt, arg1: Short, ) {
		setField(2006U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestBoard(arg0: Short, ) {
		setField(2007U.toFieldId(), arg0.toFieldValue())
	}

	fun rejectBoard(arg0: UInt, ) {
		setField(2008U.toFieldId(), arg0.toFieldValue())
	}

	fun requestExit() {
		setField(2009U.toFieldId(), FieldValue.EmptyValue)
	}

	fun doneExit() {
		setField(2010U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setMinigameZone(arg0: UInt, arg1: UShort, ) {
		setField(2011U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setPicnicDone() {
		setField(2012U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(2013U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setTableNumber(arg0: Short, ) {
		setField(2014U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetState(arg0: String, arg1: UShort, arg2: Short, sender: ChannelId? = null) {}
	open fun onFillSlot0(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot1(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot2(arg0: UInt, sender: ChannelId? = null) {}
	open fun onFillSlot3(arg0: UInt, sender: ChannelId? = null) {}
	open fun onEmptySlot0(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot1(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot2(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onEmptySlot3(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onRequestBoard(arg0: Short, sender: ChannelId? = null) {}
	open fun onRejectBoard(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onDoneExit(sender: ChannelId? = null) {}
	open fun onSetMinigameZone(arg0: UInt, arg1: UShort, sender: ChannelId? = null) {}
	open fun onSetPicnicDone(sender: ChannelId? = null) {}
	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetTableNumber(arg0: Short, sender: ChannelId? = null) {}
}

open class DistributedBossbotBoss(doId: DOId): DistributedObjectBase(doId, 358U.toDClassId()) {
	companion object {
		val dClassId = 358U.toDClassId()

		object Fields {
			val setState: FieldId = 2015U.toFieldId()
			val setBattleDifficulty: FieldId = 2016U.toFieldId()
			val requestGetFood: FieldId = 2017U.toFieldId()
			val toonGotFood: FieldId = 2018U.toFieldId()
			val requestServeFood: FieldId = 2019U.toFieldId()
			val toonServeFood: FieldId = 2020U.toFieldId()
			val hitBoss: FieldId = 2021U.toFieldId()
			val hitToon: FieldId = 2022U.toFieldId()
			val ballHitBoss: FieldId = 2023U.toFieldId()
			val setBossDamage: FieldId = 2024U.toFieldId()
			val setSpeedDamage: FieldId = 2025U.toFieldId()
			val reachedTable: FieldId = 2026U.toFieldId()
			val hitTable: FieldId = 2027U.toFieldId()
			val awayFromTable: FieldId = 2028U.toFieldId()
			val toonGotHealed: FieldId = 2029U.toFieldId()
			val requestGetToonup: FieldId = 2030U.toFieldId()
			val toonGotToonup: FieldId = 2031U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2015U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetState(it.toStringValue()!!, sender)
			}
		),
		2016U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBattleDifficulty(it.toUInt8()!!, sender)
			}
		),
		2017U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt32()!!
				onRequestGetFood(t0, t1, t2, sender)
				}
			}
		),
		2018U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toUInt32()!!
				onToonGotFood(t0, t1, t2, t3, sender)
				}
			}
		),
		2019U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				onRequestServeFood(t0, t1, sender)
				}
			}
		),
		2020U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				onToonServeFood(t0, t1, t2, sender)
				}
			}
		),
		2021U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitBoss(it.toUInt8()!!, sender)
			}
		),
		2022U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitToon(it.toUInt32()!!, sender)
			}
		),
		2023U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onBallHitBoss(it.toUInt8()!!, sender)
			}
		),
		2024U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toInt16()!!
				onSetBossDamage(t0, t1, t2, sender)
				}
			}
		),
		2025U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toInt16()!!
				onSetSpeedDamage(t0, t1, t2, sender)
				}
			}
		),
		2026U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReachedTable(it.toUInt8()!!, sender)
			}
		),
		2027U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onHitTable(it.toUInt8()!!, sender)
			}
		),
		2028U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onAwayFromTable(it.toUInt8()!!, sender)
			}
		),
		2029U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onToonGotHealed(it.toUInt32()!!, sender)
			}
		),
		2030U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt32()!!
				onRequestGetToonup(t0, t1, t2, sender)
				}
			}
		),
		2031U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toUInt32()!!
				onToonGotToonup(t0, t1, t2, t3, sender)
				}
			}
		),
	)

	fun setState(arg0: String, ) {
		setField(2015U.toFieldId(), arg0.toFieldValue())
	}

	fun setBattleDifficulty(arg0: UByte, ) {
		setField(2016U.toFieldId(), arg0.toFieldValue())
	}

	fun requestGetFood(arg0: Byte, arg1: Byte, arg2: UInt, ) {
		setField(2017U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun toonGotFood(arg0: UInt, arg1: Byte, arg2: Byte, arg3: UInt, ) {
		setField(2018U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun requestServeFood(arg0: Byte, arg1: Byte, ) {
		setField(2019U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun toonServeFood(arg0: UInt, arg1: Byte, arg2: Byte, ) {
		setField(2020U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun hitBoss(arg0: UByte, ) {
		setField(2021U.toFieldId(), arg0.toFieldValue())
	}

	fun hitToon(arg0: UInt, ) {
		setField(2022U.toFieldId(), arg0.toFieldValue())
	}

	fun ballHitBoss(arg0: UByte, ) {
		setField(2023U.toFieldId(), arg0.toFieldValue())
	}

	fun setBossDamage(arg0: UShort, arg1: UByte, arg2: Short, ) {
		setField(2024U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setSpeedDamage(arg0: UShort, arg1: UByte, arg2: Short, ) {
		setField(2025U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun reachedTable(arg0: UByte, ) {
		setField(2026U.toFieldId(), arg0.toFieldValue())
	}

	fun hitTable(arg0: UByte, ) {
		setField(2027U.toFieldId(), arg0.toFieldValue())
	}

	fun awayFromTable(arg0: UByte, ) {
		setField(2028U.toFieldId(), arg0.toFieldValue())
	}

	fun toonGotHealed(arg0: UInt, ) {
		setField(2029U.toFieldId(), arg0.toFieldValue())
	}

	fun requestGetToonup(arg0: Byte, arg1: Byte, arg2: UInt, ) {
		setField(2030U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun toonGotToonup(arg0: UInt, arg1: Byte, arg2: Byte, arg3: UInt, ) {
		setField(2031U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	open fun onSetState(arg0: String, sender: ChannelId? = null) {}
	open fun onSetBattleDifficulty(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestGetFood(arg0: Byte, arg1: Byte, arg2: UInt, sender: ChannelId? = null) {}
	open fun onToonGotFood(arg0: UInt, arg1: Byte, arg2: Byte, arg3: UInt, sender: ChannelId? = null) {}
	open fun onRequestServeFood(arg0: Byte, arg1: Byte, sender: ChannelId? = null) {}
	open fun onToonServeFood(arg0: UInt, arg1: Byte, arg2: Byte, sender: ChannelId? = null) {}
	open fun onHitBoss(arg0: UByte, sender: ChannelId? = null) {}
	open fun onHitToon(arg0: UInt, sender: ChannelId? = null) {}
	open fun onBallHitBoss(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetBossDamage(arg0: UShort, arg1: UByte, arg2: Short, sender: ChannelId? = null) {}
	open fun onSetSpeedDamage(arg0: UShort, arg1: UByte, arg2: Short, sender: ChannelId? = null) {}
	open fun onReachedTable(arg0: UByte, sender: ChannelId? = null) {}
	open fun onHitTable(arg0: UByte, sender: ChannelId? = null) {}
	open fun onAwayFromTable(arg0: UByte, sender: ChannelId? = null) {}
	open fun onToonGotHealed(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRequestGetToonup(arg0: Byte, arg1: Byte, arg2: UInt, sender: ChannelId? = null) {}
	open fun onToonGotToonup(arg0: UInt, arg1: Byte, arg2: Byte, arg3: UInt, sender: ChannelId? = null) {}
}

open class DistributedCogKart(doId: DOId): DistributedObjectBase(doId, 359U.toDClassId()) {
	companion object {
		val dClassId = 359U.toDClassId()

		object Fields {
			val setCountryClubId: FieldId = 2032U.toFieldId()
			val setPosHpr: FieldId = 2033U.toFieldId()
			val setCountryClubInteriorZone: FieldId = 2034U.toFieldId()
			val setCountryClubInteriorZoneForce: FieldId = 2035U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2032U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCountryClubId(it.toUInt16()!!, sender)
			}
		),
		2033U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!.transform {
						divide(10.0f)
					}
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				onSetPosHpr(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		2034U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetCountryClubInteriorZone(it.toUInt32()!!, sender)
			}
		),
		2035U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onSetCountryClubInteriorZoneForce(it.toUInt32()!!, sender)
			}
		),
	)

	fun setCountryClubId(arg0: UShort, ) {
		setField(2032U.toFieldId(), arg0.toFieldValue())
	}

	fun setPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(2033U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun setCountryClubInteriorZone(arg0: UInt, ) {
		setField(2034U.toFieldId(), arg0.toFieldValue())
	}

	fun setCountryClubInteriorZoneForce(arg0: UInt, ) {
		setField(2035U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetCountryClubId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetPosHpr(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onSetCountryClubInteriorZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetCountryClubInteriorZoneForce(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedCountryClub(doId: DOId): DistributedObjectBase(doId, 360U.toDClassId()) {
	companion object {
		val dClassId = 360U.toDClassId()

		object Fields {
			val setZoneId: FieldId = 2036U.toFieldId()
			val setBlockedRooms: FieldId = 2037U.toFieldId()
			val setCountryClubId: FieldId = 2038U.toFieldId()
			val setLayoutIndex: FieldId = 2039U.toFieldId()
			val setFloorNum: FieldId = 2040U.toFieldId()
			val setRoomDoIds: FieldId = 2041U.toFieldId()
			val setCountryClubZone: FieldId = 2042U.toFieldId()
			val elevatorAlert: FieldId = 2043U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2036U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetZoneId(it.toUInt32()!!, sender)
			}
		),
		2037U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBlockedRooms(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		2038U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCountryClubId(it.toUInt16()!!, sender)
			}
		),
		2039U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLayoutIndex(it.toUInt16()!!, sender)
			}
		),
		2040U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFloorNum(it.toUInt8()!!, sender)
			}
		),
		2041U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt32),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoomDoIds(it.toList()!!.map { it.toUInt32()!! }, sender)
			}
		),
		2042U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCountryClubZone(it.toUInt32()!!, sender)
			}
		),
		2043U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onElevatorAlert(it.toUInt32()!!, sender)
			}
		),
	)

	fun setZoneId(arg0: UInt, ) {
		setField(2036U.toFieldId(), arg0.toFieldValue())
	}

	fun setBlockedRooms(arg0: List<UByte>, ) {
		setField(2037U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCountryClubId(arg0: UShort, ) {
		setField(2038U.toFieldId(), arg0.toFieldValue())
	}

	fun setLayoutIndex(arg0: UShort, ) {
		setField(2039U.toFieldId(), arg0.toFieldValue())
	}

	fun setFloorNum(arg0: UByte, ) {
		setField(2040U.toFieldId(), arg0.toFieldValue())
	}

	fun setRoomDoIds(arg0: List<UInt>, ) {
		setField(2041U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun setCountryClubZone(arg0: UInt, ) {
		setField(2042U.toFieldId(), arg0.toFieldValue())
	}

	fun elevatorAlert(arg0: UInt, ) {
		setField(2043U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetZoneId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetBlockedRooms(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetCountryClubId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetLayoutIndex(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetFloorNum(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetRoomDoIds(arg0: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetCountryClubZone(arg0: UInt, sender: ChannelId? = null) {}
	open fun onElevatorAlert(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedCountryClubRoom(doId: DOId): DistributedObjectBase(doId, 361U.toDClassId()) {
	companion object {
		val dClassId = 361U.toDClassId()

		object Fields {
			val setCountryClubId: FieldId = 2044U.toFieldId()
			val setRoomId: FieldId = 2045U.toFieldId()
			val setRoomNum: FieldId = 2046U.toFieldId()
			val setSuits: FieldId = 2047U.toFieldId()
			val setBossConfronted: FieldId = 2048U.toFieldId()
			val setDefeated: FieldId = 2049U.toFieldId()
			val forceOuch: FieldId = 2050U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2044U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCountryClubId(it.toUInt16()!!, sender)
			}
		),
		2045U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoomId(it.toUInt16()!!, sender)
			}
		),
		2046U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoomNum(it.toUInt8()!!, sender)
			}
		),
		2047U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onSetSuits(t0, t1, sender)
				}
			}
		),
		2048U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossConfronted(it.toUInt32()!!, sender)
			}
		),
		2049U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDefeated(sender)
			}
		),
		2050U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onForceOuch(it.toUInt8()!!, sender)
			}
		),
	)

	fun setCountryClubId(arg0: UShort, ) {
		setField(2044U.toFieldId(), arg0.toFieldValue())
	}

	fun setRoomId(arg0: UShort, ) {
		setField(2045U.toFieldId(), arg0.toFieldValue())
	}

	fun setRoomNum(arg0: UByte, ) {
		setField(2046U.toFieldId(), arg0.toFieldValue())
	}

	fun setSuits(arg0: List<UInt>, arg1: List<UInt>, ) {
		setField(2047U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setBossConfronted(arg0: UInt, ) {
		setField(2048U.toFieldId(), arg0.toFieldValue())
	}

	fun setDefeated() {
		setField(2049U.toFieldId(), FieldValue.EmptyValue)
	}

	fun forceOuch(arg0: UByte, ) {
		setField(2050U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetCountryClubId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetRoomId(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetRoomNum(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetSuits(arg0: List<UInt>, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onSetBossConfronted(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDefeated(sender: ChannelId? = null) {}
	open fun onForceOuch(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedMoleField(doId: DOId): DistributedObjectBase(doId, 362U.toDClassId()) {
	companion object {
		val dClassId = 362U.toDClassId()

		object Fields {
			val setGameStart: FieldId = 2051U.toFieldId()
			val setClientTriggered: FieldId = 2052U.toFieldId()
			val whackedMole: FieldId = 2053U.toFieldId()
			val whackedBomb: FieldId = 2054U.toFieldId()
			val updateMole: FieldId = 2055U.toFieldId()
			val reportToonHitByBomb: FieldId = 2056U.toFieldId()
			val setScore: FieldId = 2057U.toFieldId()
			val damageMe: FieldId = 2058U.toFieldId()
			val setPityWin: FieldId = 2059U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2051U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt16()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt16()!!
				onSetGameStart(t0, t1, t2, sender)
				}
			}
		),
		2052U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetClientTriggered(sender)
			}
		),
		2053U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt16()!!
				onWhackedMole(t0, t1, sender)
				}
			}
		),
		2054U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt16()!!
				val t2 = values[2].toInt32()!!
				onWhackedBomb(t0, t1, t2, sender)
				}
			}
		),
		2055U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				onUpdateMole(t0, t1, sender)
				}
			}
		),
		2056U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt32()!!
				onReportToonHitByBomb(t0, t1, t2, sender)
				}
			}
		),
		2057U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetScore(it.toInt16()!!, sender)
			}
		),
		2058U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onDamageMe(sender)
			}
		),
		2059U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetPityWin(sender)
			}
		),
	)

	fun setGameStart(arg0: Short, arg1: UByte, arg2: UShort, ) {
		setField(2051U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setClientTriggered() {
		setField(2052U.toFieldId(), FieldValue.EmptyValue)
	}

	fun whackedMole(arg0: Byte, arg1: Short, ) {
		setField(2053U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun whackedBomb(arg0: Byte, arg1: Short, arg2: Int, ) {
		setField(2054U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun updateMole(arg0: Byte, arg1: Byte, ) {
		setField(2055U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun reportToonHitByBomb(arg0: UInt, arg1: Byte, arg2: Int, ) {
		setField(2056U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setScore(arg0: Short, ) {
		setField(2057U.toFieldId(), arg0.toFieldValue())
	}

	fun damageMe() {
		setField(2058U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setPityWin() {
		setField(2059U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetGameStart(arg0: Short, arg1: UByte, arg2: UShort, sender: ChannelId? = null) {}
	open fun onSetClientTriggered(sender: ChannelId? = null) {}
	open fun onWhackedMole(arg0: Byte, arg1: Short, sender: ChannelId? = null) {}
	open fun onWhackedBomb(arg0: Byte, arg1: Short, arg2: Int, sender: ChannelId? = null) {}
	open fun onUpdateMole(arg0: Byte, arg1: Byte, sender: ChannelId? = null) {}
	open fun onReportToonHitByBomb(arg0: UInt, arg1: Byte, arg2: Int, sender: ChannelId? = null) {}
	open fun onSetScore(arg0: Short, sender: ChannelId? = null) {}
	open fun onDamageMe(sender: ChannelId? = null) {}
	open fun onSetPityWin(sender: ChannelId? = null) {}
}

open class DistributedCountryClubBattle(doId: DOId): DistributedObjectBase(doId, 363U.toDClassId()) {
	companion object {
		val dClassId = 363U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedClubElevator(doId: DOId): DistributedObjectBase(doId, 364U.toDClassId()) {
	companion object {
		val dClassId = 364U.toDClassId()

		object Fields {
			val setFloor: FieldId = 2060U.toFieldId()
			val setLocked: FieldId = 2061U.toFieldId()
			val setEntering: FieldId = 2062U.toFieldId()
			val kickToonsOut: FieldId = 2063U.toFieldId()
			val setLatch: FieldId = 2064U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2060U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFloor(it.toInt8()!!, sender)
			}
		),
		2061U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLocked(it.toUInt16()!!, sender)
			}
		),
		2062U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEntering(it.toUInt16()!!, sender)
			}
		),
		2063U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onKickToonsOut(sender)
			}
		),
		2064U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLatch(it.toUInt32()!!, sender)
			}
		),
	)

	fun setFloor(arg0: Byte, ) {
		setField(2060U.toFieldId(), arg0.toFieldValue())
	}

	fun setLocked(arg0: UShort, ) {
		setField(2061U.toFieldId(), arg0.toFieldValue())
	}

	fun setEntering(arg0: UShort, ) {
		setField(2062U.toFieldId(), arg0.toFieldValue())
	}

	fun kickToonsOut() {
		setField(2063U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setLatch(arg0: UInt, ) {
		setField(2064U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetFloor(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetLocked(arg0: UShort, sender: ChannelId? = null) {}
	open fun onSetEntering(arg0: UShort, sender: ChannelId? = null) {}
	open fun onKickToonsOut(sender: ChannelId? = null) {}
	open fun onSetLatch(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedMaze(doId: DOId): DistributedObjectBase(doId, 365U.toDClassId()) {
	companion object {
		val dClassId = 365U.toDClassId()

		object Fields {
			val setRoomDoId: FieldId = 2065U.toFieldId()
			val setGameStart: FieldId = 2066U.toFieldId()
			val setClientTriggered: FieldId = 2067U.toFieldId()
			val setFinishedMaze: FieldId = 2068U.toFieldId()
			val setGameOver: FieldId = 2069U.toFieldId()
			val toonFinished: FieldId = 2070U.toFieldId()
			val damageMe: FieldId = 2071U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2065U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetRoomDoId(it.toUInt32()!!, sender)
			}
		),
		2066U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGameStart(it.toInt16()!!, sender)
			}
		),
		2067U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetClientTriggered(sender)
			}
		),
		2068U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onSetFinishedMaze(sender)
			}
		),
		2069U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGameOver(sender)
			}
		),
		2070U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				onToonFinished(t0, t1, t2, sender)
				}
			}
		),
		2071U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onDamageMe(sender)
			}
		),
	)

	fun setRoomDoId(arg0: UInt, ) {
		setField(2065U.toFieldId(), arg0.toFieldValue())
	}

	fun setGameStart(arg0: Short, ) {
		setField(2066U.toFieldId(), arg0.toFieldValue())
	}

	fun setClientTriggered() {
		setField(2067U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setFinishedMaze() {
		setField(2068U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setGameOver() {
		setField(2069U.toFieldId(), FieldValue.EmptyValue)
	}

	fun toonFinished(arg0: UInt, arg1: UByte, arg2: UByte, ) {
		setField(2070U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun damageMe() {
		setField(2071U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onSetRoomDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetGameStart(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetClientTriggered(sender: ChannelId? = null) {}
	open fun onSetFinishedMaze(sender: ChannelId? = null) {}
	open fun onSetGameOver(sender: ChannelId? = null) {}
	open fun onToonFinished(arg0: UInt, arg1: UByte, arg2: UByte, sender: ChannelId? = null) {}
	open fun onDamageMe(sender: ChannelId? = null) {}
}

open class DistributedBattleWaiters(doId: DOId): DistributedObjectBase(doId, 366U.toDClassId()) {
	companion object {
		val dClassId = 366U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedFoodBelt(doId: DOId): DistributedObjectBase(doId, 367U.toDClassId()) {
	companion object {
		val dClassId = 367U.toDClassId()

		object Fields {
			val setBossCogId: FieldId = 2072U.toFieldId()
			val setIndex: FieldId = 2073U.toFieldId()
			val setState: FieldId = 2074U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2072U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossCogId(it.toUInt32()!!, sender)
			}
		),
		2073U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIndex(it.toUInt8()!!, sender)
			}
		),
		2074U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Char,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetState(it.toChar()!!, sender)
			}
		),
	)

	fun setBossCogId(arg0: UInt, ) {
		setField(2072U.toFieldId(), arg0.toFieldValue())
	}

	fun setIndex(arg0: UByte, ) {
		setField(2073U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: Char, ) {
		setField(2074U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetBossCogId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetState(arg0: Char, sender: ChannelId? = null) {}
}

open class DistributedBanquetTable(doId: DOId): DistributedObjectBase(doId, 368U.toDClassId()) {
	companion object {
		val dClassId = 368U.toDClassId()

		object Fields {
			val setIndex: FieldId = 2075U.toFieldId()
			val setNumDiners: FieldId = 2076U.toFieldId()
			val setBossCogId: FieldId = 2077U.toFieldId()
			val setDinerInfo: FieldId = 2078U.toFieldId()
			val setState: FieldId = 2079U.toFieldId()
			val setDinerStatus: FieldId = 2080U.toFieldId()
			val requestControl: FieldId = 2081U.toFieldId()
			val requestFree: FieldId = 2082U.toFieldId()
			val setPitcherPos: FieldId = 2083U.toFieldId()
			val clearSmoothing: FieldId = 2084U.toFieldId()
			val firingWater: FieldId = 2085U.toFieldId()
			val waterHitBoss: FieldId = 2086U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2075U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIndex(it.toUInt8()!!, sender)
			}
		),
		2076U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetNumDiners(it.toUInt8()!!, sender)
			}
		),
		2077U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossCogId(it.toUInt32()!!, sender)
			}
		),
		2078U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt8()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				val t2 = values[2].toList()!!.map { it.toUInt8()!! }
				onSetDinerInfo(t0, t1, t2, sender)
				}
			}
		),
		2079U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toChar()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt8()!!
				onSetState(t0, t1, t2, sender)
				}
			}
		),
		2080U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onSetDinerStatus(t0, t1, sender)
				}
			}
		),
		2081U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestControl(sender)
			}
		),
		2082U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestFree(it.toInt8()!!, sender)
			}
		),
		2083U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt16()!!.transform {
						divide(100.0f)
						modulo(360.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetPitcherPos(t0, t1, t2, sender)
				}
			}
		),
		2084U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onClearSmoothing(it.toInt8()!!, sender)
			}
		),
		2085U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(100.0f)
					}
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				onFiringWater(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		2086U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onWaterHitBoss(it.toUInt8()!!, sender)
			}
		),
	)

	fun setIndex(arg0: UByte, ) {
		setField(2075U.toFieldId(), arg0.toFieldValue())
	}

	fun setNumDiners(arg0: UByte, ) {
		setField(2076U.toFieldId(), arg0.toFieldValue())
	}

	fun setBossCogId(arg0: UInt, ) {
		setField(2077U.toFieldId(), arg0.toFieldValue())
	}

	fun setDinerInfo(arg0: List<UByte>, arg1: List<UByte>, arg2: List<UByte>, ) {
		setField(2078U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg2.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setState(arg0: Char, arg1: UInt, arg2: Byte, ) {
		setField(2079U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setDinerStatus(arg0: UByte, arg1: UByte, ) {
		setField(2080U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestControl() {
		setField(2081U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestFree(arg0: Byte, ) {
		setField(2082U.toFieldId(), arg0.toFieldValue())
	}

	fun setPitcherPos(arg0: UByte, arg1: Double, arg2: Short, ) {
		setField(2083U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
			modulo(360.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun clearSmoothing(arg0: Byte, ) {
		setField(2084U.toFieldId(), arg0.toFieldValue())
	}

	fun firingWater(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(2085U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun waterHitBoss(arg0: UByte, ) {
		setField(2086U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetNumDiners(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetBossCogId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetDinerInfo(arg0: List<UByte>, arg1: List<UByte>, arg2: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetState(arg0: Char, arg1: UInt, arg2: Byte, sender: ChannelId? = null) {}
	open fun onSetDinerStatus(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onRequestControl(sender: ChannelId? = null) {}
	open fun onRequestFree(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetPitcherPos(arg0: UByte, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onClearSmoothing(arg0: Byte, sender: ChannelId? = null) {}
	open fun onFiringWater(arg0: Double, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onWaterHitBoss(arg0: UByte, sender: ChannelId? = null) {}
}

open class DistributedBattleDiners(doId: DOId): DistributedObjectBase(doId, 369U.toDClassId()) {
	companion object {
		val dClassId = 369U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedGolfSpot(doId: DOId): DistributedObjectBase(doId, 370U.toDClassId()) {
	companion object {
		val dClassId = 370U.toDClassId()

		object Fields {
			val setIndex: FieldId = 2087U.toFieldId()
			val setBossCogId: FieldId = 2088U.toFieldId()
			val setState: FieldId = 2089U.toFieldId()
			val setGoingToReward: FieldId = 2090U.toFieldId()
			val requestControl: FieldId = 2091U.toFieldId()
			val requestFree: FieldId = 2092U.toFieldId()
			val setGolfSpotPos: FieldId = 2093U.toFieldId()
			val clearSmoothing: FieldId = 2094U.toFieldId()
			val setSwingInfo: FieldId = 2095U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2087U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIndex(it.toUInt8()!!, sender)
			}
		),
		2088U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetBossCogId(it.toUInt32()!!, sender)
			}
		),
		2089U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toChar()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toInt8()!!
				onSetState(t0, t1, t2, sender)
				}
			}
		),
		2090U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetGoingToReward(sender)
			}
		),
		2091U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestControl(sender)
			}
		),
		2092U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestFree(it.toInt8()!!, sender)
			}
		),
		2093U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt16()!!.transform {
						divide(100.0f)
						modulo(360.0f)
					}
				val t2 = values[2].toInt16()!!
				onSetGolfSpotPos(t0, t1, t2, sender)
				}
			}
		),
		2094U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onClearSmoothing(it.toInt8()!!, sender)
			}
		),
		2095U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toUInt8()!!
				onSetSwingInfo(t0, t1, t2, sender)
				}
			}
		),
	)

	fun setIndex(arg0: UByte, ) {
		setField(2087U.toFieldId(), arg0.toFieldValue())
	}

	fun setBossCogId(arg0: UInt, ) {
		setField(2088U.toFieldId(), arg0.toFieldValue())
	}

	fun setState(arg0: Char, arg1: UInt, arg2: Byte, ) {
		setField(2089U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setGoingToReward() {
		setField(2090U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestControl() {
		setField(2091U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestFree(arg0: Byte, ) {
		setField(2092U.toFieldId(), arg0.toFieldValue())
	}

	fun setGolfSpotPos(arg0: UByte, arg1: Double, arg2: Short, ) {
		setField(2093U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.UInt16) {
			divide(100.0f)
			modulo(360.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun clearSmoothing(arg0: Byte, ) {
		setField(2094U.toFieldId(), arg0.toFieldValue())
	}

	fun setSwingInfo(arg0: UByte, arg1: Double, arg2: UByte, ) {
		setField(2095U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onSetIndex(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetBossCogId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetState(arg0: Char, arg1: UInt, arg2: Byte, sender: ChannelId? = null) {}
	open fun onSetGoingToReward(sender: ChannelId? = null) {}
	open fun onRequestControl(sender: ChannelId? = null) {}
	open fun onRequestFree(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetGolfSpotPos(arg0: UByte, arg1: Double, arg2: Short, sender: ChannelId? = null) {}
	open fun onClearSmoothing(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetSwingInfo(arg0: UByte, arg1: Double, arg2: UByte, sender: ChannelId? = null) {}
}

open class DistributedIceGame(doId: DOId): DistributedObjectBase(doId, 372U.toDClassId()) {
	companion object {
		val dClassId = 372U.toDClassId()

		object Fields {
			val setForceArrowInfo: FieldId = 2098U.toFieldId()
			val setAvatarChoice: FieldId = 2099U.toFieldId()
			val endingPositions: FieldId = 2100U.toFieldId()
			val reportScoringMovieDone: FieldId = 2101U.toFieldId()
			val claimTreasure: FieldId = 2102U.toFieldId()
			val claimPenalty: FieldId = 2103U.toFieldId()
			val setTireInputs: FieldId = 2104U.toFieldId()
			val setTimerStartTime: FieldId = 2105U.toFieldId()
			val setFinalPositions: FieldId = 2106U.toFieldId()
			val setMatchAndRound: FieldId = 2107U.toFieldId()
			val setScores: FieldId = 2108U.toFieldId()
			val setNewState: FieldId = 2109U.toFieldId()
			val setTreasureGrabbed: FieldId = 2110U.toFieldId()
			val setPenaltyGrabbed: FieldId = 2111U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2098U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				onSetForceArrowInfo(t0, t1, t2, sender)
				}
			}
		),
		2099U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!.transform {
						divide(100.0f)
					}
				val t1 = values[1].toInt32()!!.transform {
						divide(100.0f)
					}
				onSetAvatarChoice(t0, t1, sender)
				}
			}
		),
		2100U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onEndingPositions(with(Coord3) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		2101U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReportScoringMovieDone(sender)
			}
		),
		2102U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onClaimTreasure(it.toUInt8()!!, sender)
			}
		),
		2103U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onClaimPenalty(it.toUInt8()!!, sender)
			}
		),
		2104U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, )),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTireInputs(with(TireInput) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		2105U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTimerStartTime(it.toInt16()!!, sender)
			}
		),
		2106U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetFinalPositions(with(Coord3) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		2107U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				onSetMatchAndRound(t0, t1, sender)
				}
			}
		),
		2108U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt8()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toList()!!.map { it.toInt16()!! }
				onSetScores(t0, t1, t2, sender)
				}
			}
		),
		2109U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetNewState(it.toStringValue()!!, sender)
			}
		),
		2110U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetTreasureGrabbed(t0, t1, sender)
				}
			}
		),
		2111U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetPenaltyGrabbed(t0, t1, sender)
				}
			}
		),
	)

	fun setForceArrowInfo(arg0: UInt, arg1: Double, arg2: Double, ) {
		setField(2098U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun setAvatarChoice(arg0: Double, arg1: Double, ) {
		setField(2099U.toFieldId(), FieldValue.TupleValue(
			arg0.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun endingPositions(arg0: List<Coord3>, ) {
		setField(2100U.toFieldId(), with(Coord3) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun reportScoringMovieDone() {
		setField(2101U.toFieldId(), FieldValue.EmptyValue)
	}

	fun claimTreasure(arg0: UByte, ) {
		setField(2102U.toFieldId(), arg0.toFieldValue())
	}

	fun claimPenalty(arg0: UByte, ) {
		setField(2103U.toFieldId(), arg0.toFieldValue())
	}

	fun setTireInputs(arg0: List<TireInput>, ) {
		setField(2104U.toFieldId(), with(TireInput) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setTimerStartTime(arg0: Short, ) {
		setField(2105U.toFieldId(), arg0.toFieldValue())
	}

	fun setFinalPositions(arg0: List<Coord3>, ) {
		setField(2106U.toFieldId(), with(Coord3) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setMatchAndRound(arg0: Byte, arg1: Byte, ) {
		setField(2107U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setScores(arg0: Byte, arg1: Byte, arg2: List<Short>, ) {
		setField(2108U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Int16, arg2.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setNewState(arg0: String, ) {
		setField(2109U.toFieldId(), arg0.toFieldValue())
	}

	fun setTreasureGrabbed(arg0: UInt, arg1: UInt, ) {
		setField(2110U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setPenaltyGrabbed(arg0: UInt, arg1: UInt, ) {
		setField(2111U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSetForceArrowInfo(arg0: UInt, arg1: Double, arg2: Double, sender: ChannelId? = null) {}
	open fun onSetAvatarChoice(arg0: Double, arg1: Double, sender: ChannelId? = null) {}
	open fun onEndingPositions(arg0: List<Coord3>, sender: ChannelId? = null) {}
	open fun onReportScoringMovieDone(sender: ChannelId? = null) {}
	open fun onClaimTreasure(arg0: UByte, sender: ChannelId? = null) {}
	open fun onClaimPenalty(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetTireInputs(arg0: List<TireInput>, sender: ChannelId? = null) {}
	open fun onSetTimerStartTime(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetFinalPositions(arg0: List<Coord3>, sender: ChannelId? = null) {}
	open fun onSetMatchAndRound(arg0: Byte, arg1: Byte, sender: ChannelId? = null) {}
	open fun onSetScores(arg0: Byte, arg1: Byte, arg2: List<Short>, sender: ChannelId? = null) {}
	open fun onSetNewState(arg0: String, sender: ChannelId? = null) {}
	open fun onSetTreasureGrabbed(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSetPenaltyGrabbed(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
}

open class DistributedCogThiefGame(doId: DOId): DistributedObjectBase(doId, 373U.toDClassId()) {
	companion object {
		val dClassId = 373U.toDClassId()

		object Fields {
			val throwingPie: FieldId = 2112U.toFieldId()
			val hitBySuit: FieldId = 2113U.toFieldId()
			val pieHitSuit: FieldId = 2114U.toFieldId()
			val cogHitBarrel: FieldId = 2115U.toFieldId()
			val cogAtReturnPos: FieldId = 2116U.toFieldId()
			val updateSuitGoal: FieldId = 2117U.toFieldId()
			val makeCogCarryBarrel: FieldId = 2118U.toFieldId()
			val makeCogDropBarrel: FieldId = 2119U.toFieldId()
			val markBarrelStolen: FieldId = 2120U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2112U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt32()!!.transform {
						divide(100.0f)
					}
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				onThrowingPie(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		2113U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				onHitBySuit(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		2114U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				onPieHitSuit(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		2115U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt32()!!.transform {
						divide(100.0f)
					}
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				onCogHitBarrel(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
		2116U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				onCogAtReturnPos(t0, t1, t2, sender)
				}
			}
		),
		2117U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int64, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt8()!!
				val t4 = values[4].toInt64()!!
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(100.0f)
					}
				val t7 = values[7].toInt32()!!.transform {
						divide(100.0f)
					}
				onUpdateSuitGoal(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		2118U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt8()!!
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(100.0f)
					}
				onMakeCogCarryBarrel(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		2119U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt8()!!
				val t4 = values[4].toInt32()!!.transform {
						divide(100.0f)
					}
				val t5 = values[5].toInt32()!!.transform {
						divide(100.0f)
					}
				val t6 = values[6].toInt32()!!.transform {
						divide(100.0f)
					}
				onMakeCogDropBarrel(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		2120U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toInt32()!!
				val t1 = values[1].toInt32()!!
				val t2 = values[2].toInt8()!!
				onMarkBarrelStolen(t0, t1, t2, sender)
				}
			}
		),
	)

	fun throwingPie(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(2112U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun hitBySuit(arg0: UInt, arg1: Int, arg2: Byte, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(2113U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun pieHitSuit(arg0: UInt, arg1: Int, arg2: Byte, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(2114U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun cogHitBarrel(arg0: Int, arg1: Byte, arg2: Byte, arg3: Double, arg4: Double, arg5: Double, ) {
		setField(2115U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun cogAtReturnPos(arg0: Int, arg1: Byte, arg2: Byte, ) {
		setField(2116U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun updateSuitGoal(arg0: Int, arg1: Int, arg2: Byte, arg3: Byte, arg4: Long, arg5: Double, arg6: Double, arg7: Double, ) {
		setField(2117U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg7.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun makeCogCarryBarrel(arg0: Int, arg1: Int, arg2: Byte, arg3: Byte, arg4: Double, arg5: Double, arg6: Double, ) {
		setField(2118U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun makeCogDropBarrel(arg0: Int, arg1: Int, arg2: Byte, arg3: Byte, arg4: Double, arg5: Double, arg6: Double, ) {
		setField(2119U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int32) {
			divide(100.0f)
		}.toFieldValue(), 
				))
	}

	fun markBarrelStolen(arg0: Int, arg1: Int, arg2: Byte, ) {
		setField(2120U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onThrowingPie(arg0: UInt, arg1: Int, arg2: Double, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onHitBySuit(arg0: UInt, arg1: Int, arg2: Byte, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onPieHitSuit(arg0: UInt, arg1: Int, arg2: Byte, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onCogHitBarrel(arg0: Int, arg1: Byte, arg2: Byte, arg3: Double, arg4: Double, arg5: Double, sender: ChannelId? = null) {}
	open fun onCogAtReturnPos(arg0: Int, arg1: Byte, arg2: Byte, sender: ChannelId? = null) {}
	open fun onUpdateSuitGoal(arg0: Int, arg1: Int, arg2: Byte, arg3: Byte, arg4: Long, arg5: Double, arg6: Double, arg7: Double, sender: ChannelId? = null) {}
	open fun onMakeCogCarryBarrel(arg0: Int, arg1: Int, arg2: Byte, arg3: Byte, arg4: Double, arg5: Double, arg6: Double, sender: ChannelId? = null) {}
	open fun onMakeCogDropBarrel(arg0: Int, arg1: Int, arg2: Byte, arg3: Byte, arg4: Double, arg5: Double, arg6: Double, sender: ChannelId? = null) {}
	open fun onMarkBarrelStolen(arg0: Int, arg1: Int, arg2: Byte, sender: ChannelId? = null) {}
}

open class DistributedTwoDGame(doId: DOId): DistributedObjectBase(doId, 376U.toDClassId()) {
	companion object {
		val dClassId = 376U.toDClassId()

		object Fields {
			val showShootGun: FieldId = 2128U.toFieldId()
			val toonHitByEnemy: FieldId = 2129U.toFieldId()
			val toonFellDown: FieldId = 2130U.toFieldId()
			val toonSquished: FieldId = 2131U.toFieldId()
			val toonVictory: FieldId = 2132U.toFieldId()
			val claimTreasure: FieldId = 2133U.toFieldId()
			val claimEnemyShot: FieldId = 2134U.toFieldId()
			val reportDone: FieldId = 2135U.toFieldId()
			val setSectionsSelected: FieldId = 2136U.toFieldId()
			val setTreasureGrabbed: FieldId = 2137U.toFieldId()
			val setEnemyShot: FieldId = 2138U.toFieldId()
			val addVictoryScore: FieldId = 2139U.toFieldId()
			val setEveryoneDone: FieldId = 2140U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2128U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onShowShootGun(t0, t1, sender)
				}
			}
		),
		2129U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onToonHitByEnemy(t0, t1, sender)
				}
			}
		),
		2130U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onToonFellDown(t0, t1, sender)
				}
			}
		),
		2131U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onToonSquished(t0, t1, sender)
				}
			}
		),
		2132U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					broadcast = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt16()!!
				onToonVictory(t0, t1, sender)
				}
			}
		),
		2133U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onClaimTreasure(t0, t1, sender)
				}
			}
		),
		2134U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				onClaimEnemyShot(t0, t1, sender)
				}
			}
		),
		2135U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onReportDone(sender)
			}
		),
		2136U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetSectionsSelected(with(twoDSectionInfo) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		2137U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				onSetTreasureGrabbed(t0, t1, t2, sender)
				}
			}
		),
		2138U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt32()!!
				onSetEnemyShot(t0, t1, t2, t3, sender)
				}
			}
		),
		2139U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onAddVictoryScore(t0, t1, sender)
				}
			}
		),
		2140U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetEveryoneDone(sender)
			}
		),
	)

	fun showShootGun(arg0: UInt, arg1: Short, ) {
		setField(2128U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun toonHitByEnemy(arg0: UInt, arg1: Short, ) {
		setField(2129U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun toonFellDown(arg0: UInt, arg1: Short, ) {
		setField(2130U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun toonSquished(arg0: UInt, arg1: Short, ) {
		setField(2131U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun toonVictory(arg0: UInt, arg1: Short, ) {
		setField(2132U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun claimTreasure(arg0: UByte, arg1: UByte, ) {
		setField(2133U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun claimEnemyShot(arg0: UByte, arg1: UByte, ) {
		setField(2134U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun reportDone() {
		setField(2135U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setSectionsSelected(arg0: List<twoDSectionInfo>, ) {
		setField(2136U.toFieldId(), with(twoDSectionInfo) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setTreasureGrabbed(arg0: UInt, arg1: UByte, arg2: UByte, ) {
		setField(2137U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setEnemyShot(arg0: UInt, arg1: UByte, arg2: UByte, arg3: UInt, ) {
		setField(2138U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun addVictoryScore(arg0: UInt, arg1: UByte, ) {
		setField(2139U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setEveryoneDone() {
		setField(2140U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onShowShootGun(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onToonHitByEnemy(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onToonFellDown(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onToonSquished(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onToonVictory(arg0: UInt, arg1: Short, sender: ChannelId? = null) {}
	open fun onClaimTreasure(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onClaimEnemyShot(arg0: UByte, arg1: UByte, sender: ChannelId? = null) {}
	open fun onReportDone(sender: ChannelId? = null) {}
	open fun onSetSectionsSelected(arg0: List<twoDSectionInfo>, sender: ChannelId? = null) {}
	open fun onSetTreasureGrabbed(arg0: UInt, arg1: UByte, arg2: UByte, sender: ChannelId? = null) {}
	open fun onSetEnemyShot(arg0: UInt, arg1: UByte, arg2: UByte, arg3: UInt, sender: ChannelId? = null) {}
	open fun onAddVictoryScore(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetEveryoneDone(sender: ChannelId? = null) {}
}

open class DistributedPicnicTable(doId: DOId): DistributedObjectBase(doId, 377U.toDClassId()) {
	companion object {
		val dClassId = 377U.toDClassId()

		object Fields {
			val fillSlot: FieldId = 2141U.toFieldId()
			val emptySlot: FieldId = 2142U.toFieldId()
			val requestTableState: FieldId = 2143U.toFieldId()
			val setTableState: FieldId = 2144U.toFieldId()
			val setGameZone: FieldId = 2145U.toFieldId()
			val setIsPlaying: FieldId = 2146U.toFieldId()
			val requestJoin: FieldId = 2147U.toFieldId()
			val rejectJoin: FieldId = 2148U.toFieldId()
			val requestObserve: FieldId = 2149U.toFieldId()
			val leaveObserve: FieldId = 2150U.toFieldId()
			val requestGameZone: FieldId = 2151U.toFieldId()
			val requestPickedGame: FieldId = 2152U.toFieldId()
			val requestExit: FieldId = 2153U.toFieldId()
			val requestZone: FieldId = 2154U.toFieldId()
			val announceWinner: FieldId = 2155U.toFieldId()
			val allowObserve: FieldId = 2156U.toFieldId()
			val allowPick: FieldId = 2157U.toFieldId()
			val setZone: FieldId = 2158U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2141U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				val t6 = values[6].toInt16()!!.transform {
						divide(10.0f)
					}
				val t7 = values[7].toInt16()!!.transform {
						divide(10.0f)
					}
				val t8 = values[8].toInt16()!!
				val t9 = values[9].toUInt32()!!
				onFillSlot(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, sender)
				}
			}
		),
		2142U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toInt16()!!
				onEmptySlot(t0, t1, t2, sender)
				}
			}
		),
		2143U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestTableState(sender)
			}
		),
		2144U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt32()!! }
				val t1 = values[1].toUInt8()!!
				onSetTableState(t0, t1, sender)
				}
			}
		),
		2145U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onSetGameZone(t0, t1, sender)
				}
			}
		),
		2146U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIsPlaying(it.toUInt8()!!, sender)
			}
		),
		2147U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toInt16()!!.transform {
						divide(10.0f)
					}
				val t2 = values[2].toInt16()!!.transform {
						divide(10.0f)
					}
				val t3 = values[3].toInt16()!!.transform {
						divide(10.0f)
					}
				val t4 = values[4].toInt16()!!.transform {
						divide(10.0f)
					}
				val t5 = values[5].toInt16()!!.transform {
						divide(10.0f)
					}
				val t6 = values[6].toInt16()!!.transform {
						divide(10.0f)
					}
				onRequestJoin(t0, t1, t2, t3, t4, t5, t6, sender)
				}
			}
		),
		2148U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onRejectJoin(sender)
			}
		),
		2149U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestObserve(sender)
			}
		),
		2150U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onLeaveObserve(sender)
			}
		),
		2151U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestGameZone(sender)
			}
		),
		2152U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestPickedGame(it.toUInt8()!!, sender)
			}
		),
		2153U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		2154U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestZone(sender)
			}
		),
		2155U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toStringValue()!!
				val t1 = values[1].toUInt32()!!
				onAnnounceWinner(t0, t1, sender)
				}
			}
		),
		2156U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAllowObserve(sender)
			}
		),
		2157U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAllowPick(sender)
			}
		),
		2158U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetZone(it.toUInt32()!!, sender)
			}
		),
	)

	fun fillSlot(arg0: UInt, arg1: UByte, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Short, arg9: UInt, ) {
		setField(2141U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg7.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg8.toFieldValue(), 
			arg9.toFieldValue(), 
				))
	}

	fun emptySlot(arg0: UInt, arg1: UByte, arg2: Short, ) {
		setField(2142U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestTableState() {
		setField(2143U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setTableState(arg0: List<UInt>, arg1: UByte, ) {
		setField(2144U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg0.map { it.toFieldValue() }).toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setGameZone(arg0: UInt, arg1: UByte, ) {
		setField(2145U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setIsPlaying(arg0: UByte, ) {
		setField(2146U.toFieldId(), arg0.toFieldValue())
	}

	fun requestJoin(arg0: UByte, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, ) {
		setField(2147U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg2.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg3.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg4.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg5.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
			arg6.unTransform(FieldValue.Type.Int16) {
			divide(10.0f)
		}.toFieldValue(), 
				))
	}

	fun rejectJoin() {
		setField(2148U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestObserve() {
		setField(2149U.toFieldId(), FieldValue.EmptyValue)
	}

	fun leaveObserve() {
		setField(2150U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestGameZone() {
		setField(2151U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestPickedGame(arg0: UByte, ) {
		setField(2152U.toFieldId(), arg0.toFieldValue())
	}

	fun requestExit() {
		setField(2153U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestZone() {
		setField(2154U.toFieldId(), FieldValue.EmptyValue)
	}

	fun announceWinner(arg0: String, arg1: UInt, ) {
		setField(2155U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun allowObserve() {
		setField(2156U.toFieldId(), FieldValue.EmptyValue)
	}

	fun allowPick() {
		setField(2157U.toFieldId(), FieldValue.EmptyValue)
	}

	fun setZone(arg0: UInt, ) {
		setField(2158U.toFieldId(), arg0.toFieldValue())
	}

	open fun onFillSlot(arg0: UInt, arg1: UByte, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, arg7: Double, arg8: Short, arg9: UInt, sender: ChannelId? = null) {}
	open fun onEmptySlot(arg0: UInt, arg1: UByte, arg2: Short, sender: ChannelId? = null) {}
	open fun onRequestTableState(sender: ChannelId? = null) {}
	open fun onSetTableState(arg0: List<UInt>, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetGameZone(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onSetIsPlaying(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestJoin(arg0: UByte, arg1: Double, arg2: Double, arg3: Double, arg4: Double, arg5: Double, arg6: Double, sender: ChannelId? = null) {}
	open fun onRejectJoin(sender: ChannelId? = null) {}
	open fun onRequestObserve(sender: ChannelId? = null) {}
	open fun onLeaveObserve(sender: ChannelId? = null) {}
	open fun onRequestGameZone(sender: ChannelId? = null) {}
	open fun onRequestPickedGame(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onRequestZone(sender: ChannelId? = null) {}
	open fun onAnnounceWinner(arg0: String, arg1: UInt, sender: ChannelId? = null) {}
	open fun onAllowObserve(sender: ChannelId? = null) {}
	open fun onAllowPick(sender: ChannelId? = null) {}
	open fun onSetZone(arg0: UInt, sender: ChannelId? = null) {}
}

open class DistributedChineseCheckers(doId: DOId): DistributedObjectBase(doId, 378U.toDClassId()) {
	companion object {
		val dClassId = 378U.toDClassId()

		object Fields {
			val requestExit: FieldId = 2159U.toFieldId()
			val requestBegin: FieldId = 2160U.toFieldId()
			val requestMove: FieldId = 2161U.toFieldId()
			val requestTimer: FieldId = 2162U.toFieldId()
			val requestSeatPositions: FieldId = 2163U.toFieldId()
			val startBeginTimer: FieldId = 2164U.toFieldId()
			val gameStart: FieldId = 2165U.toFieldId()
			val setTableDoId: FieldId = 2166U.toFieldId()
			val setGameState: FieldId = 2167U.toFieldId()
			val setTimer: FieldId = 2168U.toFieldId()
			val setTurnTimer: FieldId = 2169U.toFieldId()
			val sendTurn: FieldId = 2170U.toFieldId()
			val requestWin: FieldId = 2171U.toFieldId()
			val announceWin: FieldId = 2172U.toFieldId()
			val announceSeatPositions: FieldId = 2173U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2159U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		2160U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBegin(sender)
			}
		),
		2161U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestMove(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		2162U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestTimer(sender)
			}
		),
		2163U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestSeatPositions(sender)
			}
		),
		2164U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toInt16()!!
				onStartBeginTimer(t0, t1, sender)
				}
			}
		),
		2165U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onGameStart(it.toUInt8()!!, sender)
			}
		),
		2166U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTableDoId(it.toUInt32()!!, sender)
			}
		),
		2167U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt8()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				onSetGameState(t0, t1, sender)
				}
			}
		),
		2168U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTimer(it.toInt16()!!, sender)
			}
		),
		2169U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTurnTimer(it.toInt16()!!, sender)
			}
		),
		2170U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSendTurn(it.toUInt8()!!, sender)
			}
		),
		2171U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestWin(sender)
			}
		),
		2172U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAnnounceWin(it.toUInt32()!!, sender)
			}
		),
		2173U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAnnounceSeatPositions(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
	)

	fun requestExit() {
		setField(2159U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestBegin() {
		setField(2160U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestMove(arg0: List<UByte>, ) {
		setField(2161U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun requestTimer() {
		setField(2162U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestSeatPositions() {
		setField(2163U.toFieldId(), FieldValue.EmptyValue)
	}

	fun startBeginTimer(arg0: UShort, arg1: Short, ) {
		setField(2164U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun gameStart(arg0: UByte, ) {
		setField(2165U.toFieldId(), arg0.toFieldValue())
	}

	fun setTableDoId(arg0: UInt, ) {
		setField(2166U.toFieldId(), arg0.toFieldValue())
	}

	fun setGameState(arg0: List<UByte>, arg1: List<UByte>, ) {
		setField(2167U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setTimer(arg0: Short, ) {
		setField(2168U.toFieldId(), arg0.toFieldValue())
	}

	fun setTurnTimer(arg0: Short, ) {
		setField(2169U.toFieldId(), arg0.toFieldValue())
	}

	fun sendTurn(arg0: UByte, ) {
		setField(2170U.toFieldId(), arg0.toFieldValue())
	}

	fun requestWin() {
		setField(2171U.toFieldId(), FieldValue.EmptyValue)
	}

	fun announceWin(arg0: UInt, ) {
		setField(2172U.toFieldId(), arg0.toFieldValue())
	}

	fun announceSeatPositions(arg0: List<UByte>, ) {
		setField(2173U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onRequestBegin(sender: ChannelId? = null) {}
	open fun onRequestMove(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onRequestTimer(sender: ChannelId? = null) {}
	open fun onRequestSeatPositions(sender: ChannelId? = null) {}
	open fun onStartBeginTimer(arg0: UShort, arg1: Short, sender: ChannelId? = null) {}
	open fun onGameStart(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetTableDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetGameState(arg0: List<UByte>, arg1: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetTimer(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetTurnTimer(arg0: Short, sender: ChannelId? = null) {}
	open fun onSendTurn(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestWin(sender: ChannelId? = null) {}
	open fun onAnnounceWin(arg0: UInt, sender: ChannelId? = null) {}
	open fun onAnnounceSeatPositions(arg0: List<UByte>, sender: ChannelId? = null) {}
}

open class DistributedCheckers(doId: DOId): DistributedObjectBase(doId, 379U.toDClassId()) {
	companion object {
		val dClassId = 379U.toDClassId()

		object Fields {
			val requestExit: FieldId = 2174U.toFieldId()
			val requestBegin: FieldId = 2175U.toFieldId()
			val requestTimer: FieldId = 2176U.toFieldId()
			val requestMove: FieldId = 2177U.toFieldId()
			val startBeginTimer: FieldId = 2178U.toFieldId()
			val gameStart: FieldId = 2179U.toFieldId()
			val setTableDoId: FieldId = 2180U.toFieldId()
			val setGameState: FieldId = 2181U.toFieldId()
			val setTimer: FieldId = 2182U.toFieldId()
			val setTurnTimer: FieldId = 2183U.toFieldId()
			val sendTurn: FieldId = 2184U.toFieldId()
			val requestWin: FieldId = 2185U.toFieldId()
			val announceWin: FieldId = 2186U.toFieldId()
			val illegalMove: FieldId = 2187U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2174U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		2175U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBegin(sender)
			}
		),
		2176U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestTimer(sender)
			}
		),
		2177U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestMove(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		2178U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toInt16()!!
				onStartBeginTimer(t0, t1, sender)
				}
			}
		),
		2179U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onGameStart(it.toUInt8()!!, sender)
			}
		),
		2180U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTableDoId(it.toUInt32()!!, sender)
			}
		),
		2181U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toUInt8()!! }
				val t1 = values[1].toList()!!.map { it.toUInt8()!! }
				onSetGameState(t0, t1, sender)
				}
			}
		),
		2182U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTimer(it.toInt16()!!, sender)
			}
		),
		2183U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTurnTimer(it.toInt16()!!, sender)
			}
		),
		2184U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSendTurn(it.toUInt8()!!, sender)
			}
		),
		2185U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestWin(sender)
			}
		),
		2186U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAnnounceWin(it.toUInt32()!!, sender)
			}
		),
		2187U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onIllegalMove(sender)
			}
		),
	)

	fun requestExit() {
		setField(2174U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestBegin() {
		setField(2175U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestTimer() {
		setField(2176U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestMove(arg0: List<UByte>, ) {
		setField(2177U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun startBeginTimer(arg0: UShort, arg1: Short, ) {
		setField(2178U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun gameStart(arg0: UByte, ) {
		setField(2179U.toFieldId(), arg0.toFieldValue())
	}

	fun setTableDoId(arg0: UInt, ) {
		setField(2180U.toFieldId(), arg0.toFieldValue())
	}

	fun setGameState(arg0: List<UByte>, arg1: List<UByte>, ) {
		setField(2181U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun setTimer(arg0: Short, ) {
		setField(2182U.toFieldId(), arg0.toFieldValue())
	}

	fun setTurnTimer(arg0: Short, ) {
		setField(2183U.toFieldId(), arg0.toFieldValue())
	}

	fun sendTurn(arg0: UByte, ) {
		setField(2184U.toFieldId(), arg0.toFieldValue())
	}

	fun requestWin() {
		setField(2185U.toFieldId(), FieldValue.EmptyValue)
	}

	fun announceWin(arg0: UInt, ) {
		setField(2186U.toFieldId(), arg0.toFieldValue())
	}

	fun illegalMove() {
		setField(2187U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onRequestBegin(sender: ChannelId? = null) {}
	open fun onRequestTimer(sender: ChannelId? = null) {}
	open fun onRequestMove(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onStartBeginTimer(arg0: UShort, arg1: Short, sender: ChannelId? = null) {}
	open fun onGameStart(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetTableDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetGameState(arg0: List<UByte>, arg1: List<UByte>, sender: ChannelId? = null) {}
	open fun onSetTimer(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetTurnTimer(arg0: Short, sender: ChannelId? = null) {}
	open fun onSendTurn(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestWin(sender: ChannelId? = null) {}
	open fun onAnnounceWin(arg0: UInt, sender: ChannelId? = null) {}
	open fun onIllegalMove(sender: ChannelId? = null) {}
}

open class DistributedFindFour(doId: DOId): DistributedObjectBase(doId, 380U.toDClassId()) {
	companion object {
		val dClassId = 380U.toDClassId()

		object Fields {
			val requestExit: FieldId = 2188U.toFieldId()
			val requestBegin: FieldId = 2189U.toFieldId()
			val requestMove: FieldId = 2190U.toFieldId()
			val requestTimer: FieldId = 2191U.toFieldId()
			val requestWin: FieldId = 2192U.toFieldId()
			val startBeginTimer: FieldId = 2193U.toFieldId()
			val setTableDoId: FieldId = 2194U.toFieldId()
			val setGameState: FieldId = 2195U.toFieldId()
			val setTimer: FieldId = 2196U.toFieldId()
			val setTurnTimer: FieldId = 2197U.toFieldId()
			val gameStart: FieldId = 2198U.toFieldId()
			val sendTurn: FieldId = 2199U.toFieldId()
			val announceWin: FieldId = 2200U.toFieldId()
			val announceWinLocation: FieldId = 2201U.toFieldId()
			val announceWinnerPosition: FieldId = 2202U.toFieldId()
			val illegalMove: FieldId = 2203U.toFieldId()
			val tie: FieldId = 2204U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2188U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestExit(sender)
			}
		),
		2189U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestBegin(sender)
			}
		),
		2190U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestMove(it.toUInt8()!!, sender)
			}
		),
		2191U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestTimer(sender)
			}
		),
		2192U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.UInt8),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestWin(it.toList()!!.map { it.toUInt8()!! }, sender)
			}
		),
		2193U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int16, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt16()!!
				val t1 = values[1].toInt16()!!
				onStartBeginTimer(t0, t1, sender)
				}
			}
		),
		2194U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTableDoId(it.toUInt32()!!, sender)
			}
		),
		2195U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.UInt8)), FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toList()!!.map { it.toList()!!.map { it.toUInt8()!! } }
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				onSetGameState(t0, t1, t2, t3, sender)
				}
			}
		),
		2196U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTimer(it.toInt16()!!, sender)
			}
		),
		2197U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int16,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetTurnTimer(it.toInt16()!!, sender)
			}
		),
		2198U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onGameStart(it.toUInt8()!!, sender)
			}
		),
		2199U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSendTurn(it.toUInt8()!!, sender)
			}
		),
		2200U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onAnnounceWin(it.toUInt32()!!, sender)
			}
		),
		2201U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				onAnnounceWinLocation(t0, t1, t2, t3, sender)
				}
			}
		),
		2202U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt8()!!
				val t1 = values[1].toUInt8()!!
				val t2 = values[2].toUInt8()!!
				val t3 = values[3].toUInt8()!!
				onAnnounceWinnerPosition(t0, t1, t2, t3, sender)
				}
			}
		),
		2203U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onIllegalMove(sender)
			}
		),
		2204U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onTie(sender)
			}
		),
	)

	fun requestExit() {
		setField(2188U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestBegin() {
		setField(2189U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestMove(arg0: UByte, ) {
		setField(2190U.toFieldId(), arg0.toFieldValue())
	}

	fun requestTimer() {
		setField(2191U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestWin(arg0: List<UByte>, ) {
		setField(2192U.toFieldId(), FieldValue.ArrayValue(FieldValue.Type.UInt8, arg0.map { it.toFieldValue() }).toFieldValue())
	}

	fun startBeginTimer(arg0: UShort, arg1: Short, ) {
		setField(2193U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun setTableDoId(arg0: UInt, ) {
		setField(2194U.toFieldId(), arg0.toFieldValue())
	}

	fun setGameState(arg0: List<List<UByte>>, arg1: UByte, arg2: UByte, arg3: UByte, ) {
		setField(2195U.toFieldId(), FieldValue.TupleValue(
			FieldValue.ArrayValue(FieldValue.Type.Array(FieldValue.Type.UInt8), arg0.map { it.map { it.toFieldValue() }.toFieldValue() }).toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun setTimer(arg0: Short, ) {
		setField(2196U.toFieldId(), arg0.toFieldValue())
	}

	fun setTurnTimer(arg0: Short, ) {
		setField(2197U.toFieldId(), arg0.toFieldValue())
	}

	fun gameStart(arg0: UByte, ) {
		setField(2198U.toFieldId(), arg0.toFieldValue())
	}

	fun sendTurn(arg0: UByte, ) {
		setField(2199U.toFieldId(), arg0.toFieldValue())
	}

	fun announceWin(arg0: UInt, ) {
		setField(2200U.toFieldId(), arg0.toFieldValue())
	}

	fun announceWinLocation(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, ) {
		setField(2201U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun announceWinnerPosition(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, ) {
		setField(2202U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun illegalMove() {
		setField(2203U.toFieldId(), FieldValue.EmptyValue)
	}

	fun tie() {
		setField(2204U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onRequestExit(sender: ChannelId? = null) {}
	open fun onRequestBegin(sender: ChannelId? = null) {}
	open fun onRequestMove(arg0: UByte, sender: ChannelId? = null) {}
	open fun onRequestTimer(sender: ChannelId? = null) {}
	open fun onRequestWin(arg0: List<UByte>, sender: ChannelId? = null) {}
	open fun onStartBeginTimer(arg0: UShort, arg1: Short, sender: ChannelId? = null) {}
	open fun onSetTableDoId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSetGameState(arg0: List<List<UByte>>, arg1: UByte, arg2: UByte, arg3: UByte, sender: ChannelId? = null) {}
	open fun onSetTimer(arg0: Short, sender: ChannelId? = null) {}
	open fun onSetTurnTimer(arg0: Short, sender: ChannelId? = null) {}
	open fun onGameStart(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSendTurn(arg0: UByte, sender: ChannelId? = null) {}
	open fun onAnnounceWin(arg0: UInt, sender: ChannelId? = null) {}
	open fun onAnnounceWinLocation(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, sender: ChannelId? = null) {}
	open fun onAnnounceWinnerPosition(arg0: UByte, arg1: UByte, arg2: UByte, arg3: UByte, sender: ChannelId? = null) {}
	open fun onIllegalMove(sender: ChannelId? = null) {}
	open fun onTie(sender: ChannelId? = null) {}
}

open class DistributedMailManager(doId: DOId): DistributedObjectBase(doId, 381U.toDClassId()) {
	companion object {
		val dClassId = 381U.toDClassId()

		object Fields {
			val sendSimpleMail: FieldId = 2205U.toFieldId()
			val setNumMailItems: FieldId = 2206U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2205U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				onSendSimpleMail(t0, t1, t2, sender)
				}
			}
		),
		2206U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSetNumMailItems(t0, t1, sender)
				}
			}
		),
	)

	fun sendSimpleMail(arg0: UInt, arg1: UInt, arg2: String, ) {
		setField(2205U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun setNumMailItems(arg0: UInt, arg1: UInt, ) {
		setField(2206U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onSendSimpleMail(arg0: UInt, arg1: UInt, arg2: String, sender: ChannelId? = null) {}
	open fun onSetNumMailItems(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
}

open class DistributedPartyManager(doId: DOId): DistributedObjectBase(doId, 382U.toDClassId()) {
	companion object {
		val dClassId = 382U.toDClassId()

		object Fields {
			val addParty: FieldId = 2207U.toFieldId()
			val addPartyRequest: FieldId = 2208U.toFieldId()
			val addPartyResponse: FieldId = 2209U.toFieldId()
			val addPartyResponseUdToAi: FieldId = 2210U.toFieldId()
			val markInviteAsReadButNotReplied: FieldId = 2211U.toFieldId()
			val respondToInvite: FieldId = 2212U.toFieldId()
			val respondToInviteResponse: FieldId = 2213U.toFieldId()
			val changePrivateRequest: FieldId = 2214U.toFieldId()
			val changePrivateRequestAiToUd: FieldId = 2215U.toFieldId()
			val changePrivateResponseUdToAi: FieldId = 2216U.toFieldId()
			val changePrivateResponse: FieldId = 2217U.toFieldId()
			val changePartyStatusRequest: FieldId = 2218U.toFieldId()
			val changePartyStatusRequestAiToUd: FieldId = 2219U.toFieldId()
			val changePartyStatusResponseUdToAi: FieldId = 2220U.toFieldId()
			val changePartyStatusResponse: FieldId = 2221U.toFieldId()
			val partyInfoOfHostRequestAiToUd: FieldId = 2222U.toFieldId()
			val partyInfoOfHostFailedResponseUdToAi: FieldId = 2223U.toFieldId()
			val partyInfoOfHostResponseUdToAi: FieldId = 2224U.toFieldId()
			val givePartyRefundResponse: FieldId = 2225U.toFieldId()
			val getPartyZone: FieldId = 2226U.toFieldId()
			val receivePartyZone: FieldId = 2227U.toFieldId()
			val freeZoneIdFromPlannedParty: FieldId = 2228U.toFieldId()
			val sendAvToPlayground: FieldId = 2229U.toFieldId()
			val exitParty: FieldId = 2230U.toFieldId()
			val removeGuest: FieldId = 2231U.toFieldId()
			val partyManagerAIStartingUp: FieldId = 2232U.toFieldId()
			val partyManagerAIGoingDown: FieldId = 2233U.toFieldId()
			val partyHasStartedAiToUd: FieldId = 2234U.toFieldId()
			val toonHasEnteredPartyAiToUd: FieldId = 2235U.toFieldId()
			val toonHasExitedPartyAiToUd: FieldId = 2236U.toFieldId()
			val partyHasFinishedUdToAllAi: FieldId = 2237U.toFieldId()
			val updateToPublicPartyInfoUdToAllAi: FieldId = 2238U.toFieldId()
			val updateToPublicPartyCountUdToAllAi: FieldId = 2239U.toFieldId()
			val requestShardIdZoneIdForHostId: FieldId = 2240U.toFieldId()
			val sendShardIdZoneIdToAvatar: FieldId = 2241U.toFieldId()
			val partyManagerUdStartingUp: FieldId = 2242U.toFieldId()
			val updateAllPartyInfoToUd: FieldId = 2243U.toFieldId()
			val forceCheckStart: FieldId = 2244U.toFieldId()
			val requestMw: FieldId = 2245U.toFieldId()
			val mwResponseUdToAllAi: FieldId = 2246U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2207U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toStringValue()!!
				val t4 = values[4].toInt8()!!
				val t5 = values[5].toInt8()!!
				val t6 = with(activity) { values[6].toList()!!.map { fromFieldValue(it) }}
				val t7 = with(decoration) { values[7].toList()!!.map { fromFieldValue(it) }}
				val t8 = values[8].toList()!!.map { it.toUInt32()!! }
				val t9 = values[9].toUInt16()!!
				onAddParty(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, sender)
				}
			}
		),
		2208U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toList()!!.map { it.toChar()!! }
				val t2 = values[2].toList()!!.map { it.toChar()!! }
				val t3 = values[3].toInt8()!!
				val t4 = values[4].toInt8()!!
				val t5 = with(activity) { values[5].toList()!!.map { fromFieldValue(it) }}
				val t6 = with(decoration) { values[6].toList()!!.map { fromFieldValue(it) }}
				val t7 = values[7].toList()!!.map { it.toUInt32()!! }
				onAddPartyRequest(t0, t1, t2, t3, t4, t5, t6, t7, sender)
				}
			}
		),
		2209U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				onAddPartyResponse(t0, t1, sender)
				}
			}
		),
		2210U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toUInt16()!!
				onAddPartyResponseUdToAi(t0, t1, t2, sender)
				}
			}
		),
		2211U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt64()!!
				onMarkInviteAsReadButNotReplied(t0, t1, sender)
				}
			}
		),
		2212U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt64, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt16()!!
				val t3 = values[3].toUInt64()!!
				val t4 = values[4].toUInt8()!!
				onRespondToInvite(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		2213U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt16()!!
				val t2 = values[2].toUInt64()!!
				val t3 = values[3].toInt8()!!
				val t4 = values[4].toUInt8()!!
				onRespondToInviteResponse(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		2214U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt64()!!
				val t1 = values[1].toInt8()!!
				onChangePrivateRequest(t0, t1, sender)
				}
			}
		),
		2215U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt64()!!
				val t2 = values[2].toInt8()!!
				onChangePrivateRequestAiToUd(t0, t1, t2, sender)
				}
			}
		),
		2216U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt64()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt8()!!
				onChangePrivateResponseUdToAi(t0, t1, t2, t3, sender)
				}
			}
		),
		2217U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt64()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				onChangePrivateResponse(t0, t1, t2, sender)
				}
			}
		),
		2218U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt64()!!
				val t1 = values[1].toInt8()!!
				onChangePartyStatusRequest(t0, t1, sender)
				}
			}
		),
		2219U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt64()!!
				val t2 = values[2].toInt8()!!
				onChangePartyStatusRequestAiToUd(t0, t1, t2, sender)
				}
			}
		),
		2220U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.Int8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt64()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toInt8()!!
				onChangePartyStatusResponseUdToAi(t0, t1, t2, t3, sender)
				}
			}
		),
		2221U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt64()!!
				val t1 = values[1].toInt8()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toUInt16()!!
				onChangePartyStatusResponse(t0, t1, t2, t3, sender)
				}
			}
		),
		2222U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onPartyInfoOfHostRequestAiToUd(t0, t1, sender)
				}
			}
		),
		2223U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onPartyInfoOfHostFailedResponseUdToAi(it.toUInt32()!!, sender)
			}
		),
		2224U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.UInt8, ), FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = with(party) { fromFieldValue(it)}
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onPartyInfoOfHostResponseUdToAi(t0, t1, sender)
				}
			}
		),
		2225U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.UInt16, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt64()!!
				val t2 = values[2].toInt8()!!
				val t3 = values[3].toUInt16()!!
				val t4 = values[4].toUInt32()!!
				onGivePartyRefundResponse(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		2226U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt8()!!
				onGetPartyZone(t0, t1, t2, sender)
				}
			}
		),
		2227U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt64()!!
				val t2 = values[2].toUInt32()!!
				onReceivePartyZone(t0, t1, t2, sender)
				}
			}
		),
		2228U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onFreeZoneIdFromPlannedParty(t0, t1, sender)
				}
			}
		),
		2229U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onSendAvToPlayground(t0, t1, sender)
				}
			}
		),
		2230U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onExitParty(it.toUInt32()!!, sender)
			}
		),
		2231U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRemoveGuest(t0, t1, sender)
				}
			}
		),
		2232U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onPartyManagerAIStartingUp(t0, t1, sender)
				}
			}
		),
		2233U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onPartyManagerAIGoingDown(t0, t1, sender)
				}
			}
		),
		2234U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt64()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toStringValue()!!
				onPartyHasStartedAiToUd(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		2235U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onToonHasEnteredPartyAiToUd(it.toUInt32()!!, sender)
			}
		),
		2236U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onToonHasExitedPartyAiToUd(it.toUInt32()!!, sender)
			}
		),
		2237U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onPartyHasFinishedUdToAllAi(it.toUInt32()!!, sender)
			}
		),
		2238U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt64, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt64()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt8()!!
				val t5 = values[5].toUInt8()!!
				val t6 = values[6].toStringValue()!!
				val t7 = values[7].toList()!!.map { it.toUInt8()!! }
				val t8 = values[8].toUInt64()!!
				onUpdateToPublicPartyInfoUdToAllAi(t0, t1, t2, t3, t4, t5, t6, t7, t8, sender)
				}
			}
		),
		2239U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt8()!!
				onUpdateToPublicPartyCountUdToAllAi(t0, t1, sender)
				}
			}
		),
		2240U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt32,
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				onRequestShardIdZoneIdForHostId(it.toUInt32()!!, sender)
			}
		),
		2241U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onSendShardIdZoneIdToAvatar(t0, t1, sender)
				}
			}
		),
		2242U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onPartyManagerUdStartingUp(sender)
			}
		),
		2243U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt64, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt64()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt8()!!
				val t5 = values[5].toUInt8()!!
				val t6 = values[6].toStringValue()!!
				val t7 = values[7].toList()!!.map { it.toUInt8()!! }
				val t8 = values[8].toUInt64()!!
				onUpdateAllPartyInfoToUd(t0, t1, t2, t3, t4, t5, t6, t7, t8, sender)
				}
			}
		),
		2244U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				onForceCheckStart(sender)
			}
		),
		2245U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				onRequestMw(t0, t1, t2, t3, sender)
				}
			}
		),
		2246U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				onMwResponseUdToAllAi(t0, t1, t2, t3, sender)
				}
			}
		),
	)

	fun addParty(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: Byte, arg5: Byte, arg6: List<activity>, arg7: List<decoration>, arg8: List<UInt>, arg9: UShort, ) {
		setField(2207U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			with(activity) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), arg6.map { it.toFieldValue() }).toFieldValue()}, 
			with(decoration) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), arg7.map { it.toFieldValue() }).toFieldValue()}, 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg8.map { it.toFieldValue() }).toFieldValue(), 
			arg9.toFieldValue(), 
				))
	}

	fun addPartyRequest(arg0: UInt, arg1: List<Char>, arg2: List<Char>, arg3: Byte, arg4: Byte, arg5: List<activity>, arg6: List<decoration>, arg7: List<UInt>, ) {
		setField(2208U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Char, arg1.map { it.toFieldValue() }).toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Char, arg2.map { it.toFieldValue() }).toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			with(activity) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), arg5.map { it.toFieldValue() }).toFieldValue()}, 
			with(decoration) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), arg6.map { it.toFieldValue() }).toFieldValue()}, 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg7.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun addPartyResponse(arg0: UInt, arg1: Byte, ) {
		setField(2209U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun addPartyResponseUdToAi(arg0: UInt, arg1: Byte, arg2: UShort, ) {
		setField(2210U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun markInviteAsReadButNotReplied(arg0: UInt, arg1: ULong, ) {
		setField(2211U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun respondToInvite(arg0: UInt, arg1: UInt, arg2: UShort, arg3: ULong, arg4: UByte, ) {
		setField(2212U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun respondToInviteResponse(arg0: UInt, arg1: UShort, arg2: ULong, arg3: Byte, arg4: UByte, ) {
		setField(2213U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun changePrivateRequest(arg0: ULong, arg1: Byte, ) {
		setField(2214U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun changePrivateRequestAiToUd(arg0: UInt, arg1: ULong, arg2: Byte, ) {
		setField(2215U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun changePrivateResponseUdToAi(arg0: UInt, arg1: ULong, arg2: Byte, arg3: Byte, ) {
		setField(2216U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun changePrivateResponse(arg0: ULong, arg1: Byte, arg2: Byte, ) {
		setField(2217U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun changePartyStatusRequest(arg0: ULong, arg1: Byte, ) {
		setField(2218U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun changePartyStatusRequestAiToUd(arg0: UInt, arg1: ULong, arg2: Byte, ) {
		setField(2219U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun changePartyStatusResponseUdToAi(arg0: UInt, arg1: ULong, arg2: Byte, arg3: Byte, ) {
		setField(2220U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun changePartyStatusResponse(arg0: ULong, arg1: Byte, arg2: Byte, arg3: UShort, ) {
		setField(2221U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun partyInfoOfHostRequestAiToUd(arg0: UInt, arg1: UInt, ) {
		setField(2222U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun partyInfoOfHostFailedResponseUdToAi(arg0: UInt, ) {
		setField(2223U.toFieldId(), arg0.toFieldValue())
	}

	fun partyInfoOfHostResponseUdToAi(arg0: party, arg1: List<UInt>, ) {
		setField(2224U.toFieldId(), FieldValue.TupleValue(
			with(party) { arg0.toFieldValue()}, 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun givePartyRefundResponse(arg0: UInt, arg1: ULong, arg2: Byte, arg3: UShort, arg4: UInt, ) {
		setField(2225U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun getPartyZone(arg0: UInt, arg1: UInt, arg2: UByte, ) {
		setField(2226U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun receivePartyZone(arg0: UInt, arg1: ULong, arg2: UInt, ) {
		setField(2227U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun freeZoneIdFromPlannedParty(arg0: UInt, arg1: UInt, ) {
		setField(2228U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun sendAvToPlayground(arg0: UInt, arg1: UByte, ) {
		setField(2229U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun exitParty(arg0: UInt, ) {
		setField(2230U.toFieldId(), arg0.toFieldValue())
	}

	fun removeGuest(arg0: UInt, arg1: UInt, ) {
		setField(2231U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun partyManagerAIStartingUp(arg0: UInt, arg1: UInt, ) {
		setField(2232U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun partyManagerAIGoingDown(arg0: UInt, arg1: UInt, ) {
		setField(2233U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun partyHasStartedAiToUd(arg0: UInt, arg1: ULong, arg2: UInt, arg3: UInt, arg4: String, ) {
		setField(2234U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun toonHasEnteredPartyAiToUd(arg0: UInt, ) {
		setField(2235U.toFieldId(), arg0.toFieldValue())
	}

	fun toonHasExitedPartyAiToUd(arg0: UInt, ) {
		setField(2236U.toFieldId(), arg0.toFieldValue())
	}

	fun partyHasFinishedUdToAllAi(arg0: UInt, ) {
		setField(2237U.toFieldId(), arg0.toFieldValue())
	}

	fun updateToPublicPartyInfoUdToAllAi(arg0: UInt, arg1: ULong, arg2: UInt, arg3: UInt, arg4: UByte, arg5: UByte, arg6: String, arg7: List<UByte>, arg8: ULong, ) {
		setField(2238U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg7.map { it.toFieldValue() }).toFieldValue(), 
			arg8.toFieldValue(), 
				))
	}

	fun updateToPublicPartyCountUdToAllAi(arg0: UInt, arg1: UByte, ) {
		setField(2239U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun requestShardIdZoneIdForHostId(arg0: UInt, ) {
		setField(2240U.toFieldId(), arg0.toFieldValue())
	}

	fun sendShardIdZoneIdToAvatar(arg0: UInt, arg1: UInt, ) {
		setField(2241U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun partyManagerUdStartingUp() {
		setField(2242U.toFieldId(), FieldValue.EmptyValue)
	}

	fun updateAllPartyInfoToUd(arg0: UInt, arg1: ULong, arg2: UInt, arg3: UInt, arg4: UByte, arg5: UByte, arg6: String, arg7: List<UByte>, arg8: ULong, ) {
		setField(2243U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
			arg6.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt8, arg7.map { it.toFieldValue() }).toFieldValue(), 
			arg8.toFieldValue(), 
				))
	}

	fun forceCheckStart() {
		setField(2244U.toFieldId(), FieldValue.EmptyValue)
	}

	fun requestMw(arg0: UInt, arg1: String, arg2: UInt, arg3: UInt, ) {
		setField(2245U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun mwResponseUdToAllAi(arg0: UInt, arg1: String, arg2: UInt, arg3: UInt, ) {
		setField(2246U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	open fun onAddParty(arg0: UInt, arg1: UInt, arg2: String, arg3: String, arg4: Byte, arg5: Byte, arg6: List<activity>, arg7: List<decoration>, arg8: List<UInt>, arg9: UShort, sender: ChannelId? = null) {}
	open fun onAddPartyRequest(arg0: UInt, arg1: List<Char>, arg2: List<Char>, arg3: Byte, arg4: Byte, arg5: List<activity>, arg6: List<decoration>, arg7: List<UInt>, sender: ChannelId? = null) {}
	open fun onAddPartyResponse(arg0: UInt, arg1: Byte, sender: ChannelId? = null) {}
	open fun onAddPartyResponseUdToAi(arg0: UInt, arg1: Byte, arg2: UShort, sender: ChannelId? = null) {}
	open fun onMarkInviteAsReadButNotReplied(arg0: UInt, arg1: ULong, sender: ChannelId? = null) {}
	open fun onRespondToInvite(arg0: UInt, arg1: UInt, arg2: UShort, arg3: ULong, arg4: UByte, sender: ChannelId? = null) {}
	open fun onRespondToInviteResponse(arg0: UInt, arg1: UShort, arg2: ULong, arg3: Byte, arg4: UByte, sender: ChannelId? = null) {}
	open fun onChangePrivateRequest(arg0: ULong, arg1: Byte, sender: ChannelId? = null) {}
	open fun onChangePrivateRequestAiToUd(arg0: UInt, arg1: ULong, arg2: Byte, sender: ChannelId? = null) {}
	open fun onChangePrivateResponseUdToAi(arg0: UInt, arg1: ULong, arg2: Byte, arg3: Byte, sender: ChannelId? = null) {}
	open fun onChangePrivateResponse(arg0: ULong, arg1: Byte, arg2: Byte, sender: ChannelId? = null) {}
	open fun onChangePartyStatusRequest(arg0: ULong, arg1: Byte, sender: ChannelId? = null) {}
	open fun onChangePartyStatusRequestAiToUd(arg0: UInt, arg1: ULong, arg2: Byte, sender: ChannelId? = null) {}
	open fun onChangePartyStatusResponseUdToAi(arg0: UInt, arg1: ULong, arg2: Byte, arg3: Byte, sender: ChannelId? = null) {}
	open fun onChangePartyStatusResponse(arg0: ULong, arg1: Byte, arg2: Byte, arg3: UShort, sender: ChannelId? = null) {}
	open fun onPartyInfoOfHostRequestAiToUd(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onPartyInfoOfHostFailedResponseUdToAi(arg0: UInt, sender: ChannelId? = null) {}
	open fun onPartyInfoOfHostResponseUdToAi(arg0: party, arg1: List<UInt>, sender: ChannelId? = null) {}
	open fun onGivePartyRefundResponse(arg0: UInt, arg1: ULong, arg2: Byte, arg3: UShort, arg4: UInt, sender: ChannelId? = null) {}
	open fun onGetPartyZone(arg0: UInt, arg1: UInt, arg2: UByte, sender: ChannelId? = null) {}
	open fun onReceivePartyZone(arg0: UInt, arg1: ULong, arg2: UInt, sender: ChannelId? = null) {}
	open fun onFreeZoneIdFromPlannedParty(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onSendAvToPlayground(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onExitParty(arg0: UInt, sender: ChannelId? = null) {}
	open fun onRemoveGuest(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onPartyManagerAIStartingUp(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onPartyManagerAIGoingDown(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onPartyHasStartedAiToUd(arg0: UInt, arg1: ULong, arg2: UInt, arg3: UInt, arg4: String, sender: ChannelId? = null) {}
	open fun onToonHasEnteredPartyAiToUd(arg0: UInt, sender: ChannelId? = null) {}
	open fun onToonHasExitedPartyAiToUd(arg0: UInt, sender: ChannelId? = null) {}
	open fun onPartyHasFinishedUdToAllAi(arg0: UInt, sender: ChannelId? = null) {}
	open fun onUpdateToPublicPartyInfoUdToAllAi(arg0: UInt, arg1: ULong, arg2: UInt, arg3: UInt, arg4: UByte, arg5: UByte, arg6: String, arg7: List<UByte>, arg8: ULong, sender: ChannelId? = null) {}
	open fun onUpdateToPublicPartyCountUdToAllAi(arg0: UInt, arg1: UByte, sender: ChannelId? = null) {}
	open fun onRequestShardIdZoneIdForHostId(arg0: UInt, sender: ChannelId? = null) {}
	open fun onSendShardIdZoneIdToAvatar(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onPartyManagerUdStartingUp(sender: ChannelId? = null) {}
	open fun onUpdateAllPartyInfoToUd(arg0: UInt, arg1: ULong, arg2: UInt, arg3: UInt, arg4: UByte, arg5: UByte, arg6: String, arg7: List<UByte>, arg8: ULong, sender: ChannelId? = null) {}
	open fun onForceCheckStart(sender: ChannelId? = null) {}
	open fun onRequestMw(arg0: UInt, arg1: String, arg2: UInt, arg3: UInt, sender: ChannelId? = null) {}
	open fun onMwResponseUdToAllAi(arg0: UInt, arg1: String, arg2: UInt, arg3: UInt, sender: ChannelId? = null) {}
}

open class DistributedObjectGlobal(doId: DOId): DistributedObjectBase(doId, 383U.toDClassId()) {
	companion object {
		val dClassId = 383U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class RATManager(doId: DOId): DistributedObjectBase(doId, 384U.toDClassId()) {
	companion object {
		val dClassId = 384U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class AwardManager(doId: DOId): DistributedObjectBase(doId, 385U.toDClassId()) {
	companion object {
		val dClassId = 385U.toDClassId()

		object Fields {
			val giveAwardToToon: FieldId = 2247U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2247U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = with(DoId) { fromFieldValue(it)}
				val t2 = values[2].toStringValue()!!
				val t3 = with(DoId) { fromFieldValue(it)}
				val t4 = values[4].toUInt32()!!
				val t5 = values[5].toUInt32()!!
				onGiveAwardToToon(t0, t1, t2, t3, t4, t5, sender)
				}
			}
		),
	)

	fun giveAwardToToon(arg0: UInt, arg1: DoId, arg2: String, arg3: DoId, arg4: UInt, arg5: UInt, ) {
		setField(2247U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			with(DoId) { arg1.toFieldValue()}, 
			arg2.toFieldValue(), 
			with(DoId) { arg3.toFieldValue()}, 
			arg4.toFieldValue(), 
			arg5.toFieldValue(), 
				))
	}

	open fun onGiveAwardToToon(arg0: UInt, arg1: DoId, arg2: String, arg3: DoId, arg4: UInt, arg5: UInt, sender: ChannelId? = null) {}
}

open class DistributedCpuInfoMgr(doId: DOId): DistributedObjectBase(doId, 386U.toDClassId()) {
	companion object {
		val dClassId = 386U.toDClassId()

		object Fields {
			val setCpuInfoToUd: FieldId = 2248U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2248U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toStringValue()!!
				val t3 = values[3].toStringValue()!!
				onSetCpuInfoToUd(t0, t1, t2, t3, sender)
				}
			}
		),
	)

	fun setCpuInfoToUd(arg0: UInt, arg1: UInt, arg2: String, arg3: String, ) {
		setField(2248U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	open fun onSetCpuInfoToUd(arg0: UInt, arg1: UInt, arg2: String, arg3: String, sender: ChannelId? = null) {}
}

open class DistributedSecurityMgr(doId: DOId): DistributedObjectBase(doId, 387U.toDClassId()) {
	companion object {
		val dClassId = 387U.toDClassId()

		object Fields {
			val requestAccountId: FieldId = 2249U.toFieldId()
			val requestAccountIdResponse: FieldId = 2250U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2249U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onRequestAccountId(t0, t1, t2, sender)
				}
			}
		),
		2250U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onRequestAccountIdResponse(t0, t1, sender)
				}
			}
		),
	)

	fun requestAccountId(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(2249U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	fun requestAccountIdResponse(arg0: UInt, arg1: UInt, ) {
		setField(2250U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	open fun onRequestAccountId(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
	open fun onRequestAccountIdResponse(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
}

open class NonRepeatableRandomSourceClient(doId: DOId): DistributedObjectBase(doId, 388U.toDClassId()) {
	companion object {
		val dClassId = 388U.toDClassId()

		object Fields {
			val getRandomSamplesReply: FieldId = 2251U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2251U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toList()!!.map { it.toUInt32()!! }
				onGetRandomSamplesReply(t0, t1, sender)
				}
			}
		),
	)

	fun getRandomSamplesReply(arg0: UInt, arg1: List<UInt>, ) {
		setField(2251U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.UInt32, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	open fun onGetRandomSamplesReply(arg0: UInt, arg1: List<UInt>, sender: ChannelId? = null) {}
}

open class TTCodeRedemptionMgr(doId: DOId): DistributedObjectBase(doId, 389U.toDClassId()) {
	companion object {
		val dClassId = 389U.toDClassId()

		object Fields {
			val giveAwardToToonResult: FieldId = 2252U.toFieldId()
			val redeemCode: FieldId = 2253U.toFieldId()
			val redeemCodeAiToUd: FieldId = 2254U.toFieldId()
			val redeemCodeResultUdToAi: FieldId = 2255U.toFieldId()
			val redeemCodeResult: FieldId = 2256U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2252U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onGiveAwardToToonResult(t0, t1, sender)
				}
			}
		),
		2253U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Char), ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
					clsend = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toList()!!.map { it.toChar()!! }
				onRedeemCode(t0, t1, sender)
				}
			}
		),
		2254U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = with(DoId) { fromFieldValue(it)}
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toStringValue()!!
				val t4 = values[4].toUInt32()!!
				onRedeemCodeAiToUd(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		2255U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				val t4 = values[4].toUInt32()!!
				onRedeemCodeResultUdToAi(t0, t1, t2, t3, t4, sender)
				}
			}
		),
		2256U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				val t2 = values[2].toUInt32()!!
				onRedeemCodeResult(t0, t1, t2, sender)
				}
			}
		),
	)

	fun giveAwardToToonResult(arg0: UInt, arg1: UInt, ) {
		setField(2252U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun redeemCode(arg0: UInt, arg1: List<Char>, ) {
		setField(2253U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			FieldValue.ArrayValue(FieldValue.Type.Char, arg1.map { it.toFieldValue() }).toFieldValue(), 
				))
	}

	fun redeemCodeAiToUd(arg0: UInt, arg1: DoId, arg2: UInt, arg3: String, arg4: UInt, ) {
		setField(2254U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			with(DoId) { arg1.toFieldValue()}, 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun redeemCodeResultUdToAi(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, arg4: UInt, ) {
		setField(2255U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
			arg4.toFieldValue(), 
				))
	}

	fun redeemCodeResult(arg0: UInt, arg1: UInt, arg2: UInt, ) {
		setField(2256U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
				))
	}

	open fun onGiveAwardToToonResult(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onRedeemCode(arg0: UInt, arg1: List<Char>, sender: ChannelId? = null) {}
	open fun onRedeemCodeAiToUd(arg0: UInt, arg1: DoId, arg2: UInt, arg3: String, arg4: UInt, sender: ChannelId? = null) {}
	open fun onRedeemCodeResultUdToAi(arg0: UInt, arg1: UInt, arg2: UInt, arg3: UInt, arg4: UInt, sender: ChannelId? = null) {}
	open fun onRedeemCodeResult(arg0: UInt, arg1: UInt, arg2: UInt, sender: ChannelId? = null) {}
}

open class NonRepeatableRandomSource(doId: DOId): DistributedObjectBase(doId, 390U.toDClassId()) {
	companion object {
		val dClassId = 390U.toDClassId()

		object Fields {
			val getRandomSamples: FieldId = 2257U.toFieldId()
			val randomSample: FieldId = 2258U.toFieldId()
			val randomSampleAck: FieldId = 2259U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2257U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = with(DoId) { fromFieldValue(it)}
				val t1 = values[1].toStringValue()!!
				val t2 = values[2].toUInt32()!!
				val t3 = values[3].toUInt32()!!
				onGetRandomSamples(t0, t1, t2, t3, sender)
				}
			}
		),
		2258U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = with(DoId) { fromFieldValue(it)}
				val t1 = values[1].toUInt32()!!
				onRandomSample(t0, t1, sender)
				}
			}
		),
		2259U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onRandomSampleAck(sender)
			}
		),
	)

	fun getRandomSamples(arg0: DoId, arg1: String, arg2: UInt, arg3: UInt, ) {
		setField(2257U.toFieldId(), FieldValue.TupleValue(
			with(DoId) { arg0.toFieldValue()}, 
			arg1.toFieldValue(), 
			arg2.toFieldValue(), 
			arg3.toFieldValue(), 
				))
	}

	fun randomSample(arg0: DoId, arg1: UInt, ) {
		setField(2258U.toFieldId(), FieldValue.TupleValue(
			with(DoId) { arg0.toFieldValue()}, 
			arg1.toFieldValue(), 
				))
	}

	fun randomSampleAck() {
		setField(2259U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onGetRandomSamples(arg0: DoId, arg1: String, arg2: UInt, arg3: UInt, sender: ChannelId? = null) {}
	open fun onRandomSample(arg0: DoId, arg1: UInt, sender: ChannelId? = null) {}
	open fun onRandomSampleAck(sender: ChannelId? = null) {}
}

open class DistributedInGameNewsMgr(doId: DOId): DistributedObjectBase(doId, 391U.toDClassId()) {
	companion object {
		val dClassId = 391U.toDClassId()

		object Fields {
			val setLatestIssueStr: FieldId = 2260U.toFieldId()
			val inGameNewsMgrAIStartingUp: FieldId = 2261U.toFieldId()
			val newIssueUDtoAI: FieldId = 2262U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2260U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetLatestIssueStr(it.toStringValue()!!, sender)
			}
		),
		2261U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onInGameNewsMgrAIStartingUp(t0, t1, sender)
				}
			}
		),
		2262U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.String,
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onNewIssueUDtoAI(it.toStringValue()!!, sender)
			}
		),
	)

	fun setLatestIssueStr(arg0: String, ) {
		setField(2260U.toFieldId(), arg0.toFieldValue())
	}

	fun inGameNewsMgrAIStartingUp(arg0: UInt, arg1: UInt, ) {
		setField(2261U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun newIssueUDtoAI(arg0: String, ) {
		setField(2262U.toFieldId(), arg0.toFieldValue())
	}

	open fun onSetLatestIssueStr(arg0: String, sender: ChannelId? = null) {}
	open fun onInGameNewsMgrAIStartingUp(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onNewIssueUDtoAI(arg0: String, sender: ChannelId? = null) {}
}

open class DistributedWhitelistMgr(doId: DOId): DistributedObjectBase(doId, 392U.toDClassId()) {
	companion object {
		val dClassId = 392U.toDClassId()

		object Fields {
			val updateWhitelist: FieldId = 2263U.toFieldId()
			val whitelistMgrAIStartingUp: FieldId = 2264U.toFieldId()
			val newListUDtoAI: FieldId = 2265U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2263U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onUpdateWhitelist(sender)
			}
		),
		2264U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ),
				modifiers = DistributedFieldModifiers(
				)
			),
			onChange = { it, sender ->
				it.toTuple()!!.let { values ->
				val t0 = values[0].toUInt32()!!
				val t1 = values[1].toUInt32()!!
				onWhitelistMgrAIStartingUp(t0, t1, sender)
				}
			}
		),
		2265U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Empty,
				modifiers = DistributedFieldModifiers(
					airecv = true,
				)
			),
			onChange = { it, sender ->
				onNewListUDtoAI(sender)
			}
		),
	)

	fun updateWhitelist() {
		setField(2263U.toFieldId(), FieldValue.EmptyValue)
	}

	fun whitelistMgrAIStartingUp(arg0: UInt, arg1: UInt, ) {
		setField(2264U.toFieldId(), FieldValue.TupleValue(
			arg0.toFieldValue(), 
			arg1.toFieldValue(), 
				))
	}

	fun newListUDtoAI() {
		setField(2265U.toFieldId(), FieldValue.EmptyValue)
	}

	open fun onUpdateWhitelist(sender: ChannelId? = null) {}
	open fun onWhitelistMgrAIStartingUp(arg0: UInt, arg1: UInt, sender: ChannelId? = null) {}
	open fun onNewListUDtoAI(sender: ChannelId? = null) {}
}

open class DistributedPhaseEventMgr(doId: DOId): DistributedObjectBase(doId, 393U.toDClassId()) {
	companion object {
		val dClassId = 393U.toDClassId()

		object Fields {
			val setNumPhases: FieldId = 2266U.toFieldId()
			val setDates: FieldId = 2267U.toFieldId()
			val setCurPhase: FieldId = 2268U.toFieldId()
			val setIsRunning: FieldId = 2269U.toFieldId()
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
		2266U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetNumPhases(it.toUInt8()!!, sender)
			}
		),
		2267U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )),
				modifiers = DistributedFieldModifiers(
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetDates(with(datetime) { it.toList()!!.map { fromFieldValue(it) }}, sender)
			}
		),
		2268U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.Int8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetCurPhase(it.toInt8()!!, sender)
			}
		),
		2269U.toFieldId() to DistributedField(
			DistributedFieldSpec(
				FieldValue.Type.UInt8,
				modifiers = DistributedFieldModifiers(
					ram = true,
					required = true,
					broadcast = true,
				)
			),
			onChange = { it, sender ->
				onSetIsRunning(with(bool) { fromFieldValue(it)}, sender)
			}
		),
	)

	fun setNumPhases(arg0: UByte, ) {
		setField(2266U.toFieldId(), arg0.toFieldValue())
	}

	fun setDates(arg0: List<datetime>, ) {
		setField(2267U.toFieldId(), with(datetime) { FieldValue.ArrayValue(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), arg0.map { it.toFieldValue() }).toFieldValue()})
	}

	fun setCurPhase(arg0: Byte, ) {
		setField(2268U.toFieldId(), arg0.toFieldValue())
	}

	fun setIsRunning(arg0: bool, ) {
		setField(2269U.toFieldId(), with(bool) { arg0.toFieldValue()})
	}

	open fun onSetNumPhases(arg0: UByte, sender: ChannelId? = null) {}
	open fun onSetDates(arg0: List<datetime>, sender: ChannelId? = null) {}
	open fun onSetCurPhase(arg0: Byte, sender: ChannelId? = null) {}
	open fun onSetIsRunning(arg0: bool, sender: ChannelId? = null) {}
}

open class DistributedHydrantZeroMgr(doId: DOId): DistributedObjectBase(doId, 394U.toDClassId()) {
	companion object {
		val dClassId = 394U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedMailboxZeroMgr(doId: DOId): DistributedObjectBase(doId, 395U.toDClassId()) {
	companion object {
		val dClassId = 395U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedTrashcanZeroMgr(doId: DOId): DistributedObjectBase(doId, 396U.toDClassId()) {
	companion object {
		val dClassId = 396U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

open class DistributedSillyMeterMgr(doId: DOId): DistributedObjectBase(doId, 397U.toDClassId()) {
	companion object {
		val dClassId = 397U.toDClassId()

		object Fields {
		}
	}
	override val objectFields: Map<FieldId, DistributedField> = mapOf(
	)

}

val classSpecRepository = ClassSpecRepository.build {
	// AvatarPendingDel
	struct {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
	}
	// Account
	dclass {
		field(FieldValue.Type.String) {
			db()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			db()
		}
		field(FieldValue.Type.UInt32) {
			db()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))) {
			db()
		}
		field(FieldValue.Type.String) {
			db()
		}
		field(FieldValue.Type.String) {
			db()
		}
		field(FieldValue.Type.String) {
			db()
		}
		field(FieldValue.Type.String) {
			db()
		}
	}
	// AstronAccount
	dclass {
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
		}
		field(FieldValue.Type.UInt32) {
			db()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))) {
			db()
		}
		field(FieldValue.Type.String) {
			db()
		}
		field(FieldValue.Type.String) {
			db()
		}
		field(FieldValue.Type.String) {
			db()
		}
		field(FieldValue.Type.String) {
			db()
		}
	}
	// BarrierData
	struct {
		field(FieldValue.Type.UInt16)
		field(FieldValue.Type.String)
		field(FieldValue.Type.Array(FieldValue.Type.UInt32))
	}
	// DistributedObject
	dclass {
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), ))) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedTestObject
	dclass {
		field(FieldValue.Type.Array(FieldValue.Type.UInt32))
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			airecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
	}
	// OSInfo
	struct {
		field(FieldValue.Type.String)
		field(FieldValue.Type.Int16)
		field(FieldValue.Type.Int16)
		field(FieldValue.Type.Int16)
	}
	// CPUSpeed
	struct {
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
	}
	// TimeManager
	dclass {
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.String) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Blob, FieldValue.Type.Blob, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ), FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, ), FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.String, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, )) {
			airecv()
			clsend()
		}
	}
	// ObjectServer
	dclass {
		field(FieldValue.Type.String) {
			ram()
			required()
			airecv()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
		}
	}
	// DistributedDirectory
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, )) {
			ram()
			broadcast()
		}
	}
	// DistributedDistrict
	dclass {
		field(FieldValue.Type.String) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedNode
	dclass {
		field(FieldValue.Type.Blob) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
	}
	// DistributedSmoothNode
	dclass {
		field(FieldValue.Type.UInt64) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Int8) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.UInt16, FieldValue.Type.UInt16, )) {
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.UInt16, FieldValue.Type.UInt16, )) {
			ownrecv()
			clsend()
		}
	}
	// DistributedCartesianGrid
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, )) {
			ram()
			broadcast()
		}
	}
	// Fixture
	struct {
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int16)
		field(FieldValue.Type.Int16)
		field(FieldValue.Type.Int16)
		field(FieldValue.Type.String)
	}
	// DistributedCamera
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.String, ))) {
			ram()
			required()
			airecv()
			broadcast()
			ownsend()
		}
	}
	// TalkModification
	struct {
		field(FieldValue.Type.UInt16)
		field(FieldValue.Type.UInt16)
	}
	// TalkPath_owner
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, )), FieldValue.Type.UInt8, )) {
			broadcast()
			ownsend()
		}
	}
	// TalkPath_whisper
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, )), FieldValue.Type.UInt8, )) {
			ownrecv()
			clsend()
		}
	}
	// TalkPath_group
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, )), FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
	}
	// TalkPath_account
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, )), FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
	}
	// AvatarHandle
	dclass {
	}
	// DistributedAvatar
	dclass {
		field(FieldValue.Type.String) {
			db()
		}
		field(FieldValue.Type.String) {
			required()
			db()
			airecv()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int8, )) {
			airecv()
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, ))
	}
	// FriendEntry
	struct {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt8)
	}
	// DistributedPlayer
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			ownrecv()
		}
		field(FieldValue.Type.String) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, )) {
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, )) {
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, )) {
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			airecv()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			airecv()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))) {
			required()
			db()
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.String) {
			ram()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			db()
			airecv()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.String) {
			ram()
			db()
		}
		field(FieldValue.Type.String) {
			ram()
			db()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			airecv()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			airecv()
			ownrecv()
			broadcast()
		}
	}
	// OtpAvatarManager
	dclass {
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Blob)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))
	}
	// DistributedChatManager
	dclass {
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.String) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.UInt32)
	}
	// FriendManager
	dclass {
		field(FieldValue.Type.Int32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.String, FieldValue.Type.Blob, FieldValue.Type.Int32, ))
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.String, ))
		field(FieldValue.Type.String) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int32, ))
	}
	// FriendInfo
	struct {
		field(FieldValue.Type.String)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.String)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.String)
		field(FieldValue.Type.String)
		field(FieldValue.Type.UInt32)
	}
	// AvatarFriendInfo
	struct {
		field(FieldValue.Type.String)
		field(FieldValue.Type.String)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
	}
	// MemberInfo
	struct {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.String)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
	}
	// leaderBoardRecordResponces
	struct {
		field(FieldValue.Type.Char)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.String)
		field(FieldValue.Type.Int32)
	}
	// leaderBoardRecord
	struct {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.String)
		field(FieldValue.Type.Int32)
	}
	// LeaderBoardReceiver
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, )), ))
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, )), ))
	}
	// LeaderBoard
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.String), FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.String), FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.String), FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), ))
		field(FieldValue.Type.String)
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt32, ))
	}
	// GuildManager
	dclass {
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.String) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Int32, )))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.String)
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.String)
		field(FieldValue.Type.String)
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.String)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ), FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.UInt32)
	}
	// AvatarFriendsManager
	dclass {
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ), ))
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.String, ))
		field(FieldValue.Type.UInt32)
	}
	// PlayerFriendsManager
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.String)
		field(FieldValue.Type.String)
		field(FieldValue.Type.String)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt32, ), FieldValue.Type.UInt8, ))
		field(FieldValue.Type.UInt32)
	}
	// SnapshotDispatcher
	dclass {
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
	}
	// SnapshotRenderer
	dclass {
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, ))
	}
	// SpeedchatRelay
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt8, )) {
			clsend()
		}
	}
	// CentralLogger
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
		}
	}
	// SettingsMgr
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, )) {
			airecv()
		}
	}
	// StatusDatabase
	dclass {
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
	}
	// CallbackObject
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ))
	}
	// PotentialAvatar
	struct {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.String)
		field(FieldValue.Type.Blob)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
	}
	// AstronLoginManager
	dclass {
		field(FieldValue.Type.String) {
			clsend()
		}
		field(FieldValue.Type.Blob)
		field(FieldValue.Type.Empty) {
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Blob, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )))
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt8, )) {
			clsend()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt8, )) {
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, )) {
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.UInt32) {
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.UInt32) {
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			clsend()
		}
	}
	// GiftItem
	struct {
		field(FieldValue.Type.Blob)
		field(FieldValue.Type.String)
	}
	// gardenSpecial
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
	}
	// simpleMail
	struct {
		field(FieldValue.Type.UInt64)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt16)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.String)
	}
	// invite
	struct {
		field(FieldValue.Type.UInt64)
		field(FieldValue.Type.UInt64)
		field(FieldValue.Type.UInt8)
	}
	// decoration
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
	}
	// activity
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
	}
	// party
	struct {
		field(FieldValue.Type.UInt64)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt16)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt16)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )))
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )))
		field(FieldValue.Type.UInt8)
	}
	// partyReply
	struct {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt8)
	}
	// repliesForOneParty
	struct {
		field(FieldValue.Type.UInt64)
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )))
	}
	// publicPartyInfo
	struct {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.String)
		field(FieldValue.Type.Array(FieldValue.Type.UInt8))
		field(FieldValue.Type.UInt16)
	}
	// jukeboxSongInfo
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.String)
	}
	// partyCloudColor
	struct {
		field(FieldValue.Type.UInt16)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
	}
	// datetime
	struct {
		field(FieldValue.Type.UInt16)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
	}
	// ToontownDistrict
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
	}
	// ToontownDistrictStats
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
	}
	// WelcomeValleyManager
	dclass {
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
	}
	// DistributedAnimatedProp
	dclass {
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedToon
	dclass {
		field(FieldValue.Type.Blob) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt16)) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt32, )) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Int8)) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ))) {
			required()
			db()
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt16)) {
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int32, )) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int32, )) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			airecv()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt16)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt32) {
			ownrecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.Int16))) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt32, )) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.Blob, FieldValue.Type.Blob, )) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.UInt32) {
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.UInt32) {
			ownrecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt16)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Int8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ownrecv()
		}
		field(FieldValue.Type.Int8) {
			ownrecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt16)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt16), )) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt16), )) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt16), )) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			ownrecv()
		}
		field(FieldValue.Type.Empty) {
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int32, )) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, )) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, )) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			airecv()
			ownsend()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			airecv()
			ownsend()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			airecv()
			ownsend()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.Int8) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.Int8) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Int8)) {
			required()
			db()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.Empty) {
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ownrecv()
		}
		field(FieldValue.Type.Empty) {
			ownrecv()
		}
		field(FieldValue.Type.UInt32) {
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.UInt32, )) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			ownrecv()
		}
		field(FieldValue.Type.Int32) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.String) {
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt32) {
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt16)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			ownrecv()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Char)) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Char)) {
			airecv()
			ownsend()
		}
		field(FieldValue.Type.Empty) {
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			ownrecv()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, ))) {
			ownrecv()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt64, FieldValue.Type.UInt8, ))) {
			ram()
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.UInt8, ))) {
			ram()
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.UInt8, ))) {
			ram()
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )), ))) {
			ram()
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt8, )) {
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt64, FieldValue.Type.UInt8, )) {
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.UInt64) {
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt8, )) {
			airecv()
			ownrecv()
		}
		field(FieldValue.Type.UInt64) {
			ownrecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.UInt16, )) {
			ownrecv()
		}
		field(FieldValue.Type.String) {
			ram()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			db()
			airecv()
		}
		field(FieldValue.Type.Empty) {
			ownrecv()
		}
	}
	// DistributedCCharBase
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Char)) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
	}
	// DistributedMickey
	dclass {
	}
	// DistributedVampireMickey
	dclass {
	}
	// DistributedWitchMinnie
	dclass {
	}
	// DistributedMinnie
	dclass {
	}
	// DistributedGoofy
	dclass {
	}
	// DistributedDaisy
	dclass {
	}
	// DistributedSockHopDaisy
	dclass {
	}
	// DistributedChip
	dclass {
	}
	// DistributedPoliceChip
	dclass {
	}
	// DistributedDale
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedJailbirdDale
	dclass {
	}
	// DistributedDonald
	dclass {
	}
	// DistributedFrankenDonald
	dclass {
	}
	// DistributedDonaldDock
	dclass {
	}
	// DistributedPluto
	dclass {
	}
	// DistributedWesternPluto
	dclass {
	}
	// DistributedGoofySpeedway
	dclass {
	}
	// DistributedSuperGoofy
	dclass {
	}
	// DistributedPartyGate
	dclass {
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.UInt64, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt16, )))
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt16, ))
	}
	// DistributedTrolley
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
	}
	// DistributedSuitPlanner
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8))
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8))
	}
	// DistributedSuitBase
	dclass {
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Blob) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedSuit
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			broadcast()
		}
	}
	// DistributedTutorialSuit
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
	}
	// DistributedFactorySuit
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedMintSuit
	dclass {
	}
	// DistributedStageSuit
	dclass {
	}
	// DistributedBossCog
	dclass {
		field(FieldValue.Type.Blob) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			broadcast()
		}
	}
	// DistributedSellbotBoss
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.String) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt8)
	}
	// DistributedCashbotBoss
	dclass {
		field(FieldValue.Type.String) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// LinkPosition
	struct {
		field(FieldValue.Type.Int16)
		field(FieldValue.Type.Int16)
		field(FieldValue.Type.Int16)
	}
	// DistributedCashbotBossCrane
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int8) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )), FieldValue.Type.Int16, )) {
			broadcast()
			clsend()
		}
	}
	// DistributedCashbotBossObject
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.UInt64) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Int8) {
			broadcast()
			clsend()
		}
	}
	// DistributedCashbotBossSafe
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedCashbotBossGoon
	dclass {
		field(FieldValue.Type.Int16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			broadcast()
			clsend()
		}
	}
	// DistributedBattleBase
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int32), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
	}
	// DistributedBattle
	dclass {
	}
	// DistributedBattleBldg
	dclass {
	}
	// DistributedBattleTutorial
	dclass {
	}
	// DistributedLevelBattle
	dclass {
	}
	// DistributedBattleFactory
	dclass {
	}
	// DistributedMintBattle
	dclass {
	}
	// DistributedStageBattle
	dclass {
	}
	// DistributedBattleFinal
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedBoat
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedButterfly
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedMMPiano
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
	}
	// DistributedDGFlower
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
	}
	// DistributedFishingPond
	dclass {
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedFishingTarget
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedFishingSpot
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
	}
	// DistributedPondBingoManager
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt16)
	}
	// DistributedCannon
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedTarget
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.String) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Int32) {
			ram()
			broadcast()
		}
	}
	// DistributedMinigame
	dclass {
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt16)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedMinigameTemplate
	dclass {
	}
	// DistributedRaceGame
	dclass {
		field(FieldValue.Type.Int16) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Int8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.Int8), )) {
			broadcast()
		}
	}
	// DistributedCannonGame
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Int32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, )) {
			broadcast()
		}
	}
	// DistributedPhotoGame
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedPatternGame
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
	}
	// DistributedRingGame
	dclass {
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			broadcast()
		}
	}
	// DistributedTagGame
	dclass {
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt16)) {
			broadcast()
		}
	}
	// DistributedMazeGame
	dclass {
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			broadcast()
			clsend()
		}
	}
	// DistributedTugOfWarGame
	dclass {
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.Int16), )) {
			broadcast()
		}
		field(FieldValue.Type.Int32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
	}
	// DistributedCatchGame
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedDivingGame
	dclass {
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Char), )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Char), )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int8, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			broadcast()
		}
	}
	// DistributedTargetGame
	dclass {
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// EstateManager
	dclass {
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Char), )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
	}
	// decorItem
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Array(FieldValue.Type.UInt8))
		field(FieldValue.Type.Array(FieldValue.Type.UInt32))
	}
	// lawnItem
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Int8)
		field(FieldValue.Type.Int8)
		field(FieldValue.Type.UInt16)
	}
	// DistributedEstate
	dclass {
		field(FieldValue.Type.String) {
			db()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ))) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ))) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ))) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ))) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ))) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ))) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ))) {
			required()
			db()
			airecv()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedHouse
	dclass {
		field(FieldValue.Type.String) {
			db()
		}
		field(FieldValue.Type.UInt8) {
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.String) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
		}
		field(FieldValue.Type.Blob) {
			required()
			db()
		}
		field(FieldValue.Type.UInt8) {
			required()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
	}
	// DistributedHouseInterior
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedGarden
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			broadcast()
		}
	}
	// DistributedParty
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.UInt8, )) {
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			required()
			broadcast()
		}
		field(FieldValue.Type.String) {
			required()
			broadcast()
		}
		field(FieldValue.Type.String) {
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
	}
	// DistributedPartyActivity
	dclass {
		field(FieldValue.Type.Int16) {
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.String, ))
	}
	// DistributedPartyTeamActivity
	dclass {
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16)
		field(FieldValue.Type.UInt8)
	}
	// CatchGeneration
	struct {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Int8)
	}
	// DistributedPartyCatchActivity
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int8, ))) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
	}
	// DistributedPartyWinterCatchActivity
	dclass {
	}
	// DistributedPartyCogActivity
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.UInt8, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.UInt8, )) {
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Int8)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt16, )) {
			ram()
			broadcast()
		}
	}
	// DistributedPartyWinterCogActivity
	dclass {
	}
	// DistributedPartyDanceActivityBase
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Char), )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt16), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.String, )) {
			broadcast()
		}
	}
	// DistributedPartyDanceActivity
	dclass {
	}
	// DistributedPartyDance20Activity
	dclass {
	}
	// DistributedPartyValentineDanceActivity
	dclass {
	}
	// DistributedPartyValentineDance20Activity
	dclass {
	}
	// DistributedPartyJukeboxActivityBase
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, ), FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, )), FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, ))
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
	}
	// DistributedPartyJukeboxActivity
	dclass {
	}
	// DistributedPartyJukebox40Activity
	dclass {
	}
	// DistributedPartyValentineJukeboxActivity
	dclass {
	}
	// DistributedPartyValentineJukebox40Activity
	dclass {
	}
	// DistributedPartyCannonActivity
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			broadcast()
		}
	}
	// DistributedPartyCannon
	dclass {
		field(FieldValue.Type.UInt64) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedPartyFireworksActivity
	dclass {
		field(FieldValue.Type.UInt8) {
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			required()
			broadcast()
		}
	}
	// DistributedPartyTrampolineActivity
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Char)) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.String) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Int8)) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Int8)) {
			broadcast()
		}
	}
	// DistributedPartyValentineTrampolineActivity
	dclass {
	}
	// DistributedPartyVictoryTrampolineActivity
	dclass {
	}
	// DistributedPartyWinterTrampolineActivity
	dclass {
	}
	// DistributedPartyTugOfWarActivity
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			broadcast()
		}
	}
	// DeleteManager
	dclass {
		field(FieldValue.Type.Blob) {
			airecv()
			clsend()
		}
	}
	// ToontownMagicWordManager
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.UInt32, FieldValue.Type.String, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Blob, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Blob, FieldValue.Type.String, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
	}
	// weeklyCalendarHoliday
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
	}
	// yearlyCalendarHoliday
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Array(FieldValue.Type.UInt8))
		field(FieldValue.Type.Array(FieldValue.Type.UInt8))
	}
	// oncelyCalendarHoliday
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Array(FieldValue.Type.UInt16))
		field(FieldValue.Type.Array(FieldValue.Type.UInt16))
	}
	// relativelyCalendarHoliday
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Array(FieldValue.Type.UInt16))
		field(FieldValue.Type.Array(FieldValue.Type.UInt16))
	}
	// startAndEndTime
	struct {
		field(FieldValue.Type.Array(FieldValue.Type.UInt16))
		field(FieldValue.Type.Array(FieldValue.Type.UInt16))
	}
	// multipleStartHoliday
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), )))
	}
	// NewsManager
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ))) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ))) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), ))) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), ))) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Array(FieldValue.Type.UInt16), )), ))) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
	}
	// PurchaseManager
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Int16)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.Int16, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// NewbiePurchaseManager
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
	}
	// SafeZoneManager
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// TutorialManager
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// CatalogManager
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedMyTest
	dclass {
		field(FieldValue.Type.UInt16) {
			broadcast()
		}
	}
	// DistributedTreasure
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedDDTreasure
	dclass {
	}
	// DistributedDGTreasure
	dclass {
	}
	// DistributedDLTreasure
	dclass {
	}
	// DistributedTTTreasure
	dclass {
	}
	// DistributedBRTreasure
	dclass {
	}
	// DistributedMMTreasure
	dclass {
	}
	// DistributedOZTreasure
	dclass {
	}
	// DistributedETreasure
	dclass {
	}
	// DistributedEFlyingTreasure
	dclass {
	}
	// DistributedTagTreasure
	dclass {
	}
	// DistributedCashbotBossTreasure
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedLargeBlobSender
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob)
		field(FieldValue.Type.String)
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedLevel
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Int32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.String, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Blob)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, FieldValue.Type.Blob, FieldValue.Type.Blob, )) {
			broadcast()
		}
	}
	// DistributedEntity
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedInteractiveEntity
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int32, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedTrophyMgr
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedBuilding
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt32, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedAnimBuilding
	dclass {
	}
	// savedBy
	struct {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.String)
		field(FieldValue.Type.Blob)
	}
	// DistributedToonInterior
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Blob, ))) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedToonHallInterior
	dclass {
	}
	// DistributedSuitInterior
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt16), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedCogdoBarrel
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedCogdoInterior
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt16), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt8), )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedCogdoBattleBldg
	dclass {
	}
	// DistCogdoGame
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			broadcast()
		}
	}
	// DistCogdoLevelGame
	dclass {
	}
	// DistCogdoMazeGame
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			broadcast()
		}
	}
	// DistCogdoFlyingGame
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
	}
	// DistCogdoBoardroomGame
	dclass {
	}
	// DistCogdoCraneGame
	dclass {
	}
	// DistCogdoCrane
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )), FieldValue.Type.Int16, )) {
			broadcast()
			clsend()
		}
	}
	// DistCogdoCraneObject
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.UInt64) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Int8) {
			broadcast()
			clsend()
		}
	}
	// DistCogdoCraneMoneyBag
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistCogdoCraneCog
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedHQInterior
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedGagshopInterior
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedPetshopInterior
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedKartShopInterior
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedDoor
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int8)
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedAnimDoor
	dclass {
	}
	// DistributedHouseDoor
	dclass {
	}
	// DistributedCogHQDoor
	dclass {
	}
	// DistributedSellbotHQDoor
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
	}
	// DistributedNPCToonBase
	dclass {
		field(FieldValue.Type.String) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
	}
	// DistributedNPCToon
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int8) {
			airecv()
			clsend()
		}
	}
	// DistributedNPCSpecialQuestGiver
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int8) {
			airecv()
			clsend()
		}
	}
	// DistributedNPCFlippyInToonHall
	dclass {
	}
	// DistributedNPCScientist
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
			ownsend()
		}
	}
	// DistributedNPCClerk
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.Int16, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
	}
	// DistributedNPCTailor
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.Int8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, )) {
			ram()
			broadcast()
		}
	}
	// DistributedNPCBlocker
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
	}
	// DistributedNPCFisherman
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
	}
	// DistributedNPCPartyPerson
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
	}
	// DistributedNPCPetclerk
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedNPCKartClerk
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedKnockKnockDoor
	dclass {
	}
	// DistributedElevator
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedElevatorFSM
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedElevatorFloor
	dclass {
		field(FieldValue.Type.Int8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedElevatorExt
	dclass {
		field(FieldValue.Type.Int8) {
			ram()
			broadcast()
		}
	}
	// DistributedLawOfficeElevatorExt
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
	}
	// DistributedElevatorInt
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32)
	}
	// DistributedFactoryElevatorExt
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
	}
	// DistributedMintElevatorExt
	dclass {
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
	}
	// DistributedCogdoElevatorExt
	dclass {
	}
	// DistributedLawOfficeElevatorInt
	dclass {
		field(FieldValue.Type.UInt32)
	}
	// DistributedCogdoElevatorInt
	dclass {
	}
	// DistributedBossElevator
	dclass {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
	}
	// DistributedVPElevator
	dclass {
	}
	// DistributedCFOElevator
	dclass {
	}
	// DistributedCJElevator
	dclass {
	}
	// DistributedBBElevator
	dclass {
	}
	// DistributedBoardingParty
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedTutorialInterior
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedBankMgr
	dclass {
		field(FieldValue.Type.Int16) {
			airecv()
			clsend()
		}
	}
	// DistributedMailbox
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.String) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Blob, FieldValue.Type.UInt8, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Blob, FieldValue.Type.UInt8, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt64, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt64, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt64) {
			airecv()
			clsend()
		}
	}
	// DistributedFurnitureManager
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.String) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt16, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt32, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt16, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt16, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt16, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
	}
	// DistributedFurnitureItem
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedBank
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			airecv()
			clsend()
		}
	}
	// DistributedCloset
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.Int8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, )) {
			ram()
			broadcast()
		}
	}
	// DistributedTrunk
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
	}
	// DistributedPhone
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.UInt16)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Blob, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt32, FieldValue.Type.Blob, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int8, ))
	}
	// DistributedFireworkShow
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
	}
	// DistributedFireworksCannon
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
	}
	// LobbyManager
	dclass {
	}
	// DistributedFactory
	dclass {
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
	}
	// DistributedLawOffice
	dclass {
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedLawOfficeFloor
	dclass {
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
	}
	// DistributedMint
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
	}
	// DistributedMintRoom
	dclass {
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
	}
	// DistributedStage
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
	}
	// DistributedStageRoom
	dclass {
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
	}
	// DistributedInGameEditor
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, FieldValue.Type.Blob, FieldValue.Type.Blob, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, FieldValue.Type.Blob, FieldValue.Type.Blob, ))
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedLift
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedDoorEntity
	dclass {
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int32, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedSwitch
	dclass {
	}
	// DistributedButton
	dclass {
	}
	// DistributedTrigger
	dclass {
	}
	// DistributedCrushableEntity
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
	}
	// DistributedCrusherEntity
	dclass {
	}
	// DistributedElevatorMarker
	dclass {
	}
	// DistributedStomper
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			broadcast()
		}
	}
	// DistributedStomperPair
	dclass {
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedBarrelBase
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedGagBarrel
	dclass {
	}
	// DistributedBeanBarrel
	dclass {
	}
	// DistributedHealBarrel
	dclass {
	}
	// DistributedGrid
	dclass {
	}
	// ActiveCell
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
	}
	// DirectionalCell
	dclass {
	}
	// CrusherCell
	dclass {
	}
	// DistributedCrate
	dclass {
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedSinkingPlatform
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
	}
	// DistributedGoon
	dclass {
		field(FieldValue.Type.Int16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
	}
	// DistributedGridGoon
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
	}
	// BattleBlocker
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
	}
	// DistributedLaserField
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.String) {
			ram()
			broadcast()
		}
	}
	// golfGreenGameBoardData
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
	}
	// golfGreenGameScoreData
	struct {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt8)
	}
	// DistributedGolfGreenGame
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.UInt8), ))
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int32, )) {
			ram()
			broadcast()
		}
	}
	// DistributedSecurityCamera
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
	}
	// DistributedMover
	dclass {
		field(FieldValue.Type.Int16) {
			ram()
			broadcast()
		}
	}
	// DistributedPet
	dclass {
		field(FieldValue.Type.String) {
			db()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.String) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Int16) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Int16) {
			broadcast()
			ownsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt16)) {
			required()
			db()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty)
	}
	// DistributedPetProxy
	dclass {
		field(FieldValue.Type.String) {
			ram()
			broadcast()
		}
	}
	// DistributedBlackCatMgr
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedPolarPlaceEffectMgr
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedGreenToonEffectMgr
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedResistanceEmoteMgr
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedScavengerHuntTarget
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedTrickOrTreatTarget
	dclass {
	}
	// DistributedWinterCarolingTarget
	dclass {
	}
	// DistributedDataStoreManager
	dclass {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.String, ))
		field(FieldValue.Type.Empty)
	}
	// DistributedVehicle
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int8) {
			ram()
			broadcast()
		}
	}
	// avatarAndKart
	struct {
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
	}
	// DistributedRace
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt16)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt16), FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedGag
	dclass {
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			airecv()
			broadcast()
			clsend()
		}
	}
	// DistributedProjectile
	dclass {
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			airecv()
			broadcast()
			clsend()
		}
	}
	// DistributedKartPad
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedRacePad
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Array(FieldValue.Type.UInt16)) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedViewPad
	dclass {
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedStartingBlock
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedViewingBlock
	dclass {
	}
	// DistributedLeaderBoard
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Blob) {
			ram()
			broadcast()
		}
	}
	// DistributedDeliveryManager
	dclass {
		field(FieldValue.Type.String) {
			clsend()
		}
		field(FieldValue.Type.String)
		field(FieldValue.Type.String)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.String)
		field(FieldValue.Type.String)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Blob, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Blob, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Empty) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Empty) {
			clsend()
		}
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
	}
	// DistributedLawbotBoss
	dclass {
		field(FieldValue.Type.String) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
	}
	// DistributedLawbotBossSuit
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedLawbotBossGavel
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Char) {
			ram()
			broadcast()
		}
	}
	// DistributedLawbotCannon
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedLawbotChair
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Char) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			broadcast()
		}
	}
	// DistributedLawnDecor
	dclass {
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
	}
	// DistributedGardenPlot
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
	}
	// DistributedGardenBox
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedStatuary
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedToonStatuary
	dclass {
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedAnimatedStatuary
	dclass {
	}
	// DistributedChangingStatuary
	dclass {
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedPlantBase
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedFlower
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedGagTree
	dclass {
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedTravelGame
	dclass {
		field(FieldValue.Type.Int16) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedPairingGame
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.UInt32, FieldValue.Type.Int16, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
			clsend()
		}
	}
	// golfData
	struct {
		field(FieldValue.Type.Int16)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
	}
	// Coord3
	struct {
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
	}
	// CommonObjectData
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
	}
	// DistributedPhysicsWorld
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ), FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ))) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ))) {
			airecv()
			clsend()
		}
	}
	// DistributedGolfHole
	dclass {
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.UInt16, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )), ))
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			broadcast()
		}
	}
	// DistributedGolfCourse
	dclass {
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.UInt8)), FieldValue.Type.Array(FieldValue.Type.Int8), FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.UInt8)), FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.UInt8)), FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.UInt8)), FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), FieldValue.Type.Int8, )) {
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Int16)) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, )) {
			broadcast()
		}
	}
	// DistributedVineGame
	dclass {
		field(FieldValue.Type.Int8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt32, FieldValue.Type.Int8, )) {
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.Int8, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int8, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int8, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			ram()
			required()
			broadcast()
		}
	}
	// TTAvatarFriendsManager
	dclass {
	}
	// TTPlayerFriendsManager
	dclass {
	}
	// TTSpeedchatRelay
	dclass {
	}
	// DistributedGolfKart
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedTimer
	dclass {
		field(FieldValue.Type.Int32) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedPicnicBasket
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedBossbotBoss
	dclass {
		field(FieldValue.Type.String) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt32, )) {
			broadcast()
		}
	}
	// DistributedCogKart
	dclass {
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
	}
	// DistributedCountryClub
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt32)) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
	}
	// DistributedCountryClubRoom
	dclass {
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			broadcast()
		}
	}
	// DistributedMoleField
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.Int16, FieldValue.Type.UInt8, FieldValue.Type.UInt16, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int16, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.Int32, )) {
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedCountryClubBattle
	dclass {
	}
	// DistributedClubElevator
	dclass {
		field(FieldValue.Type.Int8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedMaze
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
	}
	// DistributedBattleWaiters
	dclass {
	}
	// DistributedFoodBelt
	dclass {
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Char) {
			ram()
			broadcast()
		}
	}
	// DistributedBanquetTable
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.Int8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int8) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			broadcast()
			clsend()
		}
	}
	// DistributedBattleDiners
	dclass {
	}
	// DistributedGolfSpot
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Char, FieldValue.Type.UInt32, FieldValue.Type.Int8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Int8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Int8) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.UInt8, )) {
			broadcast()
			clsend()
		}
	}
	// TireInput
	struct {
		field(FieldValue.Type.Int32)
		field(FieldValue.Type.Int32)
	}
	// DistributedIceGame
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ))) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, ))) {
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, ))) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Int16), )) {
			broadcast()
		}
		field(FieldValue.Type.String) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			broadcast()
		}
	}
	// DistributedCogThiefGame
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int64, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Int32, FieldValue.Type.Int32, FieldValue.Type.Int8, )) {
			broadcast()
		}
	}
	// twoDTreasureInfo
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.UInt8)
	}
	// twoDSectionInfo
	struct {
		field(FieldValue.Type.UInt8)
		field(FieldValue.Type.Array(FieldValue.Type.UInt8))
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )))
		field(FieldValue.Type.Array(FieldValue.Type.UInt8))
		field(FieldValue.Type.Array(FieldValue.Type.UInt8))
	}
	// DistributedTwoDGame
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int16, )) {
			airecv()
			broadcast()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), ))) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedPicnicTable
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.Int16, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt8, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, FieldValue.Type.Int16, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.String, FieldValue.Type.UInt32, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
	}
	// DistributedChineseCheckers
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			broadcast()
		}
	}
	// DistributedCheckers
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.Array(FieldValue.Type.UInt8), )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedFindFour
	dclass {
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.UInt8) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Empty) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Array(FieldValue.Type.UInt8)) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.Int16, )) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Array(FieldValue.Type.Array(FieldValue.Type.UInt8)), FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Int16) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			broadcast()
		}
		field(FieldValue.Type.UInt32) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Empty) {
			broadcast()
		}
	}
	// DistributedMailManager
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
		}
	}
	// DistributedPartyManager
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.UInt32), FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.Array(FieldValue.Type.Char), FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Int8, FieldValue.Type.UInt16, )) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt64, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.UInt8, )) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.Int8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.Int8, )) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.Int8, FieldValue.Type.UInt16, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.UInt32) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.Tuple(FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, )), FieldValue.Type.UInt8, ), FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.Int8, FieldValue.Type.UInt16, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, ))
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, ))
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32)
		field(FieldValue.Type.UInt32) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt64, )) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt8, )) {
			airecv()
		}
		field(FieldValue.Type.UInt32) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Empty) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt64, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.String, FieldValue.Type.Array(FieldValue.Type.UInt8), FieldValue.Type.UInt64, ))
		field(FieldValue.Type.Empty)
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
		}
	}
	// DistributedObjectGlobal
	dclass {
	}
	// RATManager
	dclass {
	}
	// AwardManager
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
	}
	// DistributedCpuInfoMgr
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.String, ))
	}
	// DistributedSecurityMgr
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
		}
	}
	// NonRepeatableRandomSourceClient
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.UInt32), )) {
			airecv()
		}
	}
	// TTCodeRedemptionMgr
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.Array(FieldValue.Type.Char), )) {
			airecv()
			clsend()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, )) {
			airecv()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
	}
	// NonRepeatableRandomSource
	dclass {
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.String, FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Empty) {
			airecv()
		}
	}
	// DistributedInGameNewsMgr
	dclass {
		field(FieldValue.Type.String) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.String) {
			airecv()
		}
	}
	// DistributedWhitelistMgr
	dclass {
		field(FieldValue.Type.Empty) {
			broadcast()
		}
		field(FieldValue.Type.Tuple(FieldValue.Type.UInt32, FieldValue.Type.UInt32, ))
		field(FieldValue.Type.Empty) {
			airecv()
		}
	}
	// DistributedPhaseEventMgr
	dclass {
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.Array(FieldValue.Type.Tuple(FieldValue.Type.UInt16, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, FieldValue.Type.UInt8, ))) {
			required()
			broadcast()
		}
		field(FieldValue.Type.Int8) {
			ram()
			required()
			broadcast()
		}
		field(FieldValue.Type.UInt8) {
			ram()
			required()
			broadcast()
		}
	}
	// DistributedHydrantZeroMgr
	dclass {
	}
	// DistributedMailboxZeroMgr
	dclass {
	}
	// DistributedTrashcanZeroMgr
	dclass {
	}
	// DistributedSillyMeterMgr
	dclass {
	}
}

